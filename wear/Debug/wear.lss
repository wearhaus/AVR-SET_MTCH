
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00802000  000028ec  000029a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  0080202a  0080202a  000029ca  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  000029ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006f8  00000000  00000000  00002a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000179c7  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003301  00000000  00000000  0001ab07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c22d  00000000  00000000  0001de08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001704  00000000  00000000  0002a038  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002dbdf  00000000  00000000  0002b73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000077d2  00000000  00000000  0005931b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000780  00000000  00000000  00060aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000cb0d  00000000  00000000  0006126d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c1       	rjmp	.+798    	; 0x320 <__ctors_end>
       2:	00 00       	nop
       4:	aa c1       	rjmp	.+852    	; 0x35a <__bad_interrupt>
       6:	00 00       	nop
       8:	a8 c1       	rjmp	.+848    	; 0x35a <__bad_interrupt>
       a:	00 00       	nop
       c:	a6 c1       	rjmp	.+844    	; 0x35a <__bad_interrupt>
       e:	00 00       	nop
      10:	a4 c1       	rjmp	.+840    	; 0x35a <__bad_interrupt>
      12:	00 00       	nop
      14:	a2 c1       	rjmp	.+836    	; 0x35a <__bad_interrupt>
      16:	00 00       	nop
      18:	a0 c1       	rjmp	.+832    	; 0x35a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9e c1       	rjmp	.+828    	; 0x35a <__bad_interrupt>
      1e:	00 00       	nop
      20:	9c c1       	rjmp	.+824    	; 0x35a <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c7       	rjmp	.+3718   	; 0xeac <__vector_9>
      26:	00 00       	nop
      28:	98 c1       	rjmp	.+816    	; 0x35a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__vector_11>
      30:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__vector_12>
      34:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__vector_13>
      38:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_14>
      3c:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_15>
      40:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__vector_16>
      44:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__vector_17>
      48:	0c 94 35 11 	jmp	0x226a	; 0x226a <__vector_18>
      4c:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__vector_19>
      50:	0c 94 87 11 	jmp	0x230e	; 0x230e <__vector_20>
      54:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__vector_21>
      58:	80 c1       	rjmp	.+768    	; 0x35a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_23>
      60:	7c c1       	rjmp	.+760    	; 0x35a <__bad_interrupt>
      62:	00 00       	nop
      64:	7a c1       	rjmp	.+756    	; 0x35a <__bad_interrupt>
      66:	00 00       	nop
      68:	78 c1       	rjmp	.+752    	; 0x35a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	76 c1       	rjmp	.+748    	; 0x35a <__bad_interrupt>
      6e:	00 00       	nop
      70:	74 c1       	rjmp	.+744    	; 0x35a <__bad_interrupt>
      72:	00 00       	nop
      74:	72 c1       	rjmp	.+740    	; 0x35a <__bad_interrupt>
      76:	00 00       	nop
      78:	70 c1       	rjmp	.+736    	; 0x35a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6e c1       	rjmp	.+732    	; 0x35a <__bad_interrupt>
      7e:	00 00       	nop
      80:	6c c1       	rjmp	.+728    	; 0x35a <__bad_interrupt>
      82:	00 00       	nop
      84:	6a c1       	rjmp	.+724    	; 0x35a <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_34>
      8c:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_35>
      90:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_36>
      94:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_37>
      98:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_38>
      9c:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__vector_39>
      a0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_40>
      a4:	5a c1       	rjmp	.+692    	; 0x35a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	58 c1       	rjmp	.+688    	; 0x35a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bc 07       	cpc	r27, r28
      ae:	c1 07       	cpc	r28, r17
      b0:	f3 07       	cpc	r31, r19
      b2:	f3 07       	cpc	r31, r19
      b4:	f3 07       	cpc	r31, r19
      b6:	f3 07       	cpc	r31, r19
      b8:	f3 07       	cpc	r31, r19
      ba:	f3 07       	cpc	r31, r19
      bc:	f3 07       	cpc	r31, r19
      be:	f3 07       	cpc	r31, r19
      c0:	f3 07       	cpc	r31, r19
      c2:	f3 07       	cpc	r31, r19
      c4:	f3 07       	cpc	r31, r19
      c6:	f3 07       	cpc	r31, r19
      c8:	f3 07       	cpc	r31, r19
      ca:	f3 07       	cpc	r31, r19
      cc:	c6 07       	cpc	r28, r22
      ce:	f3 07       	cpc	r31, r19
      d0:	f3 07       	cpc	r31, r19
      d2:	f3 07       	cpc	r31, r19
      d4:	f3 07       	cpc	r31, r19
      d6:	f3 07       	cpc	r31, r19
      d8:	f3 07       	cpc	r31, r19
      da:	f3 07       	cpc	r31, r19
      dc:	f3 07       	cpc	r31, r19
      de:	f3 07       	cpc	r31, r19
      e0:	f3 07       	cpc	r31, r19
      e2:	f3 07       	cpc	r31, r19
      e4:	f3 07       	cpc	r31, r19
      e6:	f3 07       	cpc	r31, r19
      e8:	f3 07       	cpc	r31, r19
      ea:	f3 07       	cpc	r31, r19
      ec:	f3 07       	cpc	r31, r19
      ee:	cb 07       	cpc	r28, r27
      f0:	d0 07       	cpc	r29, r16
      f2:	f3 07       	cpc	r31, r19
      f4:	f3 07       	cpc	r31, r19
      f6:	f3 07       	cpc	r31, r19
      f8:	f3 07       	cpc	r31, r19
      fa:	f3 07       	cpc	r31, r19
      fc:	f3 07       	cpc	r31, r19
      fe:	f3 07       	cpc	r31, r19
     100:	f3 07       	cpc	r31, r19
     102:	f3 07       	cpc	r31, r19
     104:	f3 07       	cpc	r31, r19
     106:	f3 07       	cpc	r31, r19
     108:	f3 07       	cpc	r31, r19
     10a:	f3 07       	cpc	r31, r19
     10c:	f3 07       	cpc	r31, r19
     10e:	d5 07       	cpc	r29, r21
     110:	da 07       	cpc	r29, r26
     112:	f3 07       	cpc	r31, r19
     114:	f3 07       	cpc	r31, r19
     116:	f3 07       	cpc	r31, r19
     118:	f3 07       	cpc	r31, r19
     11a:	f3 07       	cpc	r31, r19
     11c:	f3 07       	cpc	r31, r19
     11e:	f3 07       	cpc	r31, r19
     120:	f3 07       	cpc	r31, r19
     122:	f3 07       	cpc	r31, r19
     124:	f3 07       	cpc	r31, r19
     126:	f3 07       	cpc	r31, r19
     128:	f3 07       	cpc	r31, r19
     12a:	f3 07       	cpc	r31, r19
     12c:	f3 07       	cpc	r31, r19
     12e:	df 07       	cpc	r29, r31
     130:	e4 07       	cpc	r30, r20
     132:	f3 07       	cpc	r31, r19
     134:	f3 07       	cpc	r31, r19
     136:	f3 07       	cpc	r31, r19
     138:	f3 07       	cpc	r31, r19
     13a:	f3 07       	cpc	r31, r19
     13c:	f3 07       	cpc	r31, r19
     13e:	f3 07       	cpc	r31, r19
     140:	f3 07       	cpc	r31, r19
     142:	f3 07       	cpc	r31, r19
     144:	f3 07       	cpc	r31, r19
     146:	f3 07       	cpc	r31, r19
     148:	f3 07       	cpc	r31, r19
     14a:	f3 07       	cpc	r31, r19
     14c:	f3 07       	cpc	r31, r19
     14e:	e9 07       	cpc	r30, r25
     150:	ee 07       	cpc	r30, r30
     152:	3f 09       	sbc	r19, r15
     154:	3f 09       	sbc	r19, r15
     156:	3f 09       	sbc	r19, r15
     158:	3f 09       	sbc	r19, r15
     15a:	3f 09       	sbc	r19, r15
     15c:	3f 09       	sbc	r19, r15
     15e:	41 09       	sbc	r20, r1
     160:	41 09       	sbc	r20, r1
     162:	41 09       	sbc	r20, r1
     164:	41 09       	sbc	r20, r1
     166:	41 09       	sbc	r20, r1
     168:	41 09       	sbc	r20, r1
     16a:	41 09       	sbc	r20, r1
     16c:	41 09       	sbc	r20, r1
     16e:	41 09       	sbc	r20, r1
     170:	41 09       	sbc	r20, r1
     172:	41 09       	sbc	r20, r1
     174:	41 09       	sbc	r20, r1
     176:	41 09       	sbc	r20, r1
     178:	41 09       	sbc	r20, r1
     17a:	41 09       	sbc	r20, r1
     17c:	41 09       	sbc	r20, r1
     17e:	41 09       	sbc	r20, r1
     180:	41 09       	sbc	r20, r1
     182:	41 09       	sbc	r20, r1
     184:	41 09       	sbc	r20, r1
     186:	41 09       	sbc	r20, r1
     188:	41 09       	sbc	r20, r1
     18a:	41 09       	sbc	r20, r1
     18c:	41 09       	sbc	r20, r1
     18e:	41 09       	sbc	r20, r1
     190:	41 09       	sbc	r20, r1
     192:	41 09       	sbc	r20, r1
     194:	41 09       	sbc	r20, r1
     196:	41 09       	sbc	r20, r1
     198:	41 09       	sbc	r20, r1
     19a:	41 09       	sbc	r20, r1
     19c:	41 09       	sbc	r20, r1
     19e:	41 09       	sbc	r20, r1
     1a0:	41 09       	sbc	r20, r1
     1a2:	41 09       	sbc	r20, r1
     1a4:	41 09       	sbc	r20, r1
     1a6:	41 09       	sbc	r20, r1
     1a8:	41 09       	sbc	r20, r1
     1aa:	41 09       	sbc	r20, r1
     1ac:	41 09       	sbc	r20, r1
     1ae:	41 09       	sbc	r20, r1
     1b0:	41 09       	sbc	r20, r1
     1b2:	41 09       	sbc	r20, r1
     1b4:	41 09       	sbc	r20, r1
     1b6:	41 09       	sbc	r20, r1
     1b8:	41 09       	sbc	r20, r1
     1ba:	41 09       	sbc	r20, r1
     1bc:	41 09       	sbc	r20, r1
     1be:	41 09       	sbc	r20, r1
     1c0:	41 09       	sbc	r20, r1
     1c2:	41 09       	sbc	r20, r1
     1c4:	41 09       	sbc	r20, r1
     1c6:	41 09       	sbc	r20, r1
     1c8:	41 09       	sbc	r20, r1
     1ca:	41 09       	sbc	r20, r1
     1cc:	41 09       	sbc	r20, r1
     1ce:	41 09       	sbc	r20, r1
     1d0:	41 09       	sbc	r20, r1
     1d2:	41 09       	sbc	r20, r1
     1d4:	3f 09       	sbc	r19, r15
     1d6:	3f 09       	sbc	r19, r15
     1d8:	41 09       	sbc	r20, r1
     1da:	41 09       	sbc	r20, r1
     1dc:	41 09       	sbc	r20, r1
     1de:	3f 09       	sbc	r19, r15
     1e0:	3f 09       	sbc	r19, r15
     1e2:	41 09       	sbc	r20, r1
     1e4:	41 09       	sbc	r20, r1
     1e6:	41 09       	sbc	r20, r1
     1e8:	41 09       	sbc	r20, r1
     1ea:	3f 09       	sbc	r19, r15
     1ec:	41 09       	sbc	r20, r1
     1ee:	41 09       	sbc	r20, r1
     1f0:	3f 09       	sbc	r19, r15
     1f2:	41 09       	sbc	r20, r1
     1f4:	3f 09       	sbc	r19, r15
     1f6:	41 09       	sbc	r20, r1
     1f8:	3f 09       	sbc	r19, r15
     1fa:	41 09       	sbc	r20, r1
     1fc:	41 09       	sbc	r20, r1
     1fe:	41 09       	sbc	r20, r1
     200:	41 09       	sbc	r20, r1
     202:	41 09       	sbc	r20, r1
     204:	41 09       	sbc	r20, r1
     206:	41 09       	sbc	r20, r1
     208:	41 09       	sbc	r20, r1
     20a:	41 09       	sbc	r20, r1
     20c:	41 09       	sbc	r20, r1
     20e:	41 09       	sbc	r20, r1
     210:	41 09       	sbc	r20, r1
     212:	41 09       	sbc	r20, r1
     214:	41 09       	sbc	r20, r1
     216:	3f 09       	sbc	r19, r15
     218:	41 09       	sbc	r20, r1
     21a:	41 09       	sbc	r20, r1
     21c:	41 09       	sbc	r20, r1
     21e:	41 09       	sbc	r20, r1
     220:	41 09       	sbc	r20, r1
     222:	41 09       	sbc	r20, r1
     224:	41 09       	sbc	r20, r1
     226:	41 09       	sbc	r20, r1
     228:	41 09       	sbc	r20, r1
     22a:	41 09       	sbc	r20, r1
     22c:	41 09       	sbc	r20, r1
     22e:	41 09       	sbc	r20, r1
     230:	3f 09       	sbc	r19, r15
     232:	12 0a       	sbc	r1, r18
     234:	21 0a       	sbc	r2, r17
     236:	65 0a       	sbc	r6, r21
     238:	6a 0a       	sbc	r6, r26
     23a:	6f 0a       	sbc	r6, r31
     23c:	74 0a       	sbc	r7, r20
     23e:	d7 0a       	sbc	r13, r23
     240:	d7 0a       	sbc	r13, r23
     242:	d7 0a       	sbc	r13, r23
     244:	d7 0a       	sbc	r13, r23
     246:	d7 0a       	sbc	r13, r23
     248:	d7 0a       	sbc	r13, r23
     24a:	d7 0a       	sbc	r13, r23
     24c:	d7 0a       	sbc	r13, r23
     24e:	d7 0a       	sbc	r13, r23
     250:	d7 0a       	sbc	r13, r23
     252:	d7 0a       	sbc	r13, r23
     254:	d7 0a       	sbc	r13, r23
     256:	d7 0a       	sbc	r13, r23
     258:	d7 0a       	sbc	r13, r23
     25a:	d7 0a       	sbc	r13, r23
     25c:	d7 0a       	sbc	r13, r23
     25e:	d7 0a       	sbc	r13, r23
     260:	d7 0a       	sbc	r13, r23
     262:	d7 0a       	sbc	r13, r23
     264:	d7 0a       	sbc	r13, r23
     266:	d7 0a       	sbc	r13, r23
     268:	d7 0a       	sbc	r13, r23
     26a:	d7 0a       	sbc	r13, r23
     26c:	d7 0a       	sbc	r13, r23
     26e:	d7 0a       	sbc	r13, r23
     270:	d7 0a       	sbc	r13, r23
     272:	d7 0a       	sbc	r13, r23
     274:	d7 0a       	sbc	r13, r23
     276:	d7 0a       	sbc	r13, r23
     278:	d7 0a       	sbc	r13, r23
     27a:	d7 0a       	sbc	r13, r23
     27c:	d7 0a       	sbc	r13, r23
     27e:	d7 0a       	sbc	r13, r23
     280:	d7 0a       	sbc	r13, r23
     282:	d7 0a       	sbc	r13, r23
     284:	d7 0a       	sbc	r13, r23
     286:	d7 0a       	sbc	r13, r23
     288:	d7 0a       	sbc	r13, r23
     28a:	d7 0a       	sbc	r13, r23
     28c:	d7 0a       	sbc	r13, r23
     28e:	d7 0a       	sbc	r13, r23
     290:	d7 0a       	sbc	r13, r23
     292:	d7 0a       	sbc	r13, r23
     294:	d7 0a       	sbc	r13, r23
     296:	d7 0a       	sbc	r13, r23
     298:	d7 0a       	sbc	r13, r23
     29a:	d7 0a       	sbc	r13, r23
     29c:	d7 0a       	sbc	r13, r23
     29e:	d7 0a       	sbc	r13, r23
     2a0:	d7 0a       	sbc	r13, r23
     2a2:	d7 0a       	sbc	r13, r23
     2a4:	d7 0a       	sbc	r13, r23
     2a6:	d7 0a       	sbc	r13, r23
     2a8:	d7 0a       	sbc	r13, r23
     2aa:	d7 0a       	sbc	r13, r23
     2ac:	d7 0a       	sbc	r13, r23
     2ae:	d7 0a       	sbc	r13, r23
     2b0:	d7 0a       	sbc	r13, r23
     2b2:	d7 0a       	sbc	r13, r23
     2b4:	7b 0a       	sbc	r7, r27
     2b6:	8a 09       	sbc	r24, r10
     2b8:	d7 0a       	sbc	r13, r23
     2ba:	d7 0a       	sbc	r13, r23
     2bc:	d7 0a       	sbc	r13, r23
     2be:	81 0a       	sbc	r8, r17
     2c0:	d4 0a       	sbc	r13, r20
     2c2:	d7 0a       	sbc	r13, r23
     2c4:	d7 0a       	sbc	r13, r23
     2c6:	d7 0a       	sbc	r13, r23
     2c8:	d7 0a       	sbc	r13, r23
     2ca:	79 0a       	sbc	r7, r25
     2cc:	d7 0a       	sbc	r13, r23
     2ce:	d7 0a       	sbc	r13, r23
     2d0:	f6 09       	sbc	r31, r6
     2d2:	d7 0a       	sbc	r13, r23
     2d4:	d6 0a       	sbc	r13, r22
     2d6:	d7 0a       	sbc	r13, r23
     2d8:	83 0a       	sbc	r8, r19
     2da:	d7 0a       	sbc	r13, r23
     2dc:	d7 0a       	sbc	r13, r23
     2de:	d7 0a       	sbc	r13, r23
     2e0:	d7 0a       	sbc	r13, r23
     2e2:	d7 0a       	sbc	r13, r23
     2e4:	d7 0a       	sbc	r13, r23
     2e6:	d7 0a       	sbc	r13, r23
     2e8:	d7 0a       	sbc	r13, r23
     2ea:	d7 0a       	sbc	r13, r23
     2ec:	d7 0a       	sbc	r13, r23
     2ee:	d7 0a       	sbc	r13, r23
     2f0:	d7 0a       	sbc	r13, r23
     2f2:	d7 0a       	sbc	r13, r23
     2f4:	d7 0a       	sbc	r13, r23
     2f6:	7f 0a       	sbc	r7, r31
     2f8:	d7 0a       	sbc	r13, r23
     2fa:	d7 0a       	sbc	r13, r23
     2fc:	d7 0a       	sbc	r13, r23
     2fe:	d7 0a       	sbc	r13, r23
     300:	d7 0a       	sbc	r13, r23
     302:	d7 0a       	sbc	r13, r23
     304:	d7 0a       	sbc	r13, r23
     306:	d7 0a       	sbc	r13, r23
     308:	d7 0a       	sbc	r13, r23
     30a:	d7 0a       	sbc	r13, r23
     30c:	d7 0a       	sbc	r13, r23
     30e:	d7 0a       	sbc	r13, r23
     310:	7d 0a       	sbc	r7, r29
     312:	2d 0a       	sbc	r2, r29
     314:	35 0a       	sbc	r3, r21
     316:	3d 0a       	sbc	r3, r29
     318:	45 0a       	sbc	r4, r21
     31a:	4d 0a       	sbc	r4, r29
     31c:	55 0a       	sbc	r5, r21
     31e:	5d 0a       	sbc	r5, r29

00000320 <__ctors_end>:
     320:	11 24       	eor	r1, r1
     322:	1f be       	out	0x3f, r1	; 63
     324:	cf ef       	ldi	r28, 0xFF	; 255
     326:	cd bf       	out	0x3d, r28	; 61
     328:	df e2       	ldi	r29, 0x2F	; 47
     32a:	de bf       	out	0x3e, r29	; 62

0000032c <__do_copy_data>:
     32c:	10 e2       	ldi	r17, 0x20	; 32
     32e:	a0 e0       	ldi	r26, 0x00	; 0
     330:	b0 e2       	ldi	r27, 0x20	; 32
     332:	ec ee       	ldi	r30, 0xEC	; 236
     334:	f8 e2       	ldi	r31, 0x28	; 40
     336:	02 c0       	rjmp	.+4      	; 0x33c <__do_copy_data+0x10>
     338:	05 90       	lpm	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	aa 32       	cpi	r26, 0x2A	; 42
     33e:	b1 07       	cpc	r27, r17
     340:	d9 f7       	brne	.-10     	; 0x338 <__do_copy_data+0xc>

00000342 <__do_clear_bss>:
     342:	20 e2       	ldi	r18, 0x20	; 32
     344:	aa e2       	ldi	r26, 0x2A	; 42
     346:	b0 e2       	ldi	r27, 0x20	; 32
     348:	01 c0       	rjmp	.+2      	; 0x34c <.do_clear_bss_start>

0000034a <.do_clear_bss_loop>:
     34a:	1d 92       	st	X+, r1

0000034c <.do_clear_bss_start>:
     34c:	a6 3a       	cpi	r26, 0xA6	; 166
     34e:	b2 07       	cpc	r27, r18
     350:	e1 f7       	brne	.-8      	; 0x34a <.do_clear_bss_loop>
     352:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <main>
     356:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <_exit>

0000035a <__bad_interrupt>:
     35a:	52 ce       	rjmp	.-860    	; 0x0 <__vectors>

0000035c <wdt_set_timeout_period>:
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     35c:	60 91 80 00 	lds	r22, 0x0080
     360:	62 70       	andi	r22, 0x02	; 2
     362:	61 60       	ori	r22, 0x01	; 1
     364:	24 e0       	ldi	r18, 0x04	; 4
     366:	82 9f       	mul	r24, r18
     368:	c0 01       	movw	r24, r0
     36a:	11 24       	eor	r1, r1
     36c:	8c 73       	andi	r24, 0x3C	; 60
     36e:	68 2b       	or	r22, r24
     370:	80 e8       	ldi	r24, 0x80	; 128
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <ccp_write_io>
     378:	e0 e8       	ldi	r30, 0x80	; 128
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	82 81       	ldd	r24, Z+2	; 0x02
     37e:	80 fd       	sbrc	r24, 0
     380:	fd cf       	rjmp	.-6      	; 0x37c <wdt_set_timeout_period+0x20>
     382:	08 95       	ret

00000384 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     384:	60 91 80 00 	lds	r22, 0x0080
     388:	6c 73       	andi	r22, 0x3C	; 60
     38a:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     38c:	80 e8       	ldi	r24, 0x80	; 128
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     394:	e0 e8       	ldi	r30, 0x80	; 128
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	80 fd       	sbrc	r24, 0
     39c:	fd cf       	rjmp	.-6      	; 0x398 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
     39e:	08 95       	ret

000003a0 <init_i2c>:
{
	cmd_read_register(index, offset);
	wait_result();
	
	return REG_READ;
}
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	29 97       	sbiw	r28, 0x09	; 9
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	80 e8       	ldi	r24, 0x80	; 128
     3b0:	9a e1       	ldi	r25, 0x1A	; 26
     3b2:	a6 e0       	ldi	r26, 0x06	; 6
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	ab 83       	std	Y+3, r26	; 0x03
     3bc:	bc 83       	std	Y+4, r27	; 0x04
     3be:	83 e2       	ldi	r24, 0x23	; 35
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8d 83       	std	Y+5, r24	; 0x05
     3c8:	9e 83       	std	Y+6, r25	; 0x06
     3ca:	af 83       	std	Y+7, r26	; 0x07
     3cc:	b8 87       	std	Y+8, r27	; 0x08
     3ce:	80 e5       	ldi	r24, 0x50	; 80
     3d0:	89 87       	std	Y+9, r24	; 0x09
     3d2:	60 e4       	ldi	r22, 0x40	; 64
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <sysclk_enable_module>
     3da:	be 01       	movw	r22, r28
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	80 e8       	ldi	r24, 0x80	; 128
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	0e 94 c5 13 	call	0x278a	; 0x278a <twi_master_init>
     3e8:	e0 e8       	ldi	r30, 0x80	; 128
     3ea:	f4 e0       	ldi	r31, 0x04	; 4
     3ec:	81 81       	ldd	r24, Z+1	; 0x01
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	81 83       	std	Z+1, r24	; 0x01
     3f2:	78 94       	sei
     3f4:	29 96       	adiw	r28, 0x09	; 9
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <init_mtch6301>:
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	59 e1       	ldi	r21, 0x19	; 25
     404:	60 e2       	ldi	r22, 0x20	; 32
     406:	80 e4       	ldi	r24, 0x40	; 64
     408:	96 e0       	ldi	r25, 0x06	; 6
     40a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     40e:	80 e2       	ldi	r24, 0x20	; 32
     410:	80 93 b0 00 	sts	0x00B0, r24
     414:	e0 e4       	ldi	r30, 0x40	; 64
     416:	f6 e0       	ldi	r31, 0x06	; 6
     418:	82 87       	std	Z+10, r24	; 0x0a
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	81 87       	std	Z+9, r24	; 0x09
     41e:	e0 ea       	ldi	r30, 0xA0	; 160
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	82 81       	ldd	r24, Z+2	; 0x02
     424:	81 60       	ori	r24, 0x01	; 1
     426:	82 83       	std	Z+2, r24	; 0x02
     428:	78 94       	sei
     42a:	08 95       	ret

0000042c <init_mtchio>:
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	60 e2       	ldi	r22, 0x20	; 32
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	96 e0       	ldi	r25, 0x06	; 6
     436:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	60 e4       	ldi	r22, 0x40	; 64
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	96 e0       	ldi	r25, 0x06	; 6
     444:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	60 e8       	ldi	r22, 0x80	; 128
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	96 e0       	ldi	r25, 0x06	; 6
     452:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	60 e4       	ldi	r22, 0x40	; 64
     45c:	80 e6       	ldi	r24, 0x60	; 96
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	80 ee       	ldi	r24, 0xE0	; 224
     46c:	97 e0       	ldi	r25, 0x07	; 7
     46e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	80 e6       	ldi	r24, 0x60	; 96
     47a:	96 e0       	ldi	r25, 0x06	; 6
     47c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	80 e6       	ldi	r24, 0x60	; 96
     488:	96 e0       	ldi	r25, 0x06	; 6
     48a:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <ioport_configure_port_pin>
     48e:	08 95       	ret

00000490 <cmd_write_register>:
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	61 97       	sbiw	r28, 0x11	; 17
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	9a ef       	ldi	r25, 0xFA	; 250
     4a0:	90 93 03 20 	sts	0x2003, r25
     4a4:	95 e5       	ldi	r25, 0x55	; 85
     4a6:	99 83       	std	Y+1, r25	; 0x01
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	95 e1       	ldi	r25, 0x15	; 21
     4ae:	9b 83       	std	Y+3, r25	; 0x03
     4b0:	8c 83       	std	Y+4, r24	; 0x04
     4b2:	6d 83       	std	Y+5, r22	; 0x05
     4b4:	4e 83       	std	Y+6, r20	; 0x06
     4b6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <wdt_kick>
     4ba:	be 01       	movw	r22, r28
     4bc:	69 5f       	subi	r22, 0xF9	; 249
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	8b e0       	ldi	r24, 0x0B	; 11
     4c2:	fb 01       	movw	r30, r22
     4c4:	11 92       	st	Z+, r1
     4c6:	8a 95       	dec	r24
     4c8:	e9 f7       	brne	.-6      	; 0x4c4 <cmd_write_register+0x34>
     4ca:	85 e2       	ldi	r24, 0x25	; 37
     4cc:	8f 83       	std	Y+7, r24	; 0x07
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	8d 87       	std	Y+13, r24	; 0x0d
     4d4:	9e 87       	std	Y+14, r25	; 0x0e
     4d6:	86 e0       	ldi	r24, 0x06	; 6
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	8f 87       	std	Y+15, r24	; 0x0f
     4dc:	98 8b       	std	Y+16, r25	; 0x10
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	0e 94 da 13 	call	0x27b4	; 0x27b4 <twi_master_transfer>
     4e8:	80 93 03 20 	sts	0x2003, r24
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	90 93 35 20 	sts	0x2035, r25
     4f2:	81 11       	cpse	r24, r1
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <cmd_write_register+0x68>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	89 2f       	mov	r24, r25
     4fa:	61 96       	adiw	r28, 0x11	; 17
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <cmd_mtch6301>:
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}

void cmd_mtch6301(uint8_t cmd)
{
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	2e 97       	sbiw	r28, 0x0e	; 14
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62
	status_res = ERR_UNSUPPORTED_DEV;
     516:	9a ef       	ldi	r25, 0xFA	; 250
     518:	90 93 03 20 	sts	0x2003, r25
	uint8_t cmd_slaver[3]={0x55,0x01,cmd};
     51c:	95 e5       	ldi	r25, 0x55	; 85
     51e:	99 83       	std	Y+1, r25	; 0x01
     520:	11 e0       	ldi	r17, 0x01	; 1
     522:	1a 83       	std	Y+2, r17	; 0x02
     524:	8b 83       	std	Y+3, r24	; 0x03
		
	#ifdef ENABLE_WDT
		wdt_kick();
     526:	0e 94 57 0c 	call	0x18ae	; 0x18ae <wdt_kick>
	#endif
	
	twi_package_t package = {
     52a:	be 01       	movw	r22, r28
     52c:	6c 5f       	subi	r22, 0xFC	; 252
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	8b e0       	ldi	r24, 0x0B	; 11
     532:	fb 01       	movw	r30, r22
     534:	11 92       	st	Z+, r1
     536:	8a 95       	dec	r24
     538:	e9 f7       	brne	.-6      	; 0x534 <cmd_mtch6301+0x2e>
     53a:	85 e2       	ldi	r24, 0x25	; 37
     53c:	8c 83       	std	Y+4, r24	; 0x04
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	8a 87       	std	Y+10, r24	; 0x0a
     544:	9b 87       	std	Y+11, r25	; 0x0b
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	8c 87       	std	Y+12, r24	; 0x0c
     54c:	9d 87       	std	Y+13, r25	; 0x0d
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	80 e8       	ldi	r24, 0x80	; 128
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	0e 94 da 13 	call	0x27b4	; 0x27b4 <twi_master_transfer>
		.buffer			= (void *)cmd_slaver,
		.length			= 3,
		.no_wait		= false
	};
	
	status_res = twi_master_write(&TWI_MASTER, &package);
     558:	80 93 03 20 	sts	0x2003, r24
	cmd_status = 1;
     55c:	10 93 35 20 	sts	0x2035, r17
}
     560:	2e 96       	adiw	r28, 0x0e	; 14
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	08 95       	ret

0000056e <write_mtch_settings>:
	}
	
	cmd_res = 0x01;
}	

bool write_mtch_settings(void) {
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
     572:	85 e5       	ldi	r24, 0x55	; 85
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <write_mtch_settings+0x12>
     57e:	92 c4       	rjmp	.+2340   	; 0xea4 <write_mtch_settings+0x936>
		return true;
	}
	#ifdef ENABLE_WDT
		wdt_kick();
     580:	0e 94 57 0c 	call	0x18ae	; 0x18ae <wdt_kick>
	#endif
	
	twinkle(255, 0, 0);
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	0e 94 11 0b 	call	0x1622	; 0x1622 <twinkle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	83 ed       	ldi	r24, 0xD3	; 211
     592:	90 e3       	ldi	r25, 0x30	; 48
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <write_mtch_settings+0x26>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <write_mtch_settings+0x30>
     59e:	00 00       	nop
	
	_delay_ms(16000);
	
	//turn off touch and save to NVRAM first
	cmd_mtch6301(0x00);
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	b1 df       	rcall	.-158    	; 0x506 <cmd_mtch6301>
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	83 ed       	ldi	r24, 0xD3	; 211
     5a8:	90 e3       	ldi	r25, 0x30	; 48
     5aa:	21 50       	subi	r18, 0x01	; 1
     5ac:	80 40       	sbci	r24, 0x00	; 0
     5ae:	90 40       	sbci	r25, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <write_mtch_settings+0x3c>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <write_mtch_settings+0x46>
     5b4:	00 00       	nop
	_delay_ms(16000);
	cmd_mtch6301(0x00);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	a6 df       	rcall	.-180    	; 0x506 <cmd_mtch6301>
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	89 e6       	ldi	r24, 0x69	; 105
     5be:	98 e1       	ldi	r25, 0x18	; 24
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <write_mtch_settings+0x52>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <write_mtch_settings+0x5c>
     5ca:	00 00       	nop
	_delay_ms(8000);
	cmd_mtch6301(0x17);
     5cc:	87 e1       	ldi	r24, 0x17	; 23
     5ce:	9b df       	rcall	.-202    	; 0x506 <cmd_mtch6301>
     5d0:	2f ef       	ldi	r18, 0xFF	; 255
     5d2:	83 ed       	ldi	r24, 0xD3	; 211
     5d4:	90 e3       	ldi	r25, 0x30	; 48
     5d6:	21 50       	subi	r18, 0x01	; 1
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	90 40       	sbci	r25, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <write_mtch_settings+0x68>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <write_mtch_settings+0x72>
     5e0:	00 00       	nop
	_delay_ms(16000);

	//GENERAL - INDEX 0x00
	if (EEPROM_GENERAL_UPDATE_BOOL) {
     5e2:	8d e4       	ldi	r24, 0x4D	; 77
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     5ea:	88 23       	and	r24, r24
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <write_mtch_settings+0x82>
     5ee:	84 c0       	rjmp	.+264    	; 0x6f8 <write_mtch_settings+0x18a>
		twinkle(255, 255, 0);
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	6f ef       	ldi	r22, 0xFF	; 255
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	0e 94 11 0b 	call	0x1622	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x00, 0x01, EEPROM_NUMRXCHANNELS); //NUM RX CHANNELS
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     602:	48 2f       	mov	r20, r24
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	43 df       	rcall	.-378    	; 0x490 <cmd_write_register>
     60a:	c8 2f       	mov	r28, r24
     60c:	2f ef       	ldi	r18, 0xFF	; 255
     60e:	89 e6       	ldi	r24, 0x69	; 105
     610:	98 e1       	ldi	r25, 0x18	; 24
     612:	21 50       	subi	r18, 0x01	; 1
     614:	80 40       	sbci	r24, 0x00	; 0
     616:	90 40       	sbci	r25, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <write_mtch_settings+0xa4>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <write_mtch_settings+0xae>
     61c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x02, EEPROM_NUMTXCHANNELS); //NUM TX CHANNELS
     61e:	8b e0       	ldi	r24, 0x0B	; 11
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     626:	48 2f       	mov	r20, r24
     628:	62 e0       	ldi	r22, 0x02	; 2
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	31 df       	rcall	.-414    	; 0x490 <cmd_write_register>
     62e:	c8 2b       	or	r28, r24
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	89 e6       	ldi	r24, 0x69	; 105
     634:	98 e1       	ldi	r25, 0x18	; 24
     636:	21 50       	subi	r18, 0x01	; 1
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	90 40       	sbci	r25, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <write_mtch_settings+0xc8>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <write_mtch_settings+0xd2>
     640:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x04, EEPROM_RXSCALE_7_0); //RX SCALING [7:0]
     642:	8c e0       	ldi	r24, 0x0C	; 12
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     64a:	48 2f       	mov	r20, r24
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	1f df       	rcall	.-450    	; 0x490 <cmd_write_register>
     652:	c8 2b       	or	r28, r24
     654:	2f ef       	ldi	r18, 0xFF	; 255
     656:	89 e6       	ldi	r24, 0x69	; 105
     658:	98 e1       	ldi	r25, 0x18	; 24
     65a:	21 50       	subi	r18, 0x01	; 1
     65c:	80 40       	sbci	r24, 0x00	; 0
     65e:	90 40       	sbci	r25, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <write_mtch_settings+0xec>
     662:	00 c0       	rjmp	.+0      	; 0x664 <write_mtch_settings+0xf6>
     664:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x05, EEPROM_RXSCALE_15_8); //RX SCALING [15:8]
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     66e:	48 2f       	mov	r20, r24
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0d df       	rcall	.-486    	; 0x490 <cmd_write_register>
     676:	c8 2b       	or	r28, r24
     678:	2f ef       	ldi	r18, 0xFF	; 255
     67a:	89 e6       	ldi	r24, 0x69	; 105
     67c:	98 e1       	ldi	r25, 0x18	; 24
     67e:	21 50       	subi	r18, 0x01	; 1
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	90 40       	sbci	r25, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <write_mtch_settings+0x110>
     686:	00 c0       	rjmp	.+0      	; 0x688 <write_mtch_settings+0x11a>
     688:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x06, EEPROM_TXSCALE_7_0); //TX SCALING [7:0]
     68a:	8e e0       	ldi	r24, 0x0E	; 14
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     692:	48 2f       	mov	r20, r24
     694:	66 e0       	ldi	r22, 0x06	; 6
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	fb de       	rcall	.-522    	; 0x490 <cmd_write_register>
     69a:	c8 2b       	or	r28, r24
     69c:	2f ef       	ldi	r18, 0xFF	; 255
     69e:	89 e6       	ldi	r24, 0x69	; 105
     6a0:	98 e1       	ldi	r25, 0x18	; 24
     6a2:	21 50       	subi	r18, 0x01	; 1
     6a4:	80 40       	sbci	r24, 0x00	; 0
     6a6:	90 40       	sbci	r25, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <write_mtch_settings+0x134>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <write_mtch_settings+0x13e>
     6ac:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x07, EEPROM_TXSCALE_15_8); //TX SCALING [15:8]
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     6b6:	48 2f       	mov	r20, r24
     6b8:	67 e0       	ldi	r22, 0x07	; 7
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	e9 de       	rcall	.-558    	; 0x490 <cmd_write_register>
     6be:	d8 2f       	mov	r29, r24
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	89 e6       	ldi	r24, 0x69	; 105
     6c4:	98 e1       	ldi	r25, 0x18	; 24
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	80 40       	sbci	r24, 0x00	; 0
     6ca:	90 40       	sbci	r25, 0x00	; 0
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <write_mtch_settings+0x158>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <write_mtch_settings+0x162>
     6d0:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     6d2:	87 e1       	ldi	r24, 0x17	; 23
     6d4:	18 df       	rcall	.-464    	; 0x506 <cmd_mtch6301>
     6d6:	2f ef       	ldi	r18, 0xFF	; 255
     6d8:	83 ed       	ldi	r24, 0xD3	; 211
     6da:	90 e3       	ldi	r25, 0x30	; 48
     6dc:	21 50       	subi	r18, 0x01	; 1
     6de:	80 40       	sbci	r24, 0x00	; 0
     6e0:	90 40       	sbci	r25, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <write_mtch_settings+0x16e>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <write_mtch_settings+0x178>
     6e6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x05, EEPROM_RXSCALE_15_8); //RX SCALING [15:8]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x06, EEPROM_TXSCALE_7_0); //TX SCALING [7:0]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x07, EEPROM_TXSCALE_15_8); //TX SCALING [15:8]
     6e8:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, STATUS_OK != write_status);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <write_mtch_settings+0x182>
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	8d e4       	ldi	r24, 0x4D	; 77
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//RXMAP - INDEX 0x01
	if (EEPROM_RXMAP_UPDATE_BOOL) {
     6f8:	8e e4       	ldi	r24, 0x4E	; 78
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     700:	88 23       	and	r24, r24
     702:	09 f4       	brne	.+2      	; 0x706 <write_mtch_settings+0x198>
     704:	95 c0       	rjmp	.+298    	; 0x830 <write_mtch_settings+0x2c2>
		twinkle(0, 255, 0);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	6f ef       	ldi	r22, 0xFF	; 255
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	8a d7       	rcall	.+3860   	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x01, 0x00, EEPROM_RXPIN0);
     70e:	80 e1       	ldi	r24, 0x10	; 16
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     716:	48 2f       	mov	r20, r24
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	b9 de       	rcall	.-654    	; 0x490 <cmd_write_register>
     71e:	c8 2f       	mov	r28, r24
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	89 e6       	ldi	r24, 0x69	; 105
     724:	98 e1       	ldi	r25, 0x18	; 24
     726:	21 50       	subi	r18, 0x01	; 1
     728:	80 40       	sbci	r24, 0x00	; 0
     72a:	90 40       	sbci	r25, 0x00	; 0
     72c:	e1 f7       	brne	.-8      	; 0x726 <write_mtch_settings+0x1b8>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <write_mtch_settings+0x1c2>
     730:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x01, EEPROM_RXPIN1);
     732:	81 e1       	ldi	r24, 0x11	; 17
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     73a:	48 2f       	mov	r20, r24
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	a7 de       	rcall	.-690    	; 0x490 <cmd_write_register>
     742:	c8 2b       	or	r28, r24
     744:	2f ef       	ldi	r18, 0xFF	; 255
     746:	89 e6       	ldi	r24, 0x69	; 105
     748:	98 e1       	ldi	r25, 0x18	; 24
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	80 40       	sbci	r24, 0x00	; 0
     74e:	90 40       	sbci	r25, 0x00	; 0
     750:	e1 f7       	brne	.-8      	; 0x74a <write_mtch_settings+0x1dc>
     752:	00 c0       	rjmp	.+0      	; 0x754 <write_mtch_settings+0x1e6>
     754:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x02, EEPROM_RXPIN2);
     756:	82 e1       	ldi	r24, 0x12	; 18
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     75e:	48 2f       	mov	r20, r24
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	95 de       	rcall	.-726    	; 0x490 <cmd_write_register>
     766:	c8 2b       	or	r28, r24
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	89 e6       	ldi	r24, 0x69	; 105
     76c:	98 e1       	ldi	r25, 0x18	; 24
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <write_mtch_settings+0x200>
     776:	00 c0       	rjmp	.+0      	; 0x778 <write_mtch_settings+0x20a>
     778:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x03, EEPROM_RXPIN3);
     77a:	83 e1       	ldi	r24, 0x13	; 19
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     782:	48 2f       	mov	r20, r24
     784:	63 e0       	ldi	r22, 0x03	; 3
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	83 de       	rcall	.-762    	; 0x490 <cmd_write_register>
     78a:	c8 2b       	or	r28, r24
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	89 e6       	ldi	r24, 0x69	; 105
     790:	98 e1       	ldi	r25, 0x18	; 24
     792:	21 50       	subi	r18, 0x01	; 1
     794:	80 40       	sbci	r24, 0x00	; 0
     796:	90 40       	sbci	r25, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <write_mtch_settings+0x224>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <write_mtch_settings+0x22e>
     79c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
     79e:	84 e1       	ldi	r24, 0x14	; 20
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     7a6:	48 2f       	mov	r20, r24
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	71 de       	rcall	.-798    	; 0x490 <cmd_write_register>
     7ae:	c8 2b       	or	r28, r24
     7b0:	2f ef       	ldi	r18, 0xFF	; 255
     7b2:	89 e6       	ldi	r24, 0x69	; 105
     7b4:	98 e1       	ldi	r25, 0x18	; 24
     7b6:	21 50       	subi	r18, 0x01	; 1
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <write_mtch_settings+0x248>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <write_mtch_settings+0x252>
     7c0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
     7c2:	85 e1       	ldi	r24, 0x15	; 21
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     7ca:	48 2f       	mov	r20, r24
     7cc:	65 e0       	ldi	r22, 0x05	; 5
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	5f de       	rcall	.-834    	; 0x490 <cmd_write_register>
     7d2:	c8 2b       	or	r28, r24
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	89 e6       	ldi	r24, 0x69	; 105
     7d8:	98 e1       	ldi	r25, 0x18	; 24
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <write_mtch_settings+0x26c>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <write_mtch_settings+0x276>
     7e4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
     7e6:	86 e1       	ldi	r24, 0x16	; 22
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     7ee:	48 2f       	mov	r20, r24
     7f0:	66 e0       	ldi	r22, 0x06	; 6
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	4d de       	rcall	.-870    	; 0x490 <cmd_write_register>
     7f6:	d8 2f       	mov	r29, r24
     7f8:	2f ef       	ldi	r18, 0xFF	; 255
     7fa:	89 e6       	ldi	r24, 0x69	; 105
     7fc:	98 e1       	ldi	r25, 0x18	; 24
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	80 40       	sbci	r24, 0x00	; 0
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <write_mtch_settings+0x290>
     806:	00 c0       	rjmp	.+0      	; 0x808 <write_mtch_settings+0x29a>
     808:	00 00       	nop
		 write_status |= cmd_write_register(0x01, 0x0b, EEPROM_RXPIN11);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
     80a:	87 e1       	ldi	r24, 0x17	; 23
     80c:	7c de       	rcall	.-776    	; 0x506 <cmd_mtch6301>
     80e:	2f ef       	ldi	r18, 0xFF	; 255
     810:	83 ed       	ldi	r24, 0xD3	; 211
     812:	90 e3       	ldi	r25, 0x30	; 48
     814:	21 50       	subi	r18, 0x01	; 1
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	90 40       	sbci	r25, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <write_mtch_settings+0x2a6>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <write_mtch_settings+0x2b0>
     81e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
     820:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, STATUS_OK != write_status);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	09 f4       	brne	.+2      	; 0x828 <write_mtch_settings+0x2ba>
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	8e e4       	ldi	r24, 0x4E	; 78
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//TXMAP - INDEX 0x02
	if (EEPROM_TXMAP_UPDATE_BOOL) {
     830:	8f e4       	ldi	r24, 0x4F	; 79
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <write_mtch_settings+0x2d0>
     83c:	71 c0       	rjmp	.+226    	; 0x920 <write_mtch_settings+0x3b2>
		twinkle(0, 255, 255);
     83e:	4f ef       	ldi	r20, 0xFF	; 255
     840:	6f ef       	ldi	r22, 0xFF	; 255
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	ee d6       	rcall	.+3548   	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x02, 0x00, EEPROM_TXPIN0);
     846:	8d e1       	ldi	r24, 0x1D	; 29
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     84e:	48 2f       	mov	r20, r24
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	1d de       	rcall	.-966    	; 0x490 <cmd_write_register>
     856:	c8 2f       	mov	r28, r24
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	89 e6       	ldi	r24, 0x69	; 105
     85c:	98 e1       	ldi	r25, 0x18	; 24
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <write_mtch_settings+0x2f0>
     866:	00 c0       	rjmp	.+0      	; 0x868 <write_mtch_settings+0x2fa>
     868:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x01, EEPROM_TXPIN1);
     86a:	8e e1       	ldi	r24, 0x1E	; 30
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     872:	48 2f       	mov	r20, r24
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0b de       	rcall	.-1002   	; 0x490 <cmd_write_register>
     87a:	c8 2b       	or	r28, r24
     87c:	2f ef       	ldi	r18, 0xFF	; 255
     87e:	89 e6       	ldi	r24, 0x69	; 105
     880:	98 e1       	ldi	r25, 0x18	; 24
     882:	21 50       	subi	r18, 0x01	; 1
     884:	80 40       	sbci	r24, 0x00	; 0
     886:	90 40       	sbci	r25, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <write_mtch_settings+0x314>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <write_mtch_settings+0x31e>
     88c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
     88e:	8f e1       	ldi	r24, 0x1F	; 31
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     896:	48 2f       	mov	r20, r24
     898:	62 e0       	ldi	r22, 0x02	; 2
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	f9 dd       	rcall	.-1038   	; 0x490 <cmd_write_register>
     89e:	c8 2b       	or	r28, r24
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	89 e6       	ldi	r24, 0x69	; 105
     8a4:	98 e1       	ldi	r25, 0x18	; 24
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	80 40       	sbci	r24, 0x00	; 0
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <write_mtch_settings+0x338>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <write_mtch_settings+0x342>
     8b0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     8ba:	48 2f       	mov	r20, r24
     8bc:	63 e0       	ldi	r22, 0x03	; 3
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	e7 dd       	rcall	.-1074   	; 0x490 <cmd_write_register>
     8c2:	c8 2b       	or	r28, r24
     8c4:	2f ef       	ldi	r18, 0xFF	; 255
     8c6:	89 e6       	ldi	r24, 0x69	; 105
     8c8:	98 e1       	ldi	r25, 0x18	; 24
     8ca:	21 50       	subi	r18, 0x01	; 1
     8cc:	80 40       	sbci	r24, 0x00	; 0
     8ce:	90 40       	sbci	r25, 0x00	; 0
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <write_mtch_settings+0x35c>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <write_mtch_settings+0x366>
     8d4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
     8d6:	81 e2       	ldi	r24, 0x21	; 33
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     8de:	48 2f       	mov	r20, r24
     8e0:	64 e0       	ldi	r22, 0x04	; 4
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	d5 dd       	rcall	.-1110   	; 0x490 <cmd_write_register>
     8e6:	d8 2f       	mov	r29, r24
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	89 e6       	ldi	r24, 0x69	; 105
     8ec:	98 e1       	ldi	r25, 0x18	; 24
     8ee:	21 50       	subi	r18, 0x01	; 1
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	90 40       	sbci	r25, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <write_mtch_settings+0x380>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <write_mtch_settings+0x38a>
     8f8:	00 00       	nop
		 write_status |= cmd_write_register(0x02, 0x10, EEPROM_TXPIN16);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
     8fa:	87 e1       	ldi	r24, 0x17	; 23
     8fc:	04 de       	rcall	.-1016   	; 0x506 <cmd_mtch6301>
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	83 ed       	ldi	r24, 0xD3	; 211
     902:	90 e3       	ldi	r25, 0x30	; 48
     904:	21 50       	subi	r18, 0x01	; 1
     906:	80 40       	sbci	r24, 0x00	; 0
     908:	90 40       	sbci	r25, 0x00	; 0
     90a:	e1 f7       	brne	.-8      	; 0x904 <write_mtch_settings+0x396>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <write_mtch_settings+0x3a0>
     90e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
     910:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, STATUS_OK != write_status);
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	09 f4       	brne	.+2      	; 0x918 <write_mtch_settings+0x3aa>
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	8f e4       	ldi	r24, 0x4F	; 79
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//SELF - INDEX 0x10
	if (EEPROM_SELF_UPDATE_BOOL) {
     920:	80 e5       	ldi	r24, 0x50	; 80
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <write_mtch_settings+0x3c0>
     92c:	3b c0       	rjmp	.+118    	; 0x9a4 <write_mtch_settings+0x436>
		twinkle(0, 0, 255);
     92e:	4f ef       	ldi	r20, 0xFF	; 255
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	76 d6       	rcall	.+3308   	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x10, 0x00, EEPROM_SELFSCANTIME); //SELF SCAN TIME
     936:	8f e2       	ldi	r24, 0x2F	; 47
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     93e:	48 2f       	mov	r20, r24
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	80 e1       	ldi	r24, 0x10	; 16
     944:	a5 dd       	rcall	.-1206   	; 0x490 <cmd_write_register>
     946:	c8 2f       	mov	r28, r24
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	89 e6       	ldi	r24, 0x69	; 105
     94c:	98 e1       	ldi	r25, 0x18	; 24
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <write_mtch_settings+0x3e0>
     956:	00 c0       	rjmp	.+0      	; 0x958 <write_mtch_settings+0x3ea>
     958:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
     95a:	80 e3       	ldi	r24, 0x30	; 48
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     962:	48 2f       	mov	r20, r24
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	80 e1       	ldi	r24, 0x10	; 16
     968:	93 dd       	rcall	.-1242   	; 0x490 <cmd_write_register>
     96a:	d8 2f       	mov	r29, r24
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	89 e6       	ldi	r24, 0x69	; 105
     970:	98 e1       	ldi	r25, 0x18	; 24
     972:	21 50       	subi	r18, 0x01	; 1
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <write_mtch_settings+0x404>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <write_mtch_settings+0x40e>
     97c:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     97e:	87 e1       	ldi	r24, 0x17	; 23
     980:	c2 dd       	rcall	.-1148   	; 0x506 <cmd_mtch6301>
     982:	2f ef       	ldi	r18, 0xFF	; 255
     984:	83 ed       	ldi	r24, 0xD3	; 211
     986:	90 e3       	ldi	r25, 0x30	; 48
     988:	21 50       	subi	r18, 0x01	; 1
     98a:	80 40       	sbci	r24, 0x00	; 0
     98c:	90 40       	sbci	r25, 0x00	; 0
     98e:	e1 f7       	brne	.-8      	; 0x988 <write_mtch_settings+0x41a>
     990:	00 c0       	rjmp	.+0      	; 0x992 <write_mtch_settings+0x424>
     992:	00 00       	nop
	if (EEPROM_SELF_UPDATE_BOOL) {
		twinkle(0, 0, 255);
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x10, 0x00, EEPROM_SELFSCANTIME); //SELF SCAN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
     994:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_SELF, STATUS_OK != write_status);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	09 f4       	brne	.+2      	; 0x99c <write_mtch_settings+0x42e>
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	80 e5       	ldi	r24, 0x50	; 80
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//MUTUAL - INDEX 0x20
	if (EEPROM_MUTUAL_UPDATE_BOOL) {
     9a4:	81 e5       	ldi	r24, 0x51	; 81
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     9ac:	88 23       	and	r24, r24
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <write_mtch_settings+0x444>
     9b0:	3b c0       	rjmp	.+118    	; 0xa28 <write_mtch_settings+0x4ba>
		twinkle(255, 0, 255);
     9b2:	4f ef       	ldi	r20, 0xFF	; 255
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	34 d6       	rcall	.+3176   	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
     9ba:	81 e3       	ldi	r24, 0x31	; 49
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     9c2:	48 2f       	mov	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	80 e2       	ldi	r24, 0x20	; 32
     9c8:	63 dd       	rcall	.-1338   	; 0x490 <cmd_write_register>
     9ca:	c8 2f       	mov	r28, r24
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	89 e6       	ldi	r24, 0x69	; 105
     9d0:	98 e1       	ldi	r25, 0x18	; 24
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <write_mtch_settings+0x464>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <write_mtch_settings+0x46e>
     9dc:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
     9de:	82 e3       	ldi	r24, 0x32	; 50
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     9e6:	48 2f       	mov	r20, r24
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	80 e2       	ldi	r24, 0x20	; 32
     9ec:	51 dd       	rcall	.-1374   	; 0x490 <cmd_write_register>
     9ee:	d8 2f       	mov	r29, r24
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	89 e6       	ldi	r24, 0x69	; 105
     9f4:	98 e1       	ldi	r25, 0x18	; 24
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <write_mtch_settings+0x488>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <write_mtch_settings+0x492>
     a00:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     a02:	87 e1       	ldi	r24, 0x17	; 23
     a04:	80 dd       	rcall	.-1280   	; 0x506 <cmd_mtch6301>
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	83 ed       	ldi	r24, 0xD3	; 211
     a0a:	90 e3       	ldi	r25, 0x30	; 48
     a0c:	21 50       	subi	r18, 0x01	; 1
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	90 40       	sbci	r25, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <write_mtch_settings+0x49e>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <write_mtch_settings+0x4a8>
     a16:	00 00       	nop
	if (EEPROM_MUTUAL_UPDATE_BOOL) {
		twinkle(255, 0, 255);
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
     a18:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, STATUS_OK != write_status);
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <write_mtch_settings+0x4b2>
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	81 e5       	ldi	r24, 0x51	; 81
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//DECODING - INDEX 0x30
	if (EEPROM_DECODING_UPDATE_BOOL) {
     a28:	82 e5       	ldi	r24, 0x52	; 82
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     a30:	88 23       	and	r24, r24
     a32:	09 f4       	brne	.+2      	; 0xa36 <write_mtch_settings+0x4c8>
     a34:	83 c0       	rjmp	.+262    	; 0xb3c <write_mtch_settings+0x5ce>
		twinkle(0, 0, 255);
     a36:	4f ef       	ldi	r20, 0xFF	; 255
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	f2 d5       	rcall	.+3044   	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
     a3e:	83 e3       	ldi	r24, 0x33	; 51
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     a46:	48 2f       	mov	r20, r24
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	80 e3       	ldi	r24, 0x30	; 48
     a4c:	21 dd       	rcall	.-1470   	; 0x490 <cmd_write_register>
     a4e:	c8 2f       	mov	r28, r24
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	89 e6       	ldi	r24, 0x69	; 105
     a54:	98 e1       	ldi	r25, 0x18	; 24
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <write_mtch_settings+0x4e8>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <write_mtch_settings+0x4f2>
     a60:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x01, EEPROM_NUMAVG); //NUM AVERAGES
     a62:	84 e3       	ldi	r24, 0x34	; 52
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     a6a:	48 2f       	mov	r20, r24
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	80 e3       	ldi	r24, 0x30	; 48
     a70:	0f dd       	rcall	.-1506   	; 0x490 <cmd_write_register>
     a72:	c8 2b       	or	r28, r24
     a74:	2f ef       	ldi	r18, 0xFF	; 255
     a76:	89 e6       	ldi	r24, 0x69	; 105
     a78:	98 e1       	ldi	r25, 0x18	; 24
     a7a:	21 50       	subi	r18, 0x01	; 1
     a7c:	80 40       	sbci	r24, 0x00	; 0
     a7e:	90 40       	sbci	r25, 0x00	; 0
     a80:	e1 f7       	brne	.-8      	; 0xa7a <write_mtch_settings+0x50c>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <write_mtch_settings+0x516>
     a84:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x04, EEPROM_MINTOUCHDIST); //MIN TOUCH DISTANCE
     a86:	85 e3       	ldi	r24, 0x35	; 53
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     a8e:	48 2f       	mov	r20, r24
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	80 e3       	ldi	r24, 0x30	; 48
     a94:	fd dc       	rcall	.-1542   	; 0x490 <cmd_write_register>
     a96:	c8 2b       	or	r28, r24
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	89 e6       	ldi	r24, 0x69	; 105
     a9c:	98 e1       	ldi	r25, 0x18	; 24
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <write_mtch_settings+0x530>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <write_mtch_settings+0x53a>
     aa8:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
     aaa:	86 e3       	ldi	r24, 0x36	; 54
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     ab2:	48 2f       	mov	r20, r24
     ab4:	65 e0       	ldi	r22, 0x05	; 5
     ab6:	80 e3       	ldi	r24, 0x30	; 48
     ab8:	eb dc       	rcall	.-1578   	; 0x490 <cmd_write_register>
     aba:	c8 2b       	or	r28, r24
     abc:	2f ef       	ldi	r18, 0xFF	; 255
     abe:	89 e6       	ldi	r24, 0x69	; 105
     ac0:	98 e1       	ldi	r25, 0x18	; 24
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	80 40       	sbci	r24, 0x00	; 0
     ac6:	90 40       	sbci	r25, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <write_mtch_settings+0x554>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <write_mtch_settings+0x55e>
     acc:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
     ace:	87 e3       	ldi	r24, 0x37	; 55
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     ad6:	48 2f       	mov	r20, r24
     ad8:	66 e0       	ldi	r22, 0x06	; 6
     ada:	80 e3       	ldi	r24, 0x30	; 48
     adc:	d9 dc       	rcall	.-1614   	; 0x490 <cmd_write_register>
     ade:	c8 2b       	or	r28, r24
     ae0:	2f ef       	ldi	r18, 0xFF	; 255
     ae2:	89 e6       	ldi	r24, 0x69	; 105
     ae4:	98 e1       	ldi	r25, 0x18	; 24
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	80 40       	sbci	r24, 0x00	; 0
     aea:	90 40       	sbci	r25, 0x00	; 0
     aec:	e1 f7       	brne	.-8      	; 0xae6 <write_mtch_settings+0x578>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <write_mtch_settings+0x582>
     af0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
     af2:	88 e3       	ldi	r24, 0x38	; 56
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     afa:	48 2f       	mov	r20, r24
     afc:	67 e0       	ldi	r22, 0x07	; 7
     afe:	80 e3       	ldi	r24, 0x30	; 48
     b00:	c7 dc       	rcall	.-1650   	; 0x490 <cmd_write_register>
     b02:	d8 2f       	mov	r29, r24
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	89 e6       	ldi	r24, 0x69	; 105
     b08:	98 e1       	ldi	r25, 0x18	; 24
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	80 40       	sbci	r24, 0x00	; 0
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <write_mtch_settings+0x59c>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <write_mtch_settings+0x5a6>
     b14:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     b16:	87 e1       	ldi	r24, 0x17	; 23
     b18:	f6 dc       	rcall	.-1556   	; 0x506 <cmd_mtch6301>
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	83 ed       	ldi	r24, 0xD3	; 211
     b1e:	90 e3       	ldi	r25, 0x30	; 48
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <write_mtch_settings+0x5b2>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <write_mtch_settings+0x5bc>
     b2a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
     b2c:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, STATUS_OK != write_status);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	09 f4       	brne	.+2      	; 0xb34 <write_mtch_settings+0x5c6>
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	82 e5       	ldi	r24, 0x52	; 82
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//GESTURES - INDEX 0x50
	if (EEPROM_GESTURES_UPDATE_BOOL) {
     b3c:	83 e5       	ldi	r24, 0x53	; 83
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     b44:	88 23       	and	r24, r24
     b46:	09 f4       	brne	.+2      	; 0xb4a <write_mtch_settings+0x5dc>
     b48:	01 c1       	rjmp	.+514    	; 0xd4c <write_mtch_settings+0x7de>
		twinkle(255, 0, 255);
     b4a:	4f ef       	ldi	r20, 0xFF	; 255
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	68 d5       	rcall	.+2768   	; 0x1622 <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x50, 0x00, EEPROM_RXSWIPELEN); //RX SWIPE LENGTH
     b52:	89 e3       	ldi	r24, 0x39	; 57
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     b5a:	48 2f       	mov	r20, r24
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	80 e5       	ldi	r24, 0x50	; 80
     b60:	97 dc       	rcall	.-1746   	; 0x490 <cmd_write_register>
     b62:	c8 2f       	mov	r28, r24
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	89 e6       	ldi	r24, 0x69	; 105
     b68:	98 e1       	ldi	r25, 0x18	; 24
     b6a:	21 50       	subi	r18, 0x01	; 1
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	e1 f7       	brne	.-8      	; 0xb6a <write_mtch_settings+0x5fc>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <write_mtch_settings+0x606>
     b74:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x01, EEPROM_TXSWIPELEN); //TX SWIPE LENGTH
     b76:	8a e3       	ldi	r24, 0x3A	; 58
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     b7e:	48 2f       	mov	r20, r24
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	80 e5       	ldi	r24, 0x50	; 80
     b84:	85 dc       	rcall	.-1782   	; 0x490 <cmd_write_register>
     b86:	c8 2b       	or	r28, r24
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	89 e6       	ldi	r24, 0x69	; 105
     b8c:	98 e1       	ldi	r25, 0x18	; 24
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <write_mtch_settings+0x620>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <write_mtch_settings+0x62a>
     b98:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x02, EEPROM_SWIPEBOUNDARY); //SWIPE BOUNDARY
     b9a:	8b e3       	ldi	r24, 0x3B	; 59
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     ba2:	48 2f       	mov	r20, r24
     ba4:	62 e0       	ldi	r22, 0x02	; 2
     ba6:	80 e5       	ldi	r24, 0x50	; 80
     ba8:	73 dc       	rcall	.-1818   	; 0x490 <cmd_write_register>
     baa:	c8 2b       	or	r28, r24
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	89 e6       	ldi	r24, 0x69	; 105
     bb0:	98 e1       	ldi	r25, 0x18	; 24
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	80 40       	sbci	r24, 0x00	; 0
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <write_mtch_settings+0x644>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <write_mtch_settings+0x64e>
     bbc:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x03, EEPROM_SWIPEHOLDTHRES); //SWIPE HOLD THRESHOLD
     bbe:	8c e3       	ldi	r24, 0x3C	; 60
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     bc6:	48 2f       	mov	r20, r24
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	80 e5       	ldi	r24, 0x50	; 80
     bcc:	61 dc       	rcall	.-1854   	; 0x490 <cmd_write_register>
     bce:	c8 2b       	or	r28, r24
     bd0:	2f ef       	ldi	r18, 0xFF	; 255
     bd2:	89 e6       	ldi	r24, 0x69	; 105
     bd4:	98 e1       	ldi	r25, 0x18	; 24
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	80 40       	sbci	r24, 0x00	; 0
     bda:	90 40       	sbci	r25, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <write_mtch_settings+0x668>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <write_mtch_settings+0x672>
     be0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x04, EEPROM_SWIPETIME_7_0); //SWIPE TIME [7:0]
     be2:	8d e3       	ldi	r24, 0x3D	; 61
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     bea:	48 2f       	mov	r20, r24
     bec:	64 e0       	ldi	r22, 0x04	; 4
     bee:	80 e5       	ldi	r24, 0x50	; 80
     bf0:	4f dc       	rcall	.-1890   	; 0x490 <cmd_write_register>
     bf2:	c8 2b       	or	r28, r24
     bf4:	2f ef       	ldi	r18, 0xFF	; 255
     bf6:	89 e6       	ldi	r24, 0x69	; 105
     bf8:	98 e1       	ldi	r25, 0x18	; 24
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	80 40       	sbci	r24, 0x00	; 0
     bfe:	90 40       	sbci	r25, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <write_mtch_settings+0x68c>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <write_mtch_settings+0x696>
     c04:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x05, EEPROM_SWIPETIME_15_8); //SWIPE TIME [15:8]
     c06:	8e e3       	ldi	r24, 0x3E	; 62
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     c0e:	48 2f       	mov	r20, r24
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	80 e5       	ldi	r24, 0x50	; 80
     c14:	3d dc       	rcall	.-1926   	; 0x490 <cmd_write_register>
     c16:	c8 2b       	or	r28, r24
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	89 e6       	ldi	r24, 0x69	; 105
     c1c:	98 e1       	ldi	r25, 0x18	; 24
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	80 40       	sbci	r24, 0x00	; 0
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <write_mtch_settings+0x6b0>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <write_mtch_settings+0x6ba>
     c28:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x06, EEPROM_TAPTIME_7_0); //TAP TIME [7:0]
     c2a:	8f e3       	ldi	r24, 0x3F	; 63
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     c32:	48 2f       	mov	r20, r24
     c34:	66 e0       	ldi	r22, 0x06	; 6
     c36:	80 e5       	ldi	r24, 0x50	; 80
     c38:	2b dc       	rcall	.-1962   	; 0x490 <cmd_write_register>
     c3a:	c8 2b       	or	r28, r24
     c3c:	2f ef       	ldi	r18, 0xFF	; 255
     c3e:	89 e6       	ldi	r24, 0x69	; 105
     c40:	98 e1       	ldi	r25, 0x18	; 24
     c42:	21 50       	subi	r18, 0x01	; 1
     c44:	80 40       	sbci	r24, 0x00	; 0
     c46:	90 40       	sbci	r25, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <write_mtch_settings+0x6d4>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <write_mtch_settings+0x6de>
     c4c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x07, EEPROM_TAPTIME_15_8); //TAP TIME [15:8]
     c4e:	80 e4       	ldi	r24, 0x40	; 64
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     c56:	48 2f       	mov	r20, r24
     c58:	67 e0       	ldi	r22, 0x07	; 7
     c5a:	80 e5       	ldi	r24, 0x50	; 80
     c5c:	19 dc       	rcall	.-1998   	; 0x490 <cmd_write_register>
     c5e:	c8 2b       	or	r28, r24
     c60:	2f ef       	ldi	r18, 0xFF	; 255
     c62:	89 e6       	ldi	r24, 0x69	; 105
     c64:	98 e1       	ldi	r25, 0x18	; 24
     c66:	21 50       	subi	r18, 0x01	; 1
     c68:	80 40       	sbci	r24, 0x00	; 0
     c6a:	90 40       	sbci	r25, 0x00	; 0
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <write_mtch_settings+0x6f8>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <write_mtch_settings+0x702>
     c70:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x08, EEPROM_TAPTHRES); //TAP THRESHOLD
     c72:	81 e4       	ldi	r24, 0x41	; 65
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     c7a:	48 2f       	mov	r20, r24
     c7c:	68 e0       	ldi	r22, 0x08	; 8
     c7e:	80 e5       	ldi	r24, 0x50	; 80
     c80:	07 dc       	rcall	.-2034   	; 0x490 <cmd_write_register>
     c82:	c8 2b       	or	r28, r24
     c84:	2f ef       	ldi	r18, 0xFF	; 255
     c86:	89 e6       	ldi	r24, 0x69	; 105
     c88:	98 e1       	ldi	r25, 0x18	; 24
     c8a:	21 50       	subi	r18, 0x01	; 1
     c8c:	80 40       	sbci	r24, 0x00	; 0
     c8e:	90 40       	sbci	r25, 0x00	; 0
     c90:	e1 f7       	brne	.-8      	; 0xc8a <write_mtch_settings+0x71c>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <write_mtch_settings+0x726>
     c94:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x09, EEPROM_MINSWIPEVELOCITY); //MIN SWIPE VELOCITY
     c96:	82 e4       	ldi	r24, 0x42	; 66
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     c9e:	48 2f       	mov	r20, r24
     ca0:	69 e0       	ldi	r22, 0x09	; 9
     ca2:	80 e5       	ldi	r24, 0x50	; 80
     ca4:	f5 db       	rcall	.-2070   	; 0x490 <cmd_write_register>
     ca6:	c8 2b       	or	r28, r24
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	89 e6       	ldi	r24, 0x69	; 105
     cac:	98 e1       	ldi	r25, 0x18	; 24
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	80 40       	sbci	r24, 0x00	; 0
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <write_mtch_settings+0x740>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <write_mtch_settings+0x74a>
     cb8:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
     cba:	83 e4       	ldi	r24, 0x43	; 67
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     cc2:	48 2f       	mov	r20, r24
     cc4:	6a e0       	ldi	r22, 0x0A	; 10
     cc6:	80 e5       	ldi	r24, 0x50	; 80
     cc8:	e3 db       	rcall	.-2106   	; 0x490 <cmd_write_register>
     cca:	c8 2b       	or	r28, r24
     ccc:	2f ef       	ldi	r18, 0xFF	; 255
     cce:	89 e6       	ldi	r24, 0x69	; 105
     cd0:	98 e1       	ldi	r25, 0x18	; 24
     cd2:	21 50       	subi	r18, 0x01	; 1
     cd4:	80 40       	sbci	r24, 0x00	; 0
     cd6:	90 40       	sbci	r25, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <write_mtch_settings+0x764>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <write_mtch_settings+0x76e>
     cdc:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
     cde:	84 e4       	ldi	r24, 0x44	; 68
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     ce6:	48 2f       	mov	r20, r24
     ce8:	6b e0       	ldi	r22, 0x0B	; 11
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	d1 db       	rcall	.-2142   	; 0x490 <cmd_write_register>
     cee:	c8 2b       	or	r28, r24
     cf0:	2f ef       	ldi	r18, 0xFF	; 255
     cf2:	89 e6       	ldi	r24, 0x69	; 105
     cf4:	98 e1       	ldi	r25, 0x18	; 24
     cf6:	21 50       	subi	r18, 0x01	; 1
     cf8:	80 40       	sbci	r24, 0x00	; 0
     cfa:	90 40       	sbci	r25, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <write_mtch_settings+0x788>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <write_mtch_settings+0x792>
     d00:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
     d02:	85 e4       	ldi	r24, 0x45	; 69
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     d0a:	48 2f       	mov	r20, r24
     d0c:	6c e0       	ldi	r22, 0x0C	; 12
     d0e:	80 e5       	ldi	r24, 0x50	; 80
     d10:	bf db       	rcall	.-2178   	; 0x490 <cmd_write_register>
     d12:	d8 2f       	mov	r29, r24
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	89 e6       	ldi	r24, 0x69	; 105
     d18:	98 e1       	ldi	r25, 0x18	; 24
     d1a:	21 50       	subi	r18, 0x01	; 1
     d1c:	80 40       	sbci	r24, 0x00	; 0
     d1e:	90 40       	sbci	r25, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <write_mtch_settings+0x7ac>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <write_mtch_settings+0x7b6>
     d24:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     d26:	87 e1       	ldi	r24, 0x17	; 23
     d28:	ee db       	rcall	.-2084   	; 0x506 <cmd_mtch6301>
     d2a:	2f ef       	ldi	r18, 0xFF	; 255
     d2c:	83 ed       	ldi	r24, 0xD3	; 211
     d2e:	90 e3       	ldi	r25, 0x30	; 48
     d30:	21 50       	subi	r18, 0x01	; 1
     d32:	80 40       	sbci	r24, 0x00	; 0
     d34:	90 40       	sbci	r25, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <write_mtch_settings+0x7c2>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <write_mtch_settings+0x7cc>
     d3a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
     d3c:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, STATUS_OK != write_status);
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	09 f4       	brne	.+2      	; 0xd44 <write_mtch_settings+0x7d6>
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	83 e5       	ldi	r24, 0x53	; 83
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	
	//CONFIG - INDEX 0xf0
	if (EEPROM_CONFIG_UPDATE_BOOL) {
     d4c:	84 e5       	ldi	r24, 0x54	; 84
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     d54:	88 23       	and	r24, r24
     d56:	09 f4       	brne	.+2      	; 0xd5a <write_mtch_settings+0x7ec>
     d58:	4e c0       	rjmp	.+156    	; 0xdf6 <write_mtch_settings+0x888>
		twinkle(255, 255, 255);
     d5a:	4f ef       	ldi	r20, 0xFF	; 255
     d5c:	6f ef       	ldi	r22, 0xFF	; 255
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	60 d4       	rcall	.+2240   	; 0x1622 <twinkle>
		 write_status |= cmd_write_register(0xf0, 0x02, EEPROM_SLEEP_23_16); //SLEEP TIMEOUT [23:16]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x03, EEPROM_SLEEP_31_24); //SLEEP TIMEOUT [31:24]
		_delay_ms(8000);
		*/
		 write_status |= cmd_write_register(0xf0, 0x07, EEPROM_TOUCHPACKETCFG); //TOUCH PACKET CFG
     d62:	8a e4       	ldi	r24, 0x4A	; 74
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     d6a:	48 2f       	mov	r20, r24
     d6c:	67 e0       	ldi	r22, 0x07	; 7
     d6e:	80 ef       	ldi	r24, 0xF0	; 240
     d70:	8f db       	rcall	.-2274   	; 0x490 <cmd_write_register>
     d72:	c8 2f       	mov	r28, r24
     d74:	2f ef       	ldi	r18, 0xFF	; 255
     d76:	89 e6       	ldi	r24, 0x69	; 105
     d78:	98 e1       	ldi	r25, 0x18	; 24
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	90 40       	sbci	r25, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <write_mtch_settings+0x80c>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <write_mtch_settings+0x816>
     d84:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
     d86:	8b e4       	ldi	r24, 0x4B	; 75
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     d8e:	48 2f       	mov	r20, r24
     d90:	69 e0       	ldi	r22, 0x09	; 9
     d92:	80 ef       	ldi	r24, 0xF0	; 240
     d94:	7d db       	rcall	.-2310   	; 0x490 <cmd_write_register>
     d96:	d8 2f       	mov	r29, r24
     d98:	dc 2b       	or	r29, r28
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	89 e6       	ldi	r24, 0x69	; 105
     d9e:	98 e1       	ldi	r25, 0x18	; 24
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	80 40       	sbci	r24, 0x00	; 0
     da4:	90 40       	sbci	r25, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <write_mtch_settings+0x832>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <write_mtch_settings+0x83c>
     daa:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
     dac:	8c e4       	ldi	r24, 0x4C	; 76
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     db4:	48 2f       	mov	r20, r24
     db6:	6a e0       	ldi	r22, 0x0A	; 10
     db8:	80 ef       	ldi	r24, 0xF0	; 240
     dba:	6a db       	rcall	.-2348   	; 0x490 <cmd_write_register>
     dbc:	c8 2f       	mov	r28, r24
     dbe:	2f ef       	ldi	r18, 0xFF	; 255
     dc0:	89 e6       	ldi	r24, 0x69	; 105
     dc2:	98 e1       	ldi	r25, 0x18	; 24
     dc4:	21 50       	subi	r18, 0x01	; 1
     dc6:	80 40       	sbci	r24, 0x00	; 0
     dc8:	90 40       	sbci	r25, 0x00	; 0
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <write_mtch_settings+0x856>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <write_mtch_settings+0x860>
     dce:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     dd0:	87 e1       	ldi	r24, 0x17	; 23
     dd2:	99 db       	rcall	.-2254   	; 0x506 <cmd_mtch6301>
     dd4:	2f ef       	ldi	r18, 0xFF	; 255
     dd6:	83 ed       	ldi	r24, 0xD3	; 211
     dd8:	90 e3       	ldi	r25, 0x30	; 48
     dda:	21 50       	subi	r18, 0x01	; 1
     ddc:	80 40       	sbci	r24, 0x00	; 0
     dde:	90 40       	sbci	r25, 0x00	; 0
     de0:	e1 f7       	brne	.-8      	; 0xdda <write_mtch_settings+0x86c>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <write_mtch_settings+0x876>
     de4:	00 00       	nop
		*/
		 write_status |= cmd_write_register(0xf0, 0x07, EEPROM_TOUCHPACKETCFG); //TOUCH PACKET CFG
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
     de6:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, STATUS_OK != write_status);
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	09 f4       	brne	.+2      	; 0xdee <write_mtch_settings+0x880>
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	84 e5       	ldi	r24, 0x54	; 84
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
	}
	
	//Restore touch functionality and save to NVRAM
	cmd_mtch6301(0x01);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	86 db       	rcall	.-2292   	; 0x506 <cmd_mtch6301>
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	89 e6       	ldi	r24, 0x69	; 105
     dfe:	98 e1       	ldi	r25, 0x18	; 24
     e00:	21 50       	subi	r18, 0x01	; 1
     e02:	80 40       	sbci	r24, 0x00	; 0
     e04:	90 40       	sbci	r25, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <write_mtch_settings+0x892>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <write_mtch_settings+0x89c>
     e0a:	00 00       	nop
	_delay_ms(8000);
	cmd_mtch6301(0x17);
     e0c:	87 e1       	ldi	r24, 0x17	; 23
     e0e:	7b db       	rcall	.-2314   	; 0x506 <cmd_mtch6301>
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	83 ed       	ldi	r24, 0xD3	; 211
     e14:	90 e3       	ldi	r25, 0x30	; 48
     e16:	21 50       	subi	r18, 0x01	; 1
     e18:	80 40       	sbci	r24, 0x00	; 0
     e1a:	90 40       	sbci	r25, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <write_mtch_settings+0x8a8>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <write_mtch_settings+0x8b2>
     e20:	00 00       	nop
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
		EEPROM_GENERAL_UPDATE_BOOL	|
     e22:	8d e4       	ldi	r24, 0x4D	; 77
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     e2a:	c8 2f       	mov	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
     e2c:	8d e4       	ldi	r24, 0x4D	; 77
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e34:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
     e36:	8e e4       	ldi	r24, 0x4E	; 78
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e3e:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
     e40:	8f e4       	ldi	r24, 0x4F	; 79
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e48:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
     e4a:	80 e5       	ldi	r24, 0x50	; 80
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e52:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
     e54:	81 e5       	ldi	r24, 0x51	; 81
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e5c:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
     e5e:	82 e5       	ldi	r24, 0x52	; 82
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e66:	c8 2b       	or	r28, r24
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
     e68:	83 e5       	ldi	r24, 0x53	; 83
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e70:	c8 2b       	or	r28, r24
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
     e72:	84 e5       	ldi	r24, 0x54	; 84
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     e7a:	6c 2f       	mov	r22, r28
     e7c:	68 2b       	or	r22, r24
     e7e:	85 e5       	ldi	r24, 0x55	; 85
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 1a 10 	call	0x2034	; 0x2034 <nvm_eeprom_write_byte>
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
	));
	
	if (EEPROM_MTCH_UPDATE_BOOL) {
     e86:	85 e5       	ldi	r24, 0x55	; 85
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <nvm_eeprom_read_byte>
     e8e:	88 23       	and	r24, r24
     e90:	31 f0       	breq	.+12     	; 0xe9e <write_mtch_settings+0x930>
		twinkle(255, 0, 0);
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	c4 d3       	rcall	.+1928   	; 0x1622 <twinkle>
		return false;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <write_mtch_settings+0x938>
	}
	
	else {
		rainbow();
     e9e:	d7 d3       	rcall	.+1966   	; 0x164e <rainbow>
		return true;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <write_mtch_settings+0x938>
}	

bool write_mtch_settings(void) {
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
		return true;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
	
	else {
		rainbow();
		return true;
	}
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	61 97       	sbiw	r28, 0x11	; 17
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	80 93 4c 06 	sts	0x064C, r24
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
     ee6:	80 91 35 20 	lds	r24, 0x2035
     eea:	88 23       	and	r24, r24
     eec:	21 f0       	breq	.+8      	; 0xef6 <__vector_9+0x4a>
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <__vector_9+0x48>
     ef2:	7f c0       	rjmp	.+254    	; 0xff2 <__vector_9+0x146>
     ef4:	9c c0       	rjmp	.+312    	; 0x102e <__vector_9+0x182>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
     ef6:	fe 01       	movw	r30, r28
     ef8:	3c 96       	adiw	r30, 0x0c	; 12
     efa:	86 e0       	ldi	r24, 0x06	; 6
     efc:	df 01       	movw	r26, r30
     efe:	1d 92       	st	X+, r1
     f00:	8a 95       	dec	r24
     f02:	e9 f7       	brne	.-6      	; 0xefe <__vector_9+0x52>
	
	twi_package_t package = {
     f04:	be 01       	movw	r22, r28
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8b e0       	ldi	r24, 0x0B	; 11
     f0c:	db 01       	movw	r26, r22
     f0e:	1d 92       	st	X+, r1
     f10:	8a 95       	dec	r24
     f12:	e9 f7       	brne	.-6      	; 0xf0e <__vector_9+0x62>
     f14:	85 e2       	ldi	r24, 0x25	; 37
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	ef 83       	std	Y+7, r30	; 0x07
     f1a:	f8 87       	std	Y+8, r31	; 0x08
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	89 87       	std	Y+9, r24	; 0x09
     f22:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	80 e8       	ldi	r24, 0x80	; 128
     f28:	94 e0       	ldi	r25, 0x04	; 4
     f2a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	82 fb       	bst	r24, 2
     f32:	00 27       	eor	r16, r16
     f34:	00 f9       	bld	r16, 0
     f36:	10 e0       	ldi	r17, 0x00	; 0
     f38:	00 93 6a 20 	sts	0x206A, r16
	
	if (m_touch_pkg->tch == 0)
     f3c:	01 2b       	or	r16, r17
     f3e:	09 f4       	brne	.+2      	; 0xf42 <__vector_9+0x96>
     f40:	76 c0       	rjmp	.+236    	; 0x102e <__vector_9+0x182>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
     f42:	a9 e6       	ldi	r26, 0x69	; 105
     f44:	b0 e2       	ldi	r27, 0x20	; 32
     f46:	88 77       	andi	r24, 0x78	; 120
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	95 95       	asr	r25
     f4c:	87 95       	ror	r24
     f4e:	95 95       	asr	r25
     f50:	87 95       	ror	r24
     f52:	95 95       	asr	r25
     f54:	87 95       	ror	r24
     f56:	8c 93       	st	X, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
     f58:	8e 85       	ldd	r24, Y+14	; 0x0e
     f5a:	e8 2f       	mov	r30, r24
     f5c:	ef 77       	andi	r30, 0x7F	; 127
     f5e:	17 96       	adiw	r26, 0x07	; 7
     f60:	ec 93       	st	X, r30
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
     f62:	8e 2f       	mov	r24, r30
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	fc 01       	movw	r30, r24
     f68:	70 97       	sbiw	r30, 0x10	; 16
     f6a:	e3 35       	cpi	r30, 0x53	; 83
     f6c:	f1 05       	cpc	r31, r1
     f6e:	d8 f5       	brcc	.+118    	; 0xfe6 <__vector_9+0x13a>
     f70:	ea 5a       	subi	r30, 0xAA	; 170
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
     f78:	80 ea       	ldi	r24, 0xA0	; 160
     f7a:	80 93 2a 20 	sts	0x202A, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	35 c0       	rjmp	.+106    	; 0xfec <__vector_9+0x140>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
     f82:	81 ea       	ldi	r24, 0xA1	; 161
     f84:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	30 c0       	rjmp	.+96     	; 0xfec <__vector_9+0x140>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
     f8c:	82 ea       	ldi	r24, 0xA2	; 162
     f8e:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	2b c0       	rjmp	.+86     	; 0xfec <__vector_9+0x140>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
     f96:	83 ea       	ldi	r24, 0xA3	; 163
     f98:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	26 c0       	rjmp	.+76     	; 0xfec <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
     fa0:	83 ea       	ldi	r24, 0xA3	; 163
     fa2:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	21 c0       	rjmp	.+66     	; 0xfec <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
     faa:	84 ea       	ldi	r24, 0xA4	; 164
     fac:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
     fb0:	85 e0       	ldi	r24, 0x05	; 5
     fb2:	1c c0       	rjmp	.+56     	; 0xfec <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
     fb4:	84 ea       	ldi	r24, 0xA4	; 164
     fb6:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	17 c0       	rjmp	.+46     	; 0xfec <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
     fbe:	85 ea       	ldi	r24, 0xA5	; 165
     fc0:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
     fc8:	85 ea       	ldi	r24, 0xA5	; 165
     fca:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
     fce:	86 e0       	ldi	r24, 0x06	; 6
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
     fd2:	86 ea       	ldi	r24, 0xA6	; 166
     fd4:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
     fd8:	87 e0       	ldi	r24, 0x07	; 7
     fda:	08 c0       	rjmp	.+16     	; 0xfec <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
     fdc:	86 ea       	ldi	r24, 0xA6	; 166
     fde:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
     fe6:	10 92 2a 20 	sts	0x202A, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
     fea:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
     fec:	80 93 34 20 	sts	0x2034, r24
     ff0:	1e c0       	rjmp	.+60     	; 0x102e <__vector_9+0x182>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
     ff2:	be 01       	movw	r22, r28
     ff4:	6f 5f       	subi	r22, 0xFF	; 255
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8b e0       	ldi	r24, 0x0B	; 11
     ffa:	fb 01       	movw	r30, r22
     ffc:	11 92       	st	Z+, r1
     ffe:	8a 95       	dec	r24
    1000:	e9 f7       	brne	.-6      	; 0xffc <__vector_9+0x150>
    1002:	85 e2       	ldi	r24, 0x25	; 37
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	0b e2       	ldi	r16, 0x2B	; 43
    1008:	10 e2       	ldi	r17, 0x20	; 32
    100a:	0f 83       	std	Y+7, r16	; 0x07
    100c:	18 87       	std	Y+8, r17	; 0x08
    100e:	89 e0       	ldi	r24, 0x09	; 9
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	89 87       	std	Y+9, r24	; 0x09
    1014:	9a 87       	std	Y+10, r25	; 0x0a
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	80 e8       	ldi	r24, 0x80	; 128
    101a:	94 e0       	ldi	r25, 0x04	; 4
    101c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    1020:	10 92 35 20 	sts	0x2035, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    1024:	d8 01       	movw	r26, r16
    1026:	13 96       	adiw	r26, 0x03	; 3
    1028:	8c 91       	ld	r24, X
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    102a:	80 93 04 20 	sts	0x2004, r24
			break;
		default:
			return;
	}
    102e:	61 96       	adiw	r28, 0x11	; 17
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <timerD5_overflow_interrupt_callback>:
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
}
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 73 20 	sts	0x2073, r24
    1064:	e0 e4       	ldi	r30, 0x40	; 64
    1066:	f9 e0       	ldi	r31, 0x09	; 9
    1068:	84 85       	ldd	r24, Z+12	; 0x0c
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	84 87       	std	Z+12, r24	; 0x0c
    106e:	08 95       	ret

00001070 <init_timerd5>:

void init_timerd5(void)
{
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
	tc45_enable(&TCD5);
    1074:	80 e4       	ldi	r24, 0x40	; 64
    1076:	99 e0       	ldi	r25, 0x09	; 9
    1078:	0e 94 7d 12 	call	0x24fa	; 0x24fa <tc45_enable>
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    107c:	c0 e4       	ldi	r28, 0x40	; 64
    107e:	d9 e0       	ldi	r29, 0x09	; 9
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	8c 7f       	andi	r24, 0xFC	; 252
    1084:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    1086:	8e 81       	ldd	r24, Y+6	; 0x06
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 7f       	andi	r24, 0xF8	; 248
    1090:	89 83       	std	Y+1, r24	; 0x01
	tc45_set_overflow_interrupt_level(&TCD5, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCD5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCD5,	timerD5_overflow_interrupt_callback);
    1092:	6f e2       	ldi	r22, 0x2F	; 47
    1094:	78 e0       	ldi	r23, 0x08	; 8
    1096:	80 e4       	ldi	r24, 0x40	; 64
    1098:	99 e0       	ldi	r25, 0x09	; 9
    109a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    109e:	82 ea       	ldi	r24, 0xA2	; 162
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	8e a3       	std	Y+38, r24	; 0x26
    10a4:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    10a6:	88 81       	ld	r24, Y
    10a8:	80 7f       	andi	r24, 0xF0	; 240
    10aa:	87 60       	ori	r24, 0x07	; 7
    10ac:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    10ae:	e0 ea       	ldi	r30, 0xA0	; 160
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCD5, 162);//EVERY 5ms
	tc45_set_resolution(&TCD5, 31250);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    10b8:	78 94       	sei
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <uart_send_status>:
	pulse_state_changed = false;
	return changed;
}

void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
    10c0:	68 2f       	mov	r22, r24
    10c2:	80 ec       	ldi	r24, 0xC0	; 192
    10c4:	98 e0       	ldi	r25, 0x08	; 8
    10c6:	0c 94 2d 14 	jmp	0x285a	; 0x285a <usart_putchar>
    10ca:	08 95       	ret

000010cc <led_set_from_colors>:
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	a5 e0       	ldi	r26, 0x05	; 5
    10d2:	b0 e2       	ldi	r27, 0x20	; 32
    10d4:	8c 91       	ld	r24, X
    10d6:	ec e8       	ldi	r30, 0x8C	; 140
    10d8:	f0 e2       	ldi	r31, 0x20	; 32
    10da:	80 83       	st	Z, r24
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	8c 91       	ld	r24, X
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	81 83       	std	Z+1, r24	; 0x01
    10e4:	12 96       	adiw	r26, 0x02	; 2
    10e6:	8c 91       	ld	r24, X
    10e8:	12 97       	sbiw	r26, 0x02	; 2
    10ea:	82 83       	std	Z+2, r24	; 0x02
    10ec:	8c 91       	ld	r24, X
    10ee:	81 87       	std	Z+9, r24	; 0x09
    10f0:	11 96       	adiw	r26, 0x01	; 1
    10f2:	8c 91       	ld	r24, X
    10f4:	11 97       	sbiw	r26, 0x01	; 1
    10f6:	82 87       	std	Z+10, r24	; 0x0a
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	8c 91       	ld	r24, X
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	83 87       	std	Z+11, r24	; 0x0b
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	8c 91       	ld	r24, X
    1104:	13 97       	sbiw	r26, 0x03	; 3
    1106:	83 83       	std	Z+3, r24	; 0x03
    1108:	14 96       	adiw	r26, 0x04	; 4
    110a:	8c 91       	ld	r24, X
    110c:	14 97       	sbiw	r26, 0x04	; 4
    110e:	84 83       	std	Z+4, r24	; 0x04
    1110:	15 96       	adiw	r26, 0x05	; 5
    1112:	8c 91       	ld	r24, X
    1114:	15 97       	sbiw	r26, 0x05	; 5
    1116:	85 83       	std	Z+5, r24	; 0x05
    1118:	13 96       	adiw	r26, 0x03	; 3
    111a:	8c 91       	ld	r24, X
    111c:	13 97       	sbiw	r26, 0x03	; 3
    111e:	84 87       	std	Z+12, r24	; 0x0c
    1120:	14 96       	adiw	r26, 0x04	; 4
    1122:	8c 91       	ld	r24, X
    1124:	14 97       	sbiw	r26, 0x04	; 4
    1126:	85 87       	std	Z+13, r24	; 0x0d
    1128:	15 96       	adiw	r26, 0x05	; 5
    112a:	8c 91       	ld	r24, X
    112c:	15 97       	sbiw	r26, 0x05	; 5
    112e:	86 87       	std	Z+14, r24	; 0x0e
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	8c 91       	ld	r24, X
    1134:	16 97       	sbiw	r26, 0x06	; 6
    1136:	86 83       	std	Z+6, r24	; 0x06
    1138:	17 96       	adiw	r26, 0x07	; 7
    113a:	8c 91       	ld	r24, X
    113c:	17 97       	sbiw	r26, 0x07	; 7
    113e:	87 83       	std	Z+7, r24	; 0x07
    1140:	18 96       	adiw	r26, 0x08	; 8
    1142:	8c 91       	ld	r24, X
    1144:	18 97       	sbiw	r26, 0x08	; 8
    1146:	80 87       	std	Z+8, r24	; 0x08
    1148:	16 96       	adiw	r26, 0x06	; 6
    114a:	8c 91       	ld	r24, X
    114c:	16 97       	sbiw	r26, 0x06	; 6
    114e:	87 87       	std	Z+15, r24	; 0x0f
    1150:	17 96       	adiw	r26, 0x07	; 7
    1152:	8c 91       	ld	r24, X
    1154:	17 97       	sbiw	r26, 0x07	; 7
    1156:	80 8b       	std	Z+16, r24	; 0x10
    1158:	18 96       	adiw	r26, 0x08	; 8
    115a:	8c 91       	ld	r24, X
    115c:	81 8b       	std	Z+17, r24	; 0x11
    115e:	c0 e0       	ldi	r28, 0x00	; 0
    1160:	d0 e0       	ldi	r29, 0x00	; 0
    1162:	fe 01       	movw	r30, r28
    1164:	eb 5f       	subi	r30, 0xFB	; 251
    1166:	ff 4d       	sbci	r31, 0xDF	; 223
    1168:	60 81       	ld	r22, Z
    116a:	21 96       	adiw	r28, 0x01	; 1
    116c:	ce 01       	movw	r24, r28
    116e:	62 d7       	rcall	.+3780   	; 0x2034 <nvm_eeprom_write_byte>
    1170:	c9 30       	cpi	r28, 0x09	; 9
    1172:	d1 05       	cpc	r29, r1
    1174:	b1 f7       	brne	.-20     	; 0x1162 <led_set_from_colors+0x96>
    1176:	50 d2       	rcall	.+1184   	; 0x1618 <ischarging>
    1178:	81 11       	cpse	r24, r1
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <led_set_from_colors+0xb8>
    117c:	66 e0       	ldi	r22, 0x06	; 6
    117e:	8c e8       	ldi	r24, 0x8C	; 140
    1180:	90 e2       	ldi	r25, 0x20	; 32
    1182:	c5 d4       	rcall	.+2442   	; 0x1b0e <set_flash_ws2812>
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <get_pulse_state>:
    118a:	80 91 38 20 	lds	r24, 0x2038
    118e:	08 95       	ret

00001190 <__vector_23>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTC0_RXC_vect)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
    11b2:	80 ec       	ldi	r24, 0xC0	; 192
    11b4:	98 e0       	ldi	r25, 0x08	; 8
    11b6:	0e 94 3b 14 	call	0x2876	; 0x2876 <usart_getchar>
	
	0F 04 00 01 FB F0
*/
static inline void uart_protocal(uint8_t rxvalue)
{
	if (num_rx == 0)
    11ba:	90 91 3b 20 	lds	r25, 0x203B
    11be:	91 11       	cpse	r25, r1
    11c0:	0e c0       	rjmp	.+28     	; 0x11de <__vector_23+0x4e>
	{
		if (rxvalue == 0x0F)
    11c2:	8f 30       	cpi	r24, 0x0F	; 15
    11c4:	49 f4       	brne	.+18     	; 0x11d8 <__vector_23+0x48>
		{
			num_rx ++;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 3b 20 	sts	0x203B, r24
			uart_length = 6;
    11cc:	96 e0       	ldi	r25, 0x06	; 6
    11ce:	90 93 1b 20 	sts	0x201B, r25
	usart_putchar(M_USART, status_uart);
}

void uart_start(void)
{
	uart_start_flag = true;
    11d2:	80 93 3a 20 	sts	0x203A, r24
    11d6:	38 c0       	rjmp	.+112    	; 0x1248 <__vector_23+0xb8>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    11d8:	10 92 3b 20 	sts	0x203B, r1
    11dc:	35 c0       	rjmp	.+106    	; 0x1248 <__vector_23+0xb8>
		else
		{
			uart_clear();
		}
	} 
	else if (num_rx == uart_length+1)
    11de:	29 2f       	mov	r18, r25
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	60 91 1b 20 	lds	r22, 0x201B
    11e6:	46 2f       	mov	r20, r22
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	4f 5f       	subi	r20, 0xFF	; 255
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	24 17       	cp	r18, r20
    11f0:	35 07       	cpc	r19, r21
    11f2:	f1 f4       	brne	.+60     	; 0x1230 <__vector_23+0xa0>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    11f4:	10 92 3b 20 	sts	0x203B, r1
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    11f8:	80 3f       	cpi	r24, 0xF0	; 240
    11fa:	a9 f4       	brne	.+42     	; 0x1226 <__vector_23+0x96>

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    11fc:	20 91 74 20 	lds	r18, 0x2074
    1200:	22 23       	and	r18, r18
    1202:	61 f0       	breq	.+24     	; 0x121c <__vector_23+0x8c>
    1204:	44 e7       	ldi	r20, 0x74	; 116
    1206:	50 e2       	ldi	r21, 0x20	; 32
    1208:	fa 01       	movw	r30, r20
    120a:	80 e0       	ldi	r24, 0x00	; 0
	{
		sum += rxvalue[i];
    120c:	91 91       	ld	r25, Z+
    120e:	89 0f       	add	r24, r25
    1210:	9e 2f       	mov	r25, r30
    1212:	94 1b       	sub	r25, r20

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1214:	92 17       	cp	r25, r18
    1216:	d0 f3       	brcs	.-12     	; 0x120c <__vector_23+0x7c>
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1218:	81 11       	cpse	r24, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <__vector_23+0x96>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    121c:	10 92 3a 20 	sts	0x203A, r1
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
		{
			uart_stop();
			uart_send_status(UART_OK);
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	4e df       	rcall	.-356    	; 0x10c0 <uart_send_status>
    1224:	11 c0       	rjmp	.+34     	; 0x1248 <__vector_23+0xb8>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1226:	10 92 3a 20 	sts	0x203A, r1
			uart_send_status(UART_OK);
		} 
		else
		{
			uart_stop();
			uart_send_status(UART_FAIL);
    122a:	8c e0       	ldi	r24, 0x0C	; 12
    122c:	49 df       	rcall	.-366    	; 0x10c0 <uart_send_status>
    122e:	0c c0       	rjmp	.+24     	; 0x1248 <__vector_23+0xb8>
		}
	} 
	else
	{
		rxdata[num_rx-1] = rxvalue;
    1230:	f9 01       	movw	r30, r18
    1232:	ed 58       	subi	r30, 0x8D	; 141
    1234:	ff 4d       	sbci	r31, 0xDF	; 223
    1236:	80 83       	st	Z, r24
		num_rx ++;
    1238:	9f 5f       	subi	r25, 0xFF	; 255
    123a:	90 93 3b 20 	sts	0x203B, r25
		
		if (uart_length != rxdata[UART_LENGTH])
    123e:	80 91 74 20 	lds	r24, 0x2074
    1242:	68 13       	cpse	r22, r24
		{
			uart_length = rxdata[UART_LENGTH];
    1244:	80 93 1b 20 	sts	0x201B, r24
*/
ISR(USARTC0_RXC_vect)
{
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
}
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <uartCmdValid>:


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    switch(cmd){
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	fc 01       	movw	r30, r24
    126e:	31 97       	sbiw	r30, 0x01	; 1
    1270:	e0 37       	cpi	r30, 0x70	; 112
    1272:	f1 05       	cpc	r31, r1
    1274:	30 f4       	brcc	.+12     	; 0x1282 <uartCmdValid+0x18>
    1276:	e7 55       	subi	r30, 0x57	; 87
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__tablejump2__>
		case UART_GET_COLOR:
		case UART_GET_CHARGING:
		case UART_SET_MTCH:
		case UART_GET_MTCH:
		case UART_SET_RESTART:
			retval=true;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	08 95       	ret
}


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    1282:	80 e0       	ldi	r24, 0x00	; 0
		default:
			break;
	}
	return retval;

}
    1284:	08 95       	ret

00001286 <__vector_40>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
	 unsigned int count=0;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    12b4:	e0 ec       	ldi	r30, 0xC0	; 192
    12b6:	f9 e0       	ldi	r31, 0x09	; 9
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <__vector_40+0x42>

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
#ifdef LIMIT_LOOP //do not wait for ever.
               if(count++>10000)
    12ba:	9c 01       	movw	r18, r24
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	81 31       	cpi	r24, 0x11	; 17
    12c2:	97 42       	sbci	r25, 0x27	; 39
    12c4:	78 f4       	brcc	.+30     	; 0x12e4 <__vector_40+0x5e>
    12c6:	c9 01       	movw	r24, r18
    12c8:	21 81       	ldd	r18, Z+1	; 0x01
	}*/
	

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
    12ca:	22 23       	and	r18, r18
    12cc:	b4 f7       	brge	.-20     	; 0x12ba <__vector_40+0x34>
#endif		
	      }
		//do not read when error
		if(errflag)
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
    12ce:	20 81       	ld	r18, Z
    12d0:	da 01       	movw	r26, r20
    12d2:	a2 5f       	subi	r26, 0xF2	; 242
    12d4:	bf 4d       	sbci	r27, 0xDF	; 223
    12d6:	2c 93       	st	X, r18
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    12d8:	4f 5f       	subi	r20, 0xFF	; 255
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	4b 30       	cpi	r20, 0x0B	; 11
    12de:	51 05       	cpc	r21, r1
    12e0:	99 f7       	brne	.-26     	; 0x12c8 <__vector_40+0x42>
    12e2:	69 c1       	rjmp	.+722    	; 0x15b6 <__vector_40+0x330>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    12e4:	80 91 0e 20 	lds	r24, 0x200E
    12e8:	c0 df       	rcall	.-128    	; 0x126a <uartCmdValid>
    12ea:	88 23       	and	r24, r24
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <__vector_40+0x6a>
    12ee:	5f c1       	rjmp	.+702    	; 0x15ae <__vector_40+0x328>
    12f0:	80 91 0f 20 	lds	r24, 0x200F
    12f4:	89 30       	cpi	r24, 0x09	; 9
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <__vector_40+0x74>
    12f8:	5a c1       	rjmp	.+692    	; 0x15ae <__vector_40+0x328>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    12fa:	80 91 0e 20 	lds	r24, 0x200E
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	fc 01       	movw	r30, r24
    1302:	31 97       	sbiw	r30, 0x01	; 1
    1304:	e0 37       	cpi	r30, 0x70	; 112
    1306:	f1 05       	cpc	r31, r1
    1308:	08 f0       	brcs	.+2      	; 0x130c <__vector_40+0x86>
    130a:	51 c1       	rjmp	.+674    	; 0x15ae <__vector_40+0x328>
    130c:	e7 5e       	subi	r30, 0xE7	; 231
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__tablejump2__>
		case UART_SET_COLOR:
	#ifdef LIMIT_LOOP //only handle correct format	
			if(buffer_data[1]!=UART_COLOR_LEN)
    1314:	80 91 0f 20 	lds	r24, 0x200F
    1318:	89 30       	cpi	r24, 0x09	; 9
    131a:	09 f0       	breq	.+2      	; 0x131e <__vector_40+0x98>
    131c:	48 c1       	rjmp	.+656    	; 0x15ae <__vector_40+0x328>
				break;
	#endif	
			send_response(UART_SET_COLOR, 0xff);
    131e:	6f ef       	ldi	r22, 0xFF	; 255
    1320:	83 e4       	ldi	r24, 0x43	; 67
    1322:	ed d1       	rcall	.+986    	; 0x16fe <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    1324:	ae e0       	ldi	r26, 0x0E	; 14
    1326:	b0 e2       	ldi	r27, 0x20	; 32
    1328:	12 96       	adiw	r26, 0x02	; 2
    132a:	8c 91       	ld	r24, X
    132c:	12 97       	sbiw	r26, 0x02	; 2
    132e:	ec e8       	ldi	r30, 0x8C	; 140
    1330:	f0 e2       	ldi	r31, 0x20	; 32
    1332:	80 83       	st	Z, r24
	m_led_struct[0].g = buffer_data[3];
    1334:	13 96       	adiw	r26, 0x03	; 3
    1336:	8c 91       	ld	r24, X
    1338:	13 97       	sbiw	r26, 0x03	; 3
    133a:	81 83       	std	Z+1, r24	; 0x01
	m_led_struct[0].b = buffer_data[4];
    133c:	14 96       	adiw	r26, 0x04	; 4
    133e:	8c 91       	ld	r24, X
    1340:	14 97       	sbiw	r26, 0x04	; 4
    1342:	82 83       	std	Z+2, r24	; 0x02
	m_led_struct[3].r = buffer_data[2];
    1344:	12 96       	adiw	r26, 0x02	; 2
    1346:	8c 91       	ld	r24, X
    1348:	12 97       	sbiw	r26, 0x02	; 2
    134a:	81 87       	std	Z+9, r24	; 0x09
	m_led_struct[3].g = buffer_data[3];
    134c:	13 96       	adiw	r26, 0x03	; 3
    134e:	8c 91       	ld	r24, X
    1350:	13 97       	sbiw	r26, 0x03	; 3
    1352:	82 87       	std	Z+10, r24	; 0x0a
	m_led_struct[3].b = buffer_data[4];
    1354:	14 96       	adiw	r26, 0x04	; 4
    1356:	8c 91       	ld	r24, X
    1358:	14 97       	sbiw	r26, 0x04	; 4
    135a:	83 87       	std	Z+11, r24	; 0x0b
	
	m_led_struct[1].r = buffer_data[5];
    135c:	15 96       	adiw	r26, 0x05	; 5
    135e:	8c 91       	ld	r24, X
    1360:	15 97       	sbiw	r26, 0x05	; 5
    1362:	83 83       	std	Z+3, r24	; 0x03
	m_led_struct[1].g = buffer_data[6];
    1364:	16 96       	adiw	r26, 0x06	; 6
    1366:	8c 91       	ld	r24, X
    1368:	16 97       	sbiw	r26, 0x06	; 6
    136a:	84 83       	std	Z+4, r24	; 0x04
	m_led_struct[1].b = buffer_data[7];
    136c:	17 96       	adiw	r26, 0x07	; 7
    136e:	8c 91       	ld	r24, X
    1370:	17 97       	sbiw	r26, 0x07	; 7
    1372:	85 83       	std	Z+5, r24	; 0x05
	m_led_struct[4].r = buffer_data[5];
    1374:	15 96       	adiw	r26, 0x05	; 5
    1376:	8c 91       	ld	r24, X
    1378:	15 97       	sbiw	r26, 0x05	; 5
    137a:	84 87       	std	Z+12, r24	; 0x0c
	m_led_struct[4].g = buffer_data[6];
    137c:	16 96       	adiw	r26, 0x06	; 6
    137e:	8c 91       	ld	r24, X
    1380:	16 97       	sbiw	r26, 0x06	; 6
    1382:	85 87       	std	Z+13, r24	; 0x0d
	m_led_struct[4].b = buffer_data[7];
    1384:	17 96       	adiw	r26, 0x07	; 7
    1386:	8c 91       	ld	r24, X
    1388:	17 97       	sbiw	r26, 0x07	; 7
    138a:	86 87       	std	Z+14, r24	; 0x0e
	
	m_led_struct[2].r = buffer_data[8];
    138c:	18 96       	adiw	r26, 0x08	; 8
    138e:	8c 91       	ld	r24, X
    1390:	18 97       	sbiw	r26, 0x08	; 8
    1392:	86 83       	std	Z+6, r24	; 0x06
	m_led_struct[2].g = buffer_data[9];
    1394:	19 96       	adiw	r26, 0x09	; 9
    1396:	8c 91       	ld	r24, X
    1398:	19 97       	sbiw	r26, 0x09	; 9
    139a:	87 83       	std	Z+7, r24	; 0x07
	m_led_struct[2].b = buffer_data[10];
    139c:	1a 96       	adiw	r26, 0x0a	; 10
    139e:	8c 91       	ld	r24, X
    13a0:	1a 97       	sbiw	r26, 0x0a	; 10
    13a2:	80 87       	std	Z+8, r24	; 0x08
	m_led_struct[5].r = buffer_data[8];
    13a4:	18 96       	adiw	r26, 0x08	; 8
    13a6:	8c 91       	ld	r24, X
    13a8:	18 97       	sbiw	r26, 0x08	; 8
    13aa:	87 87       	std	Z+15, r24	; 0x0f
	m_led_struct[5].g = buffer_data[9];
    13ac:	19 96       	adiw	r26, 0x09	; 9
    13ae:	8c 91       	ld	r24, X
    13b0:	19 97       	sbiw	r26, 0x09	; 9
    13b2:	80 8b       	std	Z+16, r24	; 0x10
	m_led_struct[5].b = buffer_data[10];
    13b4:	1a 96       	adiw	r26, 0x0a	; 10
    13b6:	8c 91       	ld	r24, X
    13b8:	81 8b       	std	Z+17, r24	; 0x11
	
	for (int i=0; i<9; i++) {
    13ba:	c0 e0       	ldi	r28, 0x00	; 0
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    13be:	fe 01       	movw	r30, r28
    13c0:	e0 5f       	subi	r30, 0xF0	; 240
    13c2:	ff 4d       	sbci	r31, 0xDF	; 223
    13c4:	80 81       	ld	r24, Z
    13c6:	fe 01       	movw	r30, r28
    13c8:	eb 5f       	subi	r30, 0xFB	; 251
    13ca:	ff 4d       	sbci	r31, 0xDF	; 223
    13cc:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    13ce:	60 81       	ld	r22, Z
    13d0:	21 96       	adiw	r28, 0x01	; 1
    13d2:	ce 01       	movw	r24, r28
    13d4:	2f d6       	rcall	.+3166   	; 0x2034 <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    13d6:	c9 30       	cpi	r28, 0x09	; 9
    13d8:	d1 05       	cpc	r29, r1
    13da:	89 f7       	brne	.-30     	; 0x13be <__vector_40+0x138>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    13dc:	1d d1       	rcall	.+570    	; 0x1618 <ischarging>
    13de:	81 11       	cpse	r24, r1
    13e0:	e6 c0       	rjmp	.+460    	; 0x15ae <__vector_40+0x328>
		set_flash_ws2812(m_led_struct, 6);
    13e2:	66 e0       	ldi	r22, 0x06	; 6
    13e4:	8c e8       	ldi	r24, 0x8C	; 140
    13e6:	90 e2       	ldi	r25, 0x20	; 32
    13e8:	92 d3       	rcall	.+1828   	; 0x1b0e <set_flash_ws2812>
    13ea:	e1 c0       	rjmp	.+450    	; 0x15ae <__vector_40+0x328>
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    13ec:	6f ef       	ldi	r22, 0xFF	; 255
    13ee:	80 e5       	ldi	r24, 0x50	; 80
    13f0:	86 d1       	rcall	.+780    	; 0x16fe <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    13f2:	80 91 10 20 	lds	r24, 0x2010
    13f6:	88 23       	and	r24, r24
    13f8:	19 f0       	breq	.+6      	; 0x1400 <__vector_40+0x17a>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	39 f0       	breq	.+14     	; 0x140c <__vector_40+0x186>
    13fe:	0c c0       	rjmp	.+24     	; 0x1418 <__vector_40+0x192>
		case 0x00:
			pulse_state = false;
    1400:	10 92 38 20 	sts	0x2038, r1
			pulse_state_changed = true;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 93 37 20 	sts	0x2037, r24
    140a:	d1 c0       	rjmp	.+418    	; 0x15ae <__vector_40+0x328>
			break;
		case 0x01:
			pulse_state = true;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 93 38 20 	sts	0x2038, r24
			pulse_state_changed = true;
    1412:	80 93 37 20 	sts	0x2037, r24
    1416:	cb c0       	rjmp	.+406    	; 0x15ae <__vector_40+0x328>
			break;
		default:
			pulse_state = true;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 38 20 	sts	0x2038, r24
			pulse_state_changed = true;
    141e:	80 93 37 20 	sts	0x2037, r24
    1422:	c5 c0       	rjmp	.+394    	; 0x15ae <__vector_40+0x328>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    1424:	80 91 38 20 	lds	r24, 0x2038
    1428:	88 23       	and	r24, r24
    142a:	29 f0       	breq	.+10     	; 0x1436 <__vector_40+0x1b0>
				pulse_state = false;
    142c:	10 92 38 20 	sts	0x2038, r1
				pulse_state_changed = true;	
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 37 20 	sts	0x2037, r24
			}
			shutdown_received = true;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 36 20 	sts	0x2036, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    143c:	6f ef       	ldi	r22, 0xFF	; 255
    143e:	5f d1       	rcall	.+702    	; 0x16fe <send_response>
    1440:	b6 c0       	rjmp	.+364    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    1442:	80 91 10 20 	lds	r24, 0x2010
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	87 30       	cpi	r24, 0x07	; 7
    144a:	91 05       	cpc	r25, r1
    144c:	08 f0       	brcs	.+2      	; 0x1450 <__vector_40+0x1ca>
    144e:	af c0       	rjmp	.+350    	; 0x15ae <__vector_40+0x328>
    1450:	fc 01       	movw	r30, r24
    1452:	e7 57       	subi	r30, 0x77	; 119
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    145a:	80 91 11 20 	lds	r24, 0x2011
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	80 93 40 20 	sts	0x2040, r24
    1464:	90 93 41 20 	sts	0x2041, r25
    1468:	a2 c0       	rjmp	.+324    	; 0x15ae <__vector_40+0x328>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    146a:	80 91 11 20 	lds	r24, 0x2011
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	80 93 27 20 	sts	0x2027, r24
    1474:	90 93 28 20 	sts	0x2028, r25
    1478:	9a c0       	rjmp	.+308    	; 0x15ae <__vector_40+0x328>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    147a:	80 91 11 20 	lds	r24, 0x2011
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	80 93 25 20 	sts	0x2025, r24
    1484:	90 93 26 20 	sts	0x2026, r25
    1488:	92 c0       	rjmp	.+292    	; 0x15ae <__vector_40+0x328>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    148a:	80 91 11 20 	lds	r24, 0x2011
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	80 93 23 20 	sts	0x2023, r24
    1494:	90 93 24 20 	sts	0x2024, r25
    1498:	8a c0       	rjmp	.+276    	; 0x15ae <__vector_40+0x328>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    149a:	80 91 11 20 	lds	r24, 0x2011
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	80 93 21 20 	sts	0x2021, r24
    14a4:	90 93 22 20 	sts	0x2022, r25
    14a8:	82 c0       	rjmp	.+260    	; 0x15ae <__vector_40+0x328>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    14aa:	80 91 11 20 	lds	r24, 0x2011
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	80 93 1f 20 	sts	0x201F, r24
    14b4:	90 93 20 20 	sts	0x2020, r25
    14b8:	7a c0       	rjmp	.+244    	; 0x15ae <__vector_40+0x328>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    14ba:	80 91 11 20 	lds	r24, 0x2011
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	80 93 1d 20 	sts	0x201D, r24
    14c4:	90 93 1e 20 	sts	0x201E, r25
    14c8:	72 c0       	rjmp	.+228    	; 0x15ae <__vector_40+0x328>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    14ca:	80 91 10 20 	lds	r24, 0x2010
    14ce:	80 93 1c 20 	sts	0x201C, r24
    14d2:	6d c0       	rjmp	.+218    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    14d4:	80 91 10 20 	lds	r24, 0x2010
    14d8:	80 93 02 20 	sts	0x2002, r24
    14dc:	68 c0       	rjmp	.+208    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    14de:	80 91 10 20 	lds	r24, 0x2010
    14e2:	80 93 01 20 	sts	0x2001, r24
    14e6:	63 c0       	rjmp	.+198    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    14e8:	80 91 10 20 	lds	r24, 0x2010
    14ec:	80 93 00 20 	sts	0x2000, r24
    14f0:	5e c0       	rjmp	.+188    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    14f2:	16 d1       	rcall	.+556    	; 0x1720 <send_light_data>
    14f4:	5c c0       	rjmp	.+184    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    14f6:	2d d1       	rcall	.+602    	; 0x1752 <send_battery_data>
    14f8:	5a c0       	rjmp	.+180    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    14fa:	98 d1       	rcall	.+816    	; 0x182c <send_pulse_data>
    14fc:	58 c0       	rjmp	.+176    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    14fe:	6f d1       	rcall	.+734    	; 0x17de <send_color_data>
    1500:	56 c0       	rjmp	.+172    	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    1502:	41 d1       	rcall	.+642    	; 0x1786 <send_charging_data>
    1504:	54 c0       	rjmp	.+168    	; 0x15ae <__vector_40+0x328>
			break;		
			
		case UART_SET_MTCH:
			nvm_eeprom_write_byte(buffer_data[2], buffer_data[3]);
    1506:	ce e0       	ldi	r28, 0x0E	; 14
    1508:	d0 e2       	ldi	r29, 0x20	; 32
    150a:	6b 81       	ldd	r22, Y+3	; 0x03
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	91 d5       	rcall	.+2850   	; 0x2034 <nvm_eeprom_write_byte>
			
			if (buffer_data[2] <= 15) {
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	80 31       	cpi	r24, 0x10	; 16
    1516:	28 f4       	brcc	.+10     	; 0x1522 <__vector_40+0x29c>
				nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, 1);
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	8d e4       	ldi	r24, 0x4D	; 77
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	8a d5       	rcall	.+2836   	; 0x2034 <nvm_eeprom_write_byte>
    1520:	3e c0       	rjmp	.+124    	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 28) {
    1522:	80 91 10 20 	lds	r24, 0x2010
    1526:	8d 31       	cpi	r24, 0x1D	; 29
    1528:	28 f4       	brcc	.+10     	; 0x1534 <__vector_40+0x2ae>
				nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, 1);
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	8e e4       	ldi	r24, 0x4E	; 78
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	81 d5       	rcall	.+2818   	; 0x2034 <nvm_eeprom_write_byte>
    1532:	35 c0       	rjmp	.+106    	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 46) {
    1534:	80 91 10 20 	lds	r24, 0x2010
    1538:	8f 32       	cpi	r24, 0x2F	; 47
    153a:	28 f4       	brcc	.+10     	; 0x1546 <__vector_40+0x2c0>
				nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, 1);
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	8f e4       	ldi	r24, 0x4F	; 79
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	78 d5       	rcall	.+2800   	; 0x2034 <nvm_eeprom_write_byte>
    1544:	2c c0       	rjmp	.+88     	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 48) {
    1546:	80 91 10 20 	lds	r24, 0x2010
    154a:	81 33       	cpi	r24, 0x31	; 49
    154c:	28 f4       	brcc	.+10     	; 0x1558 <__vector_40+0x2d2>
				nvm_eeprom_write_byte(EEPROM_INDEX_SELF, 1);
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	80 e5       	ldi	r24, 0x50	; 80
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	6f d5       	rcall	.+2782   	; 0x2034 <nvm_eeprom_write_byte>
    1556:	23 c0       	rjmp	.+70     	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 50) {
    1558:	80 91 10 20 	lds	r24, 0x2010
    155c:	83 33       	cpi	r24, 0x33	; 51
    155e:	28 f4       	brcc	.+10     	; 0x156a <__vector_40+0x2e4>
				nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, 1);
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	81 e5       	ldi	r24, 0x51	; 81
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	66 d5       	rcall	.+2764   	; 0x2034 <nvm_eeprom_write_byte>
    1568:	1a c0       	rjmp	.+52     	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 56) {
    156a:	80 91 10 20 	lds	r24, 0x2010
    156e:	89 33       	cpi	r24, 0x39	; 57
    1570:	28 f4       	brcc	.+10     	; 0x157c <__vector_40+0x2f6>
				nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, 1);
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	82 e5       	ldi	r24, 0x52	; 82
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	5d d5       	rcall	.+2746   	; 0x2034 <nvm_eeprom_write_byte>
    157a:	11 c0       	rjmp	.+34     	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 69) {
    157c:	80 91 10 20 	lds	r24, 0x2010
    1580:	86 34       	cpi	r24, 0x46	; 70
    1582:	28 f4       	brcc	.+10     	; 0x158e <__vector_40+0x308>
				nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 1);
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	83 e5       	ldi	r24, 0x53	; 83
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	54 d5       	rcall	.+2728   	; 0x2034 <nvm_eeprom_write_byte>
    158c:	08 c0       	rjmp	.+16     	; 0x159e <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 76) {
    158e:	80 91 10 20 	lds	r24, 0x2010
    1592:	8d 34       	cpi	r24, 0x4D	; 77
    1594:	20 f4       	brcc	.+8      	; 0x159e <__vector_40+0x318>
				nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	84 e5       	ldi	r24, 0x54	; 84
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	4b d5       	rcall	.+2710   	; 0x2034 <nvm_eeprom_write_byte>
			}
			nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	85 e5       	ldi	r24, 0x55	; 85
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	47 d5       	rcall	.+2702   	; 0x2034 <nvm_eeprom_write_byte>
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_GET_MTCH:
			send_mtch_update_status();
    15a8:	03 d1       	rcall	.+518    	; 0x17b0 <send_mtch_update_status>
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <__vector_40+0x328>
			break;
			
		case UART_SET_RESTART:
			while(1) {barrier();}
    15ac:	ff cf       	rjmp	.-2      	; 0x15ac <__vector_40+0x326>
	{
	interpret_message();
          errflag=0;
	}
	
	uart_done_flag = true;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 93 39 20 	sts	0x2039, r24
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <__vector_40+0x33c>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    15b6:	80 91 0e 20 	lds	r24, 0x200E
    15ba:	57 de       	rcall	.-850    	; 0x126a <uartCmdValid>
    15bc:	81 11       	cpse	r24, r1
    15be:	9d ce       	rjmp	.-710    	; 0x12fa <__vector_40+0x74>
    15c0:	f6 cf       	rjmp	.-20     	; 0x15ae <__vector_40+0x328>
			usart_putchar(&USARTD0, buffer_data[0]);
			usart_putchar(&USARTD0, count_uart);
		}
		}
	*/
}
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
	for (int i = 0; i < len; i++){
    15f0:	61 15       	cp	r22, r1
    15f2:	71 05       	cpc	r23, r1
    15f4:	61 f0       	breq	.+24     	; 0x160e <uart_send_bytes+0x26>
    15f6:	8c 01       	movw	r16, r24
    15f8:	ec 01       	movw	r28, r24
    15fa:	06 0f       	add	r16, r22
    15fc:	17 1f       	adc	r17, r23
		usart_putchar(&USARTD0, byte_array[i]);
    15fe:	69 91       	ld	r22, Y+
    1600:	80 ec       	ldi	r24, 0xC0	; 192
    1602:	99 e0       	ldi	r25, 0x09	; 9
    1604:	0e 94 2d 14 	call	0x285a	; 0x285a <usart_putchar>
	*/
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    1608:	c0 17       	cp	r28, r16
    160a:	d1 07       	cpc	r29, r17
    160c:	c1 f7       	brne	.-16     	; 0x15fe <uart_send_bytes+0x16>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <ischarging>:
	}
	/* If visualization wasn't on then load solid colors that are saved including no color saved */
	else 
	{
		fht_flag = false;
		restore_led_from_eeprom();
    1618:	80 91 e8 07 	lds	r24, 0x07E8
    161c:	86 95       	lsr	r24
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	08 95       	ret

00001622 <twinkle>:
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	f9 01       	movw	r30, r18
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	e4 57       	subi	r30, 0x74	; 116
    1632:	ff 4d       	sbci	r31, 0xDF	; 223
    1634:	80 83       	st	Z, r24
    1636:	61 83       	std	Z+1, r22	; 0x01
    1638:	42 83       	std	Z+2, r20	; 0x02
    163a:	2f 5f       	subi	r18, 0xFF	; 255
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	26 30       	cpi	r18, 0x06	; 6
    1640:	31 05       	cpc	r19, r1
    1642:	89 f7       	brne	.-30     	; 0x1626 <twinkle+0x4>
    1644:	66 e0       	ldi	r22, 0x06	; 6
    1646:	8c e8       	ldi	r24, 0x8C	; 140
    1648:	90 e2       	ldi	r25, 0x20	; 32
    164a:	61 c2       	rjmp	.+1218   	; 0x1b0e <set_flash_ws2812>
    164c:	08 95       	ret

0000164e <rainbow>:
    164e:	ec e8       	ldi	r30, 0x8C	; 140
    1650:	f0 e2       	ldi	r31, 0x20	; 32
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	11 82       	std	Z+1, r1	; 0x01
    1658:	12 82       	std	Z+2, r1	; 0x02
    165a:	13 82       	std	Z+3, r1	; 0x03
    165c:	84 83       	std	Z+4, r24	; 0x04
    165e:	15 82       	std	Z+5, r1	; 0x05
    1660:	16 82       	std	Z+6, r1	; 0x06
    1662:	17 82       	std	Z+7, r1	; 0x07
    1664:	80 87       	std	Z+8, r24	; 0x08
    1666:	81 87       	std	Z+9, r24	; 0x09
    1668:	12 86       	std	Z+10, r1	; 0x0a
    166a:	13 86       	std	Z+11, r1	; 0x0b
    166c:	14 86       	std	Z+12, r1	; 0x0c
    166e:	85 87       	std	Z+13, r24	; 0x0d
    1670:	16 86       	std	Z+14, r1	; 0x0e
    1672:	17 86       	std	Z+15, r1	; 0x0f
    1674:	10 8a       	std	Z+16, r1	; 0x10
    1676:	81 8b       	std	Z+17, r24	; 0x11
    1678:	66 e0       	ldi	r22, 0x06	; 6
    167a:	cf 01       	movw	r24, r30
    167c:	48 c2       	rjmp	.+1168   	; 0x1b0e <set_flash_ws2812>
    167e:	08 95       	ret

00001680 <clear_led>:
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	e8 2f       	mov	r30, r24
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	9f 01       	movw	r18, r30
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	e2 0f       	add	r30, r18
    168e:	f3 1f       	adc	r31, r19
    1690:	e4 57       	subi	r30, 0x74	; 116
    1692:	ff 4d       	sbci	r31, 0xDF	; 223
    1694:	10 82       	st	Z, r1
    1696:	11 82       	std	Z+1, r1	; 0x01
    1698:	12 82       	std	Z+2, r1	; 0x02
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	86 30       	cpi	r24, 0x06	; 6
    169e:	89 f7       	brne	.-30     	; 0x1682 <clear_led+0x2>
    16a0:	66 e0       	ldi	r22, 0x06	; 6
    16a2:	8c e8       	ldi	r24, 0x8C	; 140
    16a4:	90 e2       	ldi	r25, 0x20	; 32
    16a6:	33 c2       	rjmp	.+1126   	; 0x1b0e <set_flash_ws2812>
    16a8:	08 95       	ret

000016aa <__vector_35>:
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	80 93 6c 06 	sts	0x066C, r24
    16d2:	d6 df       	rcall	.-84     	; 0x1680 <clear_led>
    16d4:	82 e1       	ldi	r24, 0x12	; 18
    16d6:	97 e2       	ldi	r25, 0x27	; 39
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <__vector_35+0x2e>
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <send_response>:
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	00 d0       	rcall	.+0      	; 0x1704 <send_response+0x6>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	6a 83       	std	Y+2, r22	; 0x02
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	69 df       	rcall	.-302    	; 0x15e8 <uart_send_bytes>
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <send_light_data>:
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	00 d0       	rcall	.+0      	; 0x1726 <send_light_data+0x6>
    1726:	1f 92       	push	r1
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	90 91 3e 20 	lds	r25, 0x203E
    1730:	80 91 3f 20 	lds	r24, 0x203F
    1734:	9b 83       	std	Y+3, r25	; 0x03
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	8d e4       	ldi	r24, 0x4D	; 77
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	63 e0       	ldi	r22, 0x03	; 3
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	ce 01       	movw	r24, r28
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	51 df       	rcall	.-350    	; 0x15e8 <uart_send_bytes>
    1746:	23 96       	adiw	r28, 0x03	; 3
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <send_battery_data>:
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	00 d0       	rcall	.+0      	; 0x1758 <send_battery_data+0x6>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	80 91 3c 20 	lds	r24, 0x203C
    1760:	90 91 3d 20 	lds	r25, 0x203D
    1764:	6a e0       	ldi	r22, 0x0A	; 10
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__divmodhi4>
    176c:	6a 83       	std	Y+2, r22	; 0x02
    176e:	82 e4       	ldi	r24, 0x42	; 66
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	62 e0       	ldi	r22, 0x02	; 2
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	36 df       	rcall	.-404    	; 0x15e8 <uart_send_bytes>
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <send_charging_data>:
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	00 d0       	rcall	.+0      	; 0x178c <send_charging_data+0x6>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	19 82       	std	Y+1, r1	; 0x01
    1792:	1a 82       	std	Y+2, r1	; 0x02
    1794:	41 df       	rcall	.-382    	; 0x1618 <ischarging>
    1796:	8a 83       	std	Y+2, r24	; 0x02
    1798:	87 e4       	ldi	r24, 0x47	; 71
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	21 df       	rcall	.-446    	; 0x15e8 <uart_send_bytes>
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <send_mtch_update_status>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <send_mtch_update_status+0x6>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	19 82       	std	Y+1, r1	; 0x01
    17bc:	1a 82       	std	Y+2, r1	; 0x02
    17be:	85 e5       	ldi	r24, 0x55	; 85
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	13 d4       	rcall	.+2086   	; 0x1fea <nvm_eeprom_read_byte>
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	88 e4       	ldi	r24, 0x48	; 72
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	0a df       	rcall	.-492    	; 0x15e8 <uart_send_bytes>
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <send_color_data>:
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	2a 97       	sbiw	r28, 0x0a	; 10
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	fe 01       	movw	r30, r28
    17ee:	31 96       	adiw	r30, 0x01	; 1
    17f0:	8a e0       	ldi	r24, 0x0A	; 10
    17f2:	df 01       	movw	r26, r30
    17f4:	1d 92       	st	X+, r1
    17f6:	8a 95       	dec	r24
    17f8:	e9 f7       	brne	.-6      	; 0x17f4 <send_color_data+0x16>
    17fa:	83 e6       	ldi	r24, 0x63	; 99
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	31 96       	adiw	r30, 0x01	; 1
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	dc 01       	movw	r26, r24
    1806:	ab 5f       	subi	r26, 0xFB	; 251
    1808:	bf 4d       	sbci	r27, 0xDF	; 223
    180a:	2c 91       	ld	r18, X
    180c:	21 93       	st	Z+, r18
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	89 30       	cpi	r24, 0x09	; 9
    1812:	91 05       	cpc	r25, r1
    1814:	b9 f7       	brne	.-18     	; 0x1804 <send_color_data+0x26>
    1816:	6a e0       	ldi	r22, 0x0A	; 10
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	ce 01       	movw	r24, r28
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	e4 de       	rcall	.-568    	; 0x15e8 <uart_send_bytes>
    1820:	2a 96       	adiw	r28, 0x0a	; 10
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <send_pulse_data>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 d0       	rcall	.+0      	; 0x1832 <send_pulse_data+0x6>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	1a 82       	std	Y+2, r1	; 0x02
    183a:	a7 dc       	rcall	.-1714   	; 0x118a <get_pulse_state>
    183c:	8a 83       	std	Y+2, r24	; 0x02
    183e:	80 e7       	ldi	r24, 0x70	; 112
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	ce de       	rcall	.-612    	; 0x15e8 <uart_send_bytes>
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <restore_led_from_eeprom>:
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	c5 d3       	rcall	.+1930   	; 0x1fea <nvm_eeprom_read_byte>
    1860:	c5 e0       	ldi	r28, 0x05	; 5
    1862:	d0 e2       	ldi	r29, 0x20	; 32
    1864:	88 83       	st	Y, r24
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	bf d3       	rcall	.+1918   	; 0x1fea <nvm_eeprom_read_byte>
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	bb d3       	rcall	.+1910   	; 0x1fea <nvm_eeprom_read_byte>
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b7 d3       	rcall	.+1902   	; 0x1fea <nvm_eeprom_read_byte>
    187c:	8b 83       	std	Y+3, r24	; 0x03
    187e:	85 e0       	ldi	r24, 0x05	; 5
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	b3 d3       	rcall	.+1894   	; 0x1fea <nvm_eeprom_read_byte>
    1884:	8c 83       	std	Y+4, r24	; 0x04
    1886:	86 e0       	ldi	r24, 0x06	; 6
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	af d3       	rcall	.+1886   	; 0x1fea <nvm_eeprom_read_byte>
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	ab d3       	rcall	.+1878   	; 0x1fea <nvm_eeprom_read_byte>
    1894:	8e 83       	std	Y+6, r24	; 0x06
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a7 d3       	rcall	.+1870   	; 0x1fea <nvm_eeprom_read_byte>
    189c:	8f 83       	std	Y+7, r24	; 0x07
    189e:	89 e0       	ldi	r24, 0x09	; 9
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a3 d3       	rcall	.+1862   	; 0x1fea <nvm_eeprom_read_byte>
    18a4:	88 87       	std	Y+8, r24	; 0x08
    18a6:	12 dc       	rcall	.-2012   	; 0x10cc <led_set_from_colors>
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <wdt_kick>:
	}
}

void wdt_kick(void) {
	if (flag_timerd5) {
    18ae:	80 91 73 20 	lds	r24, 0x2073
    18b2:	88 23       	and	r24, r24
    18b4:	19 f0       	breq	.+6      	; 0x18bc <wdt_kick+0xe>
		flag_timerd5 = false;
    18b6:	10 92 73 20 	sts	0x2073, r1
		wdt_reset();
    18ba:	a8 95       	wdr
    18bc:	08 95       	ret

000018be <init_ws2812>:
    18be:	98 2f       	mov	r25, r24
    18c0:	97 70       	andi	r25, 0x07	; 7
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <init_ws2812+0xe>
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	9a 95       	dec	r25
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <init_ws2812+0xa>
    18d0:	86 95       	lsr	r24
    18d2:	86 95       	lsr	r24
    18d4:	86 95       	lsr	r24
    18d6:	20 e2       	ldi	r18, 0x20	; 32
    18d8:	82 9f       	mul	r24, r18
    18da:	c0 01       	movw	r24, r0
    18dc:	11 24       	eor	r1, r1
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	9a 5f       	subi	r25, 0xFA	; 250
    18e4:	26 c3       	rjmp	.+1612   	; 0x1f32 <ioport_configure_port_pin>
    18e6:	08 95       	ret

000018e8 <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    18e8:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	2c 91       	ld	r18, X
    18ee:	11 97       	sbiw	r26, 0x01	; 1
    18f0:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    18f2:	e0 e4       	ldi	r30, 0x40	; 64
    18f4:	f6 e0       	ldi	r31, 0x06	; 6
    18f6:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    18f8:	22 23       	and	r18, r18
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <set_led_ws2812+0x16>
    18fc:	28 c0       	rjmp	.+80     	; 0x194e <set_led_ws2812+0x66>
    18fe:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1930:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    194a:	00 00       	nop
    194c:	26 c0       	rjmp	.+76     	; 0x199a <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    194e:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1964:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1966:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1998:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    199a:	22 0f       	add	r18, r18
    199c:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    199e:	09 f0       	breq	.+2      	; 0x19a2 <set_led_ws2812+0xba>
    19a0:	ab cf       	rjmp	.-170    	; 0x18f8 <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    19a2:	2c 91       	ld	r18, X
    19a4:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    19a6:	e0 e4       	ldi	r30, 0x40	; 64
    19a8:	f6 e0       	ldi	r31, 0x06	; 6
    19aa:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    19ac:	22 23       	and	r18, r18
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <set_led_ws2812+0xca>
    19b0:	28 c0       	rjmp	.+80     	; 0x1a02 <set_led_ws2812+0x11a>
    19b2:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    19e4:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    19fe:	00 00       	nop
    1a00:	26 c0       	rjmp	.+76     	; 0x1a4e <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1a02:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1a18:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1a1a:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1a4c:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    1a4e:	22 0f       	add	r18, r18
    1a50:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <set_led_ws2812+0x16e>
    1a54:	ab cf       	rjmp	.-170    	; 0x19ac <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	9c 91       	ld	r25, X
    1a5a:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1a5c:	e0 e4       	ldi	r30, 0x40	; 64
    1a5e:	f6 e0       	ldi	r31, 0x06	; 6
    1a60:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    1a62:	99 23       	and	r25, r25
    1a64:	0c f0       	brlt	.+2      	; 0x1a68 <set_led_ws2812+0x180>
    1a66:	28 c0       	rjmp	.+80     	; 0x1ab8 <set_led_ws2812+0x1d0>
    1a68:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1a9a:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1ab4:	00 00       	nop
    1ab6:	26 c0       	rjmp	.+76     	; 0x1b04 <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1ab8:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1ace:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1ad0:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1b02:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    1b04:	99 0f       	add	r25, r25
    1b06:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <set_led_ws2812+0x224>
    1b0a:	ab cf       	rjmp	.-170    	; 0x1a62 <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    1b0c:	08 95       	ret

00001b0e <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    1b16:	66 23       	and	r22, r22
    1b18:	51 f0       	breq	.+20     	; 0x1b2e <set_flash_ws2812+0x20>
    1b1a:	06 2f       	mov	r16, r22
    1b1c:	c8 2f       	mov	r28, r24
    1b1e:	d9 2f       	mov	r29, r25
    1b20:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    1b22:	ce 01       	movw	r24, r28
    1b24:	e1 de       	rcall	.-574    	; 0x18e8 <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    1b26:	1f 5f       	subi	r17, 0xFF	; 255
    1b28:	23 96       	adiw	r28, 0x03	; 3
    1b2a:	10 13       	cpse	r17, r16
    1b2c:	fa cf       	rjmp	.-12     	; 0x1b22 <set_flash_ws2812+0x14>
    1b2e:	80 e4       	ldi	r24, 0x40	; 64
    1b30:	80 93 46 06 	sts	0x0646, r24
    1b34:	89 ef       	ldi	r24, 0xF9	; 249
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <set_flash_ws2812+0x2a>
    1b3c:	00 c0       	rjmp	.+0      	; 0x1b3e <set_flash_ws2812+0x30>
    1b3e:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <main>:
	set_flash_ws2812(m_led_struct, 6);
}


int main(void)
{
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	2a 97       	sbiw	r28, 0x0a	; 10
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	de bf       	out	0x3e, r29	; 62
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    1b58:	ae d1       	rcall	.+860    	; 0x1eb6 <sysclk_init>

	
	nvm_eeprom_write_byte(10, 0x07);
    1b5a:	67 e0       	ldi	r22, 0x07	; 7
    1b5c:	8a e0       	ldi	r24, 0x0A	; 10
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	69 d2       	rcall	.+1234   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(11, 0x05);
    1b62:	65 e0       	ldi	r22, 0x05	; 5
    1b64:	8b e0       	ldi	r24, 0x0B	; 11
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	65 d2       	rcall	.+1226   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(12, 0x92);
    1b6a:	62 e9       	ldi	r22, 0x92	; 146
    1b6c:	8c e0       	ldi	r24, 0x0C	; 12
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	61 d2       	rcall	.+1218   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(13, 0x24);
    1b72:	64 e2       	ldi	r22, 0x24	; 36
    1b74:	8d e0       	ldi	r24, 0x0D	; 13
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	5d d2       	rcall	.+1210   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(14, 0x33);
    1b7a:	63 e3       	ldi	r22, 0x33	; 51
    1b7c:	8e e0       	ldi	r24, 0x0E	; 14
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	59 d2       	rcall	.+1202   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(15, 0x33);
    1b82:	63 e3       	ldi	r22, 0x33	; 51
    1b84:	8f e0       	ldi	r24, 0x0F	; 15
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	55 d2       	rcall	.+1194   	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(16, 0x05);
    1b8a:	65 e0       	ldi	r22, 0x05	; 5
    1b8c:	80 e1       	ldi	r24, 0x10	; 16
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	51 d2       	rcall	.+1186   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(17, 0x06);
    1b92:	66 e0       	ldi	r22, 0x06	; 6
    1b94:	81 e1       	ldi	r24, 0x11	; 17
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	4d d2       	rcall	.+1178   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(18, 0x07);
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	82 e1       	ldi	r24, 0x12	; 18
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	49 d2       	rcall	.+1170   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(19, 0x01);
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	83 e1       	ldi	r24, 0x13	; 19
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	45 d2       	rcall	.+1162   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(20, 0x04);
    1baa:	64 e0       	ldi	r22, 0x04	; 4
    1bac:	84 e1       	ldi	r24, 0x14	; 20
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	41 d2       	rcall	.+1154   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(21, 0x03);
    1bb2:	63 e0       	ldi	r22, 0x03	; 3
    1bb4:	85 e1       	ldi	r24, 0x15	; 21
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	3d d2       	rcall	.+1146   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(22, 0x02);
    1bba:	62 e0       	ldi	r22, 0x02	; 2
    1bbc:	86 e1       	ldi	r24, 0x16	; 22
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	39 d2       	rcall	.+1138   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(23, 0x01);
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	87 e1       	ldi	r24, 0x17	; 23
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	35 d2       	rcall	.+1130   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(24, 0x00);
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	88 e1       	ldi	r24, 0x18	; 24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	31 d2       	rcall	.+1122   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(25, 0x09);
    1bd2:	69 e0       	ldi	r22, 0x09	; 9
    1bd4:	89 e1       	ldi	r24, 0x19	; 25
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	2d d2       	rcall	.+1114   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(26, 0x0a);
    1bda:	6a e0       	ldi	r22, 0x0A	; 10
    1bdc:	8a e1       	ldi	r24, 0x1A	; 26
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	29 d2       	rcall	.+1106   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(27, 0x0b);
    1be2:	6b e0       	ldi	r22, 0x0B	; 11
    1be4:	8b e1       	ldi	r24, 0x1B	; 27
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	25 d2       	rcall	.+1098   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(28, 0x0c);
    1bea:	6c e0       	ldi	r22, 0x0C	; 12
    1bec:	8c e1       	ldi	r24, 0x1C	; 28
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	21 d2       	rcall	.+1090   	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(29, 0x03);
    1bf2:	63 e0       	ldi	r22, 0x03	; 3
    1bf4:	8d e1       	ldi	r24, 0x1D	; 29
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	1d d2       	rcall	.+1082   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(30, 0x06);
    1bfa:	66 e0       	ldi	r22, 0x06	; 6
    1bfc:	8e e1       	ldi	r24, 0x1E	; 30
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	19 d2       	rcall	.+1074   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(31, 0x0d);
    1c02:	6d e0       	ldi	r22, 0x0D	; 13
    1c04:	8f e1       	ldi	r24, 0x1F	; 31
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	15 d2       	rcall	.+1066   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(32, 0x04);
    1c0a:	64 e0       	ldi	r22, 0x04	; 4
    1c0c:	80 e2       	ldi	r24, 0x20	; 32
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	11 d2       	rcall	.+1058   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(33, 0x02);
    1c12:	62 e0       	ldi	r22, 0x02	; 2
    1c14:	81 e2       	ldi	r24, 0x21	; 33
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0d d2       	rcall	.+1050   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(34, 0x1e);
    1c1a:	6e e1       	ldi	r22, 0x1E	; 30
    1c1c:	82 e2       	ldi	r24, 0x22	; 34
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	09 d2       	rcall	.+1042   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(35, 0x1d);
    1c22:	6d e1       	ldi	r22, 0x1D	; 29
    1c24:	83 e2       	ldi	r24, 0x23	; 35
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	05 d2       	rcall	.+1034   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(36, 0x1c);
    1c2a:	6c e1       	ldi	r22, 0x1C	; 28
    1c2c:	84 e2       	ldi	r24, 0x24	; 36
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	01 d2       	rcall	.+1026   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(37, 0x07);
    1c32:	67 e0       	ldi	r22, 0x07	; 7
    1c34:	85 e2       	ldi	r24, 0x25	; 37
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	fd d1       	rcall	.+1018   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(38, 0x0e);
    1c3a:	6e e0       	ldi	r22, 0x0E	; 14
    1c3c:	86 e2       	ldi	r24, 0x26	; 38
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	f9 d1       	rcall	.+1010   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(39, 0x0f);
    1c42:	6f e0       	ldi	r22, 0x0F	; 15
    1c44:	87 e2       	ldi	r24, 0x27	; 39
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	f5 d1       	rcall	.+1002   	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(40, 0x10);
    1c4a:	60 e1       	ldi	r22, 0x10	; 16
    1c4c:	88 e2       	ldi	r24, 0x28	; 40
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	f1 d1       	rcall	.+994    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(41, 0x05);
    1c52:	65 e0       	ldi	r22, 0x05	; 5
    1c54:	89 e2       	ldi	r24, 0x29	; 41
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	ed d1       	rcall	.+986    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(42, 0x08);
    1c5a:	68 e0       	ldi	r22, 0x08	; 8
    1c5c:	8a e2       	ldi	r24, 0x2A	; 42
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	e9 d1       	rcall	.+978    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(43, 0x22);
    1c62:	62 e2       	ldi	r22, 0x22	; 34
    1c64:	8b e2       	ldi	r24, 0x2B	; 43
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	e5 d1       	rcall	.+970    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(44, 0x21);
    1c6a:	61 e2       	ldi	r22, 0x21	; 33
    1c6c:	8c e2       	ldi	r24, 0x2C	; 44
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	e1 d1       	rcall	.+962    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(45, 0x20);
    1c72:	60 e2       	ldi	r22, 0x20	; 32
    1c74:	8d e2       	ldi	r24, 0x2D	; 45
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	dd d1       	rcall	.+954    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(46, 0x1f);
    1c7a:	6f e1       	ldi	r22, 0x1F	; 31
    1c7c:	8e e2       	ldi	r24, 0x2E	; 46
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	d9 d1       	rcall	.+946    	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(47, 0x07);
    1c82:	67 e0       	ldi	r22, 0x07	; 7
    1c84:	8f e2       	ldi	r24, 0x2F	; 47
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	d5 d1       	rcall	.+938    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(48, 0x1d);
    1c8a:	6d e1       	ldi	r22, 0x1D	; 29
    1c8c:	80 e3       	ldi	r24, 0x30	; 48
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	d1 d1       	rcall	.+930    	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(49, 0x0a);
    1c92:	6a e0       	ldi	r22, 0x0A	; 10
    1c94:	81 e3       	ldi	r24, 0x31	; 49
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	cd d1       	rcall	.+922    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(50, 0x27);
    1c9a:	67 e2       	ldi	r22, 0x27	; 39
    1c9c:	82 e3       	ldi	r24, 0x32	; 50
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	c9 d1       	rcall	.+914    	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(51, 0x01);
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	83 e3       	ldi	r24, 0x33	; 51
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	c5 d1       	rcall	.+906    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(52, 0x08);
    1caa:	68 e0       	ldi	r22, 0x08	; 8
    1cac:	84 e3       	ldi	r24, 0x34	; 52
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	c1 d1       	rcall	.+898    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(53, 0x96);
    1cb2:	66 e9       	ldi	r22, 0x96	; 150
    1cb4:	85 e3       	ldi	r24, 0x35	; 53
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	bd d1       	rcall	.+890    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(54, 0x03);
    1cba:	63 e0       	ldi	r22, 0x03	; 3
    1cbc:	86 e3       	ldi	r24, 0x36	; 54
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	b9 d1       	rcall	.+882    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(55, 0x03);
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	87 e3       	ldi	r24, 0x37	; 55
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	b5 d1       	rcall	.+874    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(56, 0x00);
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	88 e3       	ldi	r24, 0x38	; 56
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	b1 d1       	rcall	.+866    	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(57, 0xA0);
    1cd2:	60 ea       	ldi	r22, 0xA0	; 160
    1cd4:	89 e3       	ldi	r24, 0x39	; 57
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	ad d1       	rcall	.+858    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(58, 0x96);
    1cda:	66 e9       	ldi	r22, 0x96	; 150
    1cdc:	8a e3       	ldi	r24, 0x3A	; 58
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a9 d1       	rcall	.+850    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(59, 0x96);
    1ce2:	66 e9       	ldi	r22, 0x96	; 150
    1ce4:	8b e3       	ldi	r24, 0x3B	; 59
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a5 d1       	rcall	.+842    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(60, 0x46);
    1cea:	66 e4       	ldi	r22, 0x46	; 70
    1cec:	8c e3       	ldi	r24, 0x3C	; 60
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a1 d1       	rcall	.+834    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(61, 0xc8);
    1cf2:	68 ec       	ldi	r22, 0xC8	; 200
    1cf4:	8d e3       	ldi	r24, 0x3D	; 61
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9d d1       	rcall	.+826    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(62, 0x00);
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	8e e3       	ldi	r24, 0x3E	; 62
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	99 d1       	rcall	.+818    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(63, 0xf4);
    1d02:	64 ef       	ldi	r22, 0xF4	; 244
    1d04:	8f e3       	ldi	r24, 0x3F	; 63
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	95 d1       	rcall	.+810    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(64, 0x01);
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	80 e4       	ldi	r24, 0x40	; 64
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	91 d1       	rcall	.+802    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(65, 0x78);
    1d12:	68 e7       	ldi	r22, 0x78	; 120
    1d14:	81 e4       	ldi	r24, 0x41	; 65
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	8d d1       	rcall	.+794    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(66, 0x03);
    1d1a:	63 e0       	ldi	r22, 0x03	; 3
    1d1c:	82 e4       	ldi	r24, 0x42	; 66
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	89 d1       	rcall	.+786    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(67, 0x5e);
    1d22:	6e e5       	ldi	r22, 0x5E	; 94
    1d24:	83 e4       	ldi	r24, 0x43	; 67
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	85 d1       	rcall	.+778    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(68, 0x01);
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	84 e4       	ldi	r24, 0x44	; 68
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	81 d1       	rcall	.+770    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(69, 0x80);
    1d32:	60 e8       	ldi	r22, 0x80	; 128
    1d34:	85 e4       	ldi	r24, 0x45	; 69
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	7d d1       	rcall	.+762    	; 0x2034 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(70, 0x40);
    1d3a:	60 e4       	ldi	r22, 0x40	; 64
    1d3c:	86 e4       	ldi	r24, 0x46	; 70
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	79 d1       	rcall	.+754    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(71, 0x1f);
    1d42:	6f e1       	ldi	r22, 0x1F	; 31
    1d44:	87 e4       	ldi	r24, 0x47	; 71
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	75 d1       	rcall	.+746    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(72, 0x00);
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	88 e4       	ldi	r24, 0x48	; 72
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	71 d1       	rcall	.+738    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(73, 0x00);
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	89 e4       	ldi	r24, 0x49	; 73
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	6d d1       	rcall	.+730    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(74, 0x01);
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	8a e4       	ldi	r24, 0x4A	; 74
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	69 d1       	rcall	.+722    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(75, 0x81);
    1d62:	61 e8       	ldi	r22, 0x81	; 129
    1d64:	8b e4       	ldi	r24, 0x4B	; 75
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	65 d1       	rcall	.+714    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(76, 0x01);
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	8c e4       	ldi	r24, 0x4C	; 76
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	61 d1       	rcall	.+706    	; 0x2034 <nvm_eeprom_write_byte>
	
	
		/* Charging and watchdog timer - Using two compare channels with single timer */
	#ifdef ENABLE_WDT
		wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    1d72:	88 e0       	ldi	r24, 0x08	; 8
    1d74:	0e 94 ae 01 	call	0x35c	; 0x35c <wdt_set_timeout_period>
		wdt_reset();
    1d78:	a8 95       	wdr
		wdt_enable();
    1d7a:	0e 94 c2 01 	call	0x384	; 0x384 <wdt_enable>
		init_timerd5();
    1d7e:	78 d9       	rcall	.-3344   	; 0x1070 <init_timerd5>
	#endif
	
	tc45_disable(&TCC4);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	98 e0       	ldi	r25, 0x08	; 8
    1d84:	ec d3       	rcall	.+2008   	; 0x255e <tc45_disable>
	tc45_enable(&TCC5);
    1d86:	80 e4       	ldi	r24, 0x40	; 64
    1d88:	98 e0       	ldi	r25, 0x08	; 8
    1d8a:	b7 d3       	rcall	.+1902   	; 0x24fa <tc45_enable>
	
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    1d8c:	86 e1       	ldi	r24, 0x16	; 22
    1d8e:	97 dd       	rcall	.-1234   	; 0x18be <init_ws2812>
	clear_led();
    1d90:	77 dc       	rcall	.-1810   	; 0x1680 <clear_led>
	
	// init the mtch 6301
	init_mtchio();
    1d92:	0e 94 16 02 	call	0x42c	; 0x42c <init_mtchio>
	init_i2c();
    1d96:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <init_i2c>
	init_mtch6301();
    1d9a:	0e 94 00 02 	call	0x400	; 0x400 <init_mtch6301>
	
	write_mtch_settings();
    1d9e:	0e 94 b7 02 	call	0x56e	; 0x56e <write_mtch_settings>
	// restore the state stored in the eeprom
	// restore_state_eep();
	
	
	
	volatile uint8_t eep0 = EEPROM_GENERAL_UPDATE_BOOL	;
    1da2:	8d e4       	ldi	r24, 0x4D	; 77
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	21 d1       	rcall	.+578    	; 0x1fea <nvm_eeprom_read_byte>
    1da8:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t eep1 = EEPROM_GENERAL_UPDATE_BOOL	;
    1daa:	8d e4       	ldi	r24, 0x4D	; 77
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	1d d1       	rcall	.+570    	; 0x1fea <nvm_eeprom_read_byte>
    1db0:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t eep2 = EEPROM_RXMAP_UPDATE_BOOL	;
    1db2:	8e e4       	ldi	r24, 0x4E	; 78
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	19 d1       	rcall	.+562    	; 0x1fea <nvm_eeprom_read_byte>
    1db8:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t eep3 = EEPROM_TXMAP_UPDATE_BOOL	;
    1dba:	8f e4       	ldi	r24, 0x4F	; 79
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	15 d1       	rcall	.+554    	; 0x1fea <nvm_eeprom_read_byte>
    1dc0:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t eep4 = EEPROM_SELF_UPDATE_BOOL		;
    1dc2:	80 e5       	ldi	r24, 0x50	; 80
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	11 d1       	rcall	.+546    	; 0x1fea <nvm_eeprom_read_byte>
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8_t eep5 = EEPROM_MUTUAL_UPDATE_BOOL	;
    1dca:	81 e5       	ldi	r24, 0x51	; 81
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0d d1       	rcall	.+538    	; 0x1fea <nvm_eeprom_read_byte>
    1dd0:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t eep6 = EEPROM_DECODING_UPDATE_BOOL	;
    1dd2:	82 e5       	ldi	r24, 0x52	; 82
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	09 d1       	rcall	.+530    	; 0x1fea <nvm_eeprom_read_byte>
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
	volatile uint8_t eep7 = EEPROM_GESTURES_UPDATE_BOOL	;
    1dda:	83 e5       	ldi	r24, 0x53	; 83
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	05 d1       	rcall	.+522    	; 0x1fea <nvm_eeprom_read_byte>
    1de0:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t eep8 = EEPROM_CONFIG_UPDATE_BOOL	;
    1de2:	84 e5       	ldi	r24, 0x54	; 84
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	01 d1       	rcall	.+514    	; 0x1fea <nvm_eeprom_read_byte>
    1de8:	89 87       	std	Y+9, r24	; 0x09
	volatile uint8_t eep9 = EEPROM_MTCH_UPDATE_BOOL		;
    1dea:	85 e5       	ldi	r24, 0x55	; 85
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	fd d0       	rcall	.+506    	; 0x1fea <nvm_eeprom_read_byte>
    1df0:	8a 87       	std	Y+10, r24	; 0x0a
	
	
	nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, 1);
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	8d e4       	ldi	r24, 0x4D	; 77
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	1d d1       	rcall	.+570    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, 1);
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	8e e4       	ldi	r24, 0x4E	; 78
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	19 d1       	rcall	.+562    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, 1);
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	8f e4       	ldi	r24, 0x4F	; 79
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	15 d1       	rcall	.+554    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_SELF, 1);
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	80 e5       	ldi	r24, 0x50	; 80
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	11 d1       	rcall	.+546    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, 1);
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	81 e5       	ldi	r24, 0x51	; 81
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0d d1       	rcall	.+538    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, 0);
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	82 e5       	ldi	r24, 0x52	; 82
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	09 d1       	rcall	.+530    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 0);
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	83 e5       	ldi	r24, 0x53	; 83
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	05 d1       	rcall	.+522    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	84 e5       	ldi	r24, 0x54	; 84
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	01 d1       	rcall	.+514    	; 0x2034 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	85 e5       	ldi	r24, 0x55	; 85
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	fd d0       	rcall	.+506    	; 0x2034 <nvm_eeprom_write_byte>
	
	
	restore_led_from_eeprom();
    1e3a:	0d dd       	rcall	.-1510   	; 0x1856 <restore_led_from_eeprom>

	*/
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		if (eep9) {
    1e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3e:	88 23       	and	r24, r24
    1e40:	d9 f0       	breq	.+54     	; 0x1e78 <main+0x32e>
			twinkle(255, 0, 0);
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	ec db       	rcall	.-2088   	; 0x1622 <twinkle>
    1e4a:	2f ef       	ldi	r18, 0xFF	; 255
    1e4c:	88 e0       	ldi	r24, 0x08	; 8
    1e4e:	9d e3       	ldi	r25, 0x3D	; 61
    1e50:	21 50       	subi	r18, 0x01	; 1
    1e52:	80 40       	sbci	r24, 0x00	; 0
    1e54:	90 40       	sbci	r25, 0x00	; 0
    1e56:	e1 f7       	brne	.-8      	; 0x1e50 <main+0x306>
    1e58:	00 c0       	rjmp	.+0      	; 0x1e5a <main+0x310>
    1e5a:	00 00       	nop
			_delay_ms(20000);
			twinkle(0, 0, 0);
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	df db       	rcall	.-2114   	; 0x1622 <twinkle>
    1e64:	2f ef       	ldi	r18, 0xFF	; 255
    1e66:	88 e0       	ldi	r24, 0x08	; 8
    1e68:	9d e3       	ldi	r25, 0x3D	; 61
    1e6a:	21 50       	subi	r18, 0x01	; 1
    1e6c:	80 40       	sbci	r24, 0x00	; 0
    1e6e:	90 40       	sbci	r25, 0x00	; 0
    1e70:	e1 f7       	brne	.-8      	; 0x1e6a <main+0x320>
    1e72:	00 c0       	rjmp	.+0      	; 0x1e74 <main+0x32a>
    1e74:	00 00       	nop
    1e76:	17 c0       	rjmp	.+46     	; 0x1ea6 <main+0x35c>
			_delay_ms(20000);
		}
		else {
			rainbow();
    1e78:	ea db       	rcall	.-2092   	; 0x164e <rainbow>
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	88 e0       	ldi	r24, 0x08	; 8
    1e7e:	9d e3       	ldi	r25, 0x3D	; 61
    1e80:	21 50       	subi	r18, 0x01	; 1
    1e82:	80 40       	sbci	r24, 0x00	; 0
    1e84:	90 40       	sbci	r25, 0x00	; 0
    1e86:	e1 f7       	brne	.-8      	; 0x1e80 <main+0x336>
    1e88:	00 c0       	rjmp	.+0      	; 0x1e8a <main+0x340>
    1e8a:	00 00       	nop
			_delay_ms(20000);
			twinkle(0, 255, 0);
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	6f ef       	ldi	r22, 0xFF	; 255
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	c7 db       	rcall	.-2162   	; 0x1622 <twinkle>
    1e94:	2f ef       	ldi	r18, 0xFF	; 255
    1e96:	88 e0       	ldi	r24, 0x08	; 8
    1e98:	9d e3       	ldi	r25, 0x3D	; 61
    1e9a:	21 50       	subi	r18, 0x01	; 1
    1e9c:	80 40       	sbci	r24, 0x00	; 0
    1e9e:	90 40       	sbci	r25, 0x00	; 0
    1ea0:	e1 f7       	brne	.-8      	; 0x1e9a <main+0x350>
    1ea2:	00 c0       	rjmp	.+0      	; 0x1ea4 <main+0x35a>
    1ea4:	00 00       	nop
				}
			}
		}
*/
	#ifdef ENABLE_WDT
		if (flag_timerd5) {
    1ea6:	80 91 73 20 	lds	r24, 0x2073
    1eaa:	88 23       	and	r24, r24
    1eac:	39 f2       	breq	.-114    	; 0x1e3c <main+0x2f2>
			flag_timerd5 = false;
    1eae:	10 92 73 20 	sts	0x2073, r1
			wdt_reset(); 
    1eb2:	a8 95       	wdr
    1eb4:	c3 cf       	rjmp	.-122    	; 0x1e3c <main+0x2f2>

00001eb6 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	80 93 70 00 	sts	0x0070, r24
    1ebc:	80 93 71 00 	sts	0x0071, r24
    1ec0:	80 93 72 00 	sts	0x0072, r24
    1ec4:	80 93 73 00 	sts	0x0073, r24
    1ec8:	80 93 74 00 	sts	0x0074, r24
    1ecc:	80 93 75 00 	sts	0x0075, r24
    1ed0:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ed4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1ed6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1ed8:	e0 e5       	ldi	r30, 0x50	; 80
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	82 60       	ori	r24, 0x02	; 2
    1ee0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ee2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1ee4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1ee6:	81 ff       	sbrs	r24, 1
    1ee8:	fd cf       	rjmp	.-6      	; 0x1ee4 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	80 e4       	ldi	r24, 0x40	; 64
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	76 d0       	rcall	.+236    	; 0x1fde <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ef2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1ef4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1ef6:	e0 e5       	ldi	r30, 0x50	; 80
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8e 7f       	andi	r24, 0xFE	; 254
    1efe:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f00:	9f bf       	out	0x3f, r25	; 63
    1f02:	08 95       	ret

00001f04 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f04:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1f06:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f08:	e8 2f       	mov	r30, r24
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	e0 59       	subi	r30, 0x90	; 144
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 95       	com	r22
    1f12:	80 81       	ld	r24, Z
    1f14:	68 23       	and	r22, r24
    1f16:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f18:	9f bf       	out	0x3f, r25	; 63
    1f1a:	08 95       	ret

00001f1c <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f1c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1f1e:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1f20:	e8 2f       	mov	r30, r24
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	e0 59       	subi	r30, 0x90	; 144
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	68 2b       	or	r22, r24
    1f2c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f2e:	9f bf       	out	0x3f, r25	; 63
    1f30:	08 95       	ret

00001f32 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	fc 01       	movw	r30, r24
    1f38:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1f3e:	c6 2f       	mov	r28, r22
    1f40:	d0 e0       	ldi	r29, 0x00	; 0
    1f42:	de 01       	movw	r26, r28
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <ioport_configure_port_pin+0x1a>
    1f48:	b5 95       	asr	r27
    1f4a:	a7 95       	ror	r26
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <ioport_configure_port_pin+0x16>
    1f50:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f52:	50 83       	st	Z, r21
    1f54:	2f 5f       	subi	r18, 0xFF	; 255
    1f56:	3f 4f       	sbci	r19, 0xFF	; 255
    1f58:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1f5a:	28 30       	cpi	r18, 0x08	; 8
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	89 f7       	brne	.-30     	; 0x1f42 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1f60:	40 ff       	sbrs	r20, 0
    1f62:	0a c0       	rjmp	.+20     	; 0x1f78 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1f64:	41 ff       	sbrs	r20, 1
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1f68:	fc 01       	movw	r30, r24
    1f6a:	65 83       	std	Z+5, r22	; 0x05
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1f6e:	fc 01       	movw	r30, r24
    1f70:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1f72:	fc 01       	movw	r30, r24
    1f74:	61 83       	std	Z+1, r22	; 0x01
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1f78:	fc 01       	movw	r30, r24
    1f7a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	08 95       	ret

00001f82 <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	4f 93       	push	r20
    1f92:	5f 93       	push	r21
    1f94:	6f 93       	push	r22
    1f96:	7f 93       	push	r23
    1f98:	8f 93       	push	r24
    1f9a:	9f 93       	push	r25
    1f9c:	af 93       	push	r26
    1f9e:	bf 93       	push	r27
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1fa4:	40 91 24 02 	lds	r20, 0x0224
    1fa8:	50 91 25 02 	lds	r21, 0x0225
    1fac:	e0 91 a4 20 	lds	r30, 0x20A4
    1fb0:	f0 91 a5 20 	lds	r31, 0x20A5
    1fb4:	61 e0       	ldi	r22, 0x01	; 1
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	92 e0       	ldi	r25, 0x02	; 2
    1fba:	09 95       	icall
}
    1fbc:	ff 91       	pop	r31
    1fbe:	ef 91       	pop	r30
    1fc0:	bf 91       	pop	r27
    1fc2:	af 91       	pop	r26
    1fc4:	9f 91       	pop	r25
    1fc6:	8f 91       	pop	r24
    1fc8:	7f 91       	pop	r23
    1fca:	6f 91       	pop	r22
    1fcc:	5f 91       	pop	r21
    1fce:	4f 91       	pop	r20
    1fd0:	3f 91       	pop	r19
    1fd2:	2f 91       	pop	r18
    1fd4:	0f 90       	pop	r0
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	0f 90       	pop	r0
    1fda:	1f 90       	pop	r1
    1fdc:	18 95       	reti

00001fde <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1fde:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fe0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fe2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fe4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fe6:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fe8:	08 95       	ret

00001fea <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    1fea:	9c 01       	movw	r18, r24
    1fec:	e0 ec       	ldi	r30, 0xC0	; 192
    1fee:	f1 e0       	ldi	r31, 0x01	; 1
    1ff0:	97 85       	ldd	r25, Z+15	; 0x0f
    1ff2:	99 23       	and	r25, r25
    1ff4:	ec f3       	brlt	.-6      	; 0x1ff0 <nvm_eeprom_read_byte+0x6>
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	f0 5f       	subi	r31, 0xF0	; 240
    1ffa:	80 81       	ld	r24, Z
    1ffc:	08 95       	ret

00001ffe <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1ffe:	e0 ec       	ldi	r30, 0xC0	; 192
    2000:	f1 e0       	ldi	r31, 0x01	; 1
    2002:	87 85       	ldd	r24, Z+15	; 0x0f
    2004:	88 23       	and	r24, r24
    2006:	ec f3       	brlt	.-6      	; 0x2002 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    2008:	80 91 cf 01 	lds	r24, 0x01CF
    200c:	81 ff       	sbrs	r24, 1
    200e:	07 c0       	rjmp	.+14     	; 0x201e <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    2010:	86 e3       	ldi	r24, 0x36	; 54
    2012:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	8b ec       	ldi	r24, 0xCB	; 203
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	e0 cf       	rjmp	.-64     	; 0x1fde <ccp_write_io>
    201e:	08 95       	ret

00002020 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2020:	e0 ec       	ldi	r30, 0xC0	; 192
    2022:	f1 e0       	ldi	r31, 0x01	; 1
    2024:	97 85       	ldd	r25, Z+15	; 0x0f
    2026:	99 23       	and	r25, r25
    2028:	ec f3       	brlt	.-6      	; 0x2024 <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    202a:	e8 2f       	mov	r30, r24
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	f0 5f       	subi	r31, 0xF0	; 240
    2030:	60 83       	st	Z, r22
    2032:	08 95       	ret

00002034 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	18 2f       	mov	r17, r24
    2040:	f9 2e       	mov	r15, r25
    2042:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    2044:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    2048:	da df       	rcall	.-76     	; 0x1ffe <nvm_eeprom_flush_buffer>
    204a:	e0 ec       	ldi	r30, 0xC0	; 192
    204c:	f1 e0       	ldi	r31, 0x01	; 1
    204e:	27 85       	ldd	r18, Z+15	; 0x0f
    2050:	22 23       	and	r18, r18
    2052:	ec f3       	brlt	.-6      	; 0x204e <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2054:	6c 2f       	mov	r22, r28
    2056:	81 2f       	mov	r24, r17
    2058:	e3 df       	rcall	.-58     	; 0x2020 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    205a:	c0 ec       	ldi	r28, 0xC0	; 192
    205c:	d1 e0       	ldi	r29, 0x01	; 1
    205e:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2060:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2062:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2064:	85 e3       	ldi	r24, 0x35	; 53
    2066:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	8b ec       	ldi	r24, 0xCB	; 203
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	b7 df       	rcall	.-146    	; 0x1fde <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    2070:	0a 87       	std	Y+10, r16	; 0x0a
}
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	08 95       	ret

0000207e <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    207e:	1f 92       	push	r1
    2080:	0f 92       	push	r0
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	0f 92       	push	r0
    2086:	11 24       	eor	r1, r1
    2088:	2f 93       	push	r18
    208a:	3f 93       	push	r19
    208c:	4f 93       	push	r20
    208e:	5f 93       	push	r21
    2090:	6f 93       	push	r22
    2092:	7f 93       	push	r23
    2094:	8f 93       	push	r24
    2096:	9f 93       	push	r25
    2098:	af 93       	push	r26
    209a:	bf 93       	push	r27
    209c:	ef 93       	push	r30
    209e:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    20a0:	e0 91 5c 20 	lds	r30, 0x205C
    20a4:	f0 91 5d 20 	lds	r31, 0x205D
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	09 f0       	breq	.+2      	; 0x20ae <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    20ac:	09 95       	icall
	}
}
    20ae:	ff 91       	pop	r31
    20b0:	ef 91       	pop	r30
    20b2:	bf 91       	pop	r27
    20b4:	af 91       	pop	r26
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	7f 91       	pop	r23
    20bc:	6f 91       	pop	r22
    20be:	5f 91       	pop	r21
    20c0:	4f 91       	pop	r20
    20c2:	3f 91       	pop	r19
    20c4:	2f 91       	pop	r18
    20c6:	0f 90       	pop	r0
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	0f 90       	pop	r0
    20cc:	1f 90       	pop	r1
    20ce:	18 95       	reti

000020d0 <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    20d0:	1f 92       	push	r1
    20d2:	0f 92       	push	r0
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	0f 92       	push	r0
    20d8:	11 24       	eor	r1, r1
    20da:	2f 93       	push	r18
    20dc:	3f 93       	push	r19
    20de:	4f 93       	push	r20
    20e0:	5f 93       	push	r21
    20e2:	6f 93       	push	r22
    20e4:	7f 93       	push	r23
    20e6:	8f 93       	push	r24
    20e8:	9f 93       	push	r25
    20ea:	af 93       	push	r26
    20ec:	bf 93       	push	r27
    20ee:	ef 93       	push	r30
    20f0:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    20f2:	e0 91 5a 20 	lds	r30, 0x205A
    20f6:	f0 91 5b 20 	lds	r31, 0x205B
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	09 f0       	breq	.+2      	; 0x2100 <__vector_13+0x30>
		tc45_tcc4_err_callback();
    20fe:	09 95       	icall
	}
}
    2100:	ff 91       	pop	r31
    2102:	ef 91       	pop	r30
    2104:	bf 91       	pop	r27
    2106:	af 91       	pop	r26
    2108:	9f 91       	pop	r25
    210a:	8f 91       	pop	r24
    210c:	7f 91       	pop	r23
    210e:	6f 91       	pop	r22
    2110:	5f 91       	pop	r21
    2112:	4f 91       	pop	r20
    2114:	3f 91       	pop	r19
    2116:	2f 91       	pop	r18
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	0f 90       	pop	r0
    211e:	1f 90       	pop	r1
    2120:	18 95       	reti

00002122 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	11 24       	eor	r1, r1
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    2144:	e0 91 58 20 	lds	r30, 0x2058
    2148:	f0 91 59 20 	lds	r31, 0x2059
    214c:	30 97       	sbiw	r30, 0x00	; 0
    214e:	09 f0       	breq	.+2      	; 0x2152 <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    2150:	09 95       	icall
	}
}
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    2196:	e0 91 56 20 	lds	r30, 0x2056
    219a:	f0 91 57 20 	lds	r31, 0x2057
    219e:	30 97       	sbiw	r30, 0x00	; 0
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    21a2:	09 95       	icall
	}
}
    21a4:	ff 91       	pop	r31
    21a6:	ef 91       	pop	r30
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	0f 90       	pop	r0
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	0f 90       	pop	r0
    21c2:	1f 90       	pop	r1
    21c4:	18 95       	reti

000021c6 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    21c6:	1f 92       	push	r1
    21c8:	0f 92       	push	r0
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	0f 92       	push	r0
    21ce:	11 24       	eor	r1, r1
    21d0:	2f 93       	push	r18
    21d2:	3f 93       	push	r19
    21d4:	4f 93       	push	r20
    21d6:	5f 93       	push	r21
    21d8:	6f 93       	push	r22
    21da:	7f 93       	push	r23
    21dc:	8f 93       	push	r24
    21de:	9f 93       	push	r25
    21e0:	af 93       	push	r26
    21e2:	bf 93       	push	r27
    21e4:	ef 93       	push	r30
    21e6:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    21e8:	e0 91 54 20 	lds	r30, 0x2054
    21ec:	f0 91 55 20 	lds	r31, 0x2055
    21f0:	30 97       	sbiw	r30, 0x00	; 0
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    21f4:	09 95       	icall
	}
}
    21f6:	ff 91       	pop	r31
    21f8:	ef 91       	pop	r30
    21fa:	bf 91       	pop	r27
    21fc:	af 91       	pop	r26
    21fe:	9f 91       	pop	r25
    2200:	8f 91       	pop	r24
    2202:	7f 91       	pop	r23
    2204:	6f 91       	pop	r22
    2206:	5f 91       	pop	r21
    2208:	4f 91       	pop	r20
    220a:	3f 91       	pop	r19
    220c:	2f 91       	pop	r18
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	0f 90       	pop	r0
    2214:	1f 90       	pop	r1
    2216:	18 95       	reti

00002218 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    2218:	1f 92       	push	r1
    221a:	0f 92       	push	r0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	0f 92       	push	r0
    2220:	11 24       	eor	r1, r1
    2222:	2f 93       	push	r18
    2224:	3f 93       	push	r19
    2226:	4f 93       	push	r20
    2228:	5f 93       	push	r21
    222a:	6f 93       	push	r22
    222c:	7f 93       	push	r23
    222e:	8f 93       	push	r24
    2230:	9f 93       	push	r25
    2232:	af 93       	push	r26
    2234:	bf 93       	push	r27
    2236:	ef 93       	push	r30
    2238:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    223a:	e0 91 52 20 	lds	r30, 0x2052
    223e:	f0 91 53 20 	lds	r31, 0x2053
    2242:	30 97       	sbiw	r30, 0x00	; 0
    2244:	09 f0       	breq	.+2      	; 0x2248 <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    2246:	09 95       	icall
	}
}
    2248:	ff 91       	pop	r31
    224a:	ef 91       	pop	r30
    224c:	bf 91       	pop	r27
    224e:	af 91       	pop	r26
    2250:	9f 91       	pop	r25
    2252:	8f 91       	pop	r24
    2254:	7f 91       	pop	r23
    2256:	6f 91       	pop	r22
    2258:	5f 91       	pop	r21
    225a:	4f 91       	pop	r20
    225c:	3f 91       	pop	r19
    225e:	2f 91       	pop	r18
    2260:	0f 90       	pop	r0
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	0f 90       	pop	r0
    2266:	1f 90       	pop	r1
    2268:	18 95       	reti

0000226a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    226a:	1f 92       	push	r1
    226c:	0f 92       	push	r0
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	0f 92       	push	r0
    2272:	11 24       	eor	r1, r1
    2274:	2f 93       	push	r18
    2276:	3f 93       	push	r19
    2278:	4f 93       	push	r20
    227a:	5f 93       	push	r21
    227c:	6f 93       	push	r22
    227e:	7f 93       	push	r23
    2280:	8f 93       	push	r24
    2282:	9f 93       	push	r25
    2284:	af 93       	push	r26
    2286:	bf 93       	push	r27
    2288:	ef 93       	push	r30
    228a:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    228c:	e0 91 50 20 	lds	r30, 0x2050
    2290:	f0 91 51 20 	lds	r31, 0x2051
    2294:	30 97       	sbiw	r30, 0x00	; 0
    2296:	09 f0       	breq	.+2      	; 0x229a <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    2298:	09 95       	icall
	}
}
    229a:	ff 91       	pop	r31
    229c:	ef 91       	pop	r30
    229e:	bf 91       	pop	r27
    22a0:	af 91       	pop	r26
    22a2:	9f 91       	pop	r25
    22a4:	8f 91       	pop	r24
    22a6:	7f 91       	pop	r23
    22a8:	6f 91       	pop	r22
    22aa:	5f 91       	pop	r21
    22ac:	4f 91       	pop	r20
    22ae:	3f 91       	pop	r19
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	0f 90       	pop	r0
    22b8:	1f 90       	pop	r1
    22ba:	18 95       	reti

000022bc <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    22bc:	1f 92       	push	r1
    22be:	0f 92       	push	r0
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	0f 92       	push	r0
    22c4:	11 24       	eor	r1, r1
    22c6:	2f 93       	push	r18
    22c8:	3f 93       	push	r19
    22ca:	4f 93       	push	r20
    22cc:	5f 93       	push	r21
    22ce:	6f 93       	push	r22
    22d0:	7f 93       	push	r23
    22d2:	8f 93       	push	r24
    22d4:	9f 93       	push	r25
    22d6:	af 93       	push	r26
    22d8:	bf 93       	push	r27
    22da:	ef 93       	push	r30
    22dc:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    22de:	e0 91 4e 20 	lds	r30, 0x204E
    22e2:	f0 91 4f 20 	lds	r31, 0x204F
    22e6:	30 97       	sbiw	r30, 0x00	; 0
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__vector_19+0x30>
		tc45_tcc5_err_callback();
    22ea:	09 95       	icall
	}
}
    22ec:	ff 91       	pop	r31
    22ee:	ef 91       	pop	r30
    22f0:	bf 91       	pop	r27
    22f2:	af 91       	pop	r26
    22f4:	9f 91       	pop	r25
    22f6:	8f 91       	pop	r24
    22f8:	7f 91       	pop	r23
    22fa:	6f 91       	pop	r22
    22fc:	5f 91       	pop	r21
    22fe:	4f 91       	pop	r20
    2300:	3f 91       	pop	r19
    2302:	2f 91       	pop	r18
    2304:	0f 90       	pop	r0
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	0f 90       	pop	r0
    230a:	1f 90       	pop	r1
    230c:	18 95       	reti

0000230e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    230e:	1f 92       	push	r1
    2310:	0f 92       	push	r0
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	0f 92       	push	r0
    2316:	11 24       	eor	r1, r1
    2318:	2f 93       	push	r18
    231a:	3f 93       	push	r19
    231c:	4f 93       	push	r20
    231e:	5f 93       	push	r21
    2320:	6f 93       	push	r22
    2322:	7f 93       	push	r23
    2324:	8f 93       	push	r24
    2326:	9f 93       	push	r25
    2328:	af 93       	push	r26
    232a:	bf 93       	push	r27
    232c:	ef 93       	push	r30
    232e:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    2330:	e0 91 4c 20 	lds	r30, 0x204C
    2334:	f0 91 4d 20 	lds	r31, 0x204D
    2338:	30 97       	sbiw	r30, 0x00	; 0
    233a:	09 f0       	breq	.+2      	; 0x233e <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    233c:	09 95       	icall
	}
}
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    2360:	1f 92       	push	r1
    2362:	0f 92       	push	r0
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	0f 92       	push	r0
    2368:	11 24       	eor	r1, r1
    236a:	2f 93       	push	r18
    236c:	3f 93       	push	r19
    236e:	4f 93       	push	r20
    2370:	5f 93       	push	r21
    2372:	6f 93       	push	r22
    2374:	7f 93       	push	r23
    2376:	8f 93       	push	r24
    2378:	9f 93       	push	r25
    237a:	af 93       	push	r26
    237c:	bf 93       	push	r27
    237e:	ef 93       	push	r30
    2380:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    2382:	e0 91 4a 20 	lds	r30, 0x204A
    2386:	f0 91 4b 20 	lds	r31, 0x204B
    238a:	30 97       	sbiw	r30, 0x00	; 0
    238c:	09 f0       	breq	.+2      	; 0x2390 <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    238e:	09 95       	icall
	}
}
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	7f 91       	pop	r23
    239e:	6f 91       	pop	r22
    23a0:	5f 91       	pop	r21
    23a2:	4f 91       	pop	r20
    23a4:	3f 91       	pop	r19
    23a6:	2f 91       	pop	r18
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	6f 93       	push	r22
    23c6:	7f 93       	push	r23
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	af 93       	push	r26
    23ce:	bf 93       	push	r27
    23d0:	ef 93       	push	r30
    23d2:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    23d4:	e0 91 48 20 	lds	r30, 0x2048
    23d8:	f0 91 49 20 	lds	r31, 0x2049
    23dc:	30 97       	sbiw	r30, 0x00	; 0
    23de:	09 f0       	breq	.+2      	; 0x23e2 <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    23e0:	09 95       	icall
	}
}
    23e2:	ff 91       	pop	r31
    23e4:	ef 91       	pop	r30
    23e6:	bf 91       	pop	r27
    23e8:	af 91       	pop	r26
    23ea:	9f 91       	pop	r25
    23ec:	8f 91       	pop	r24
    23ee:	7f 91       	pop	r23
    23f0:	6f 91       	pop	r22
    23f2:	5f 91       	pop	r21
    23f4:	4f 91       	pop	r20
    23f6:	3f 91       	pop	r19
    23f8:	2f 91       	pop	r18
    23fa:	0f 90       	pop	r0
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	0f 90       	pop	r0
    2400:	1f 90       	pop	r1
    2402:	18 95       	reti

00002404 <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	2f 93       	push	r18
    2410:	3f 93       	push	r19
    2412:	4f 93       	push	r20
    2414:	5f 93       	push	r21
    2416:	6f 93       	push	r22
    2418:	7f 93       	push	r23
    241a:	8f 93       	push	r24
    241c:	9f 93       	push	r25
    241e:	af 93       	push	r26
    2420:	bf 93       	push	r27
    2422:	ef 93       	push	r30
    2424:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    2426:	e0 91 46 20 	lds	r30, 0x2046
    242a:	f0 91 47 20 	lds	r31, 0x2047
    242e:	30 97       	sbiw	r30, 0x00	; 0
    2430:	09 f0       	breq	.+2      	; 0x2434 <__vector_37+0x30>
		tc45_tcd5_err_callback();
    2432:	09 95       	icall
	}
}
    2434:	ff 91       	pop	r31
    2436:	ef 91       	pop	r30
    2438:	bf 91       	pop	r27
    243a:	af 91       	pop	r26
    243c:	9f 91       	pop	r25
    243e:	8f 91       	pop	r24
    2440:	7f 91       	pop	r23
    2442:	6f 91       	pop	r22
    2444:	5f 91       	pop	r21
    2446:	4f 91       	pop	r20
    2448:	3f 91       	pop	r19
    244a:	2f 91       	pop	r18
    244c:	0f 90       	pop	r0
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	0f 90       	pop	r0
    2452:	1f 90       	pop	r1
    2454:	18 95       	reti

00002456 <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	2f 93       	push	r18
    2462:	3f 93       	push	r19
    2464:	4f 93       	push	r20
    2466:	5f 93       	push	r21
    2468:	6f 93       	push	r22
    246a:	7f 93       	push	r23
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	ef 93       	push	r30
    2476:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    2478:	e0 91 44 20 	lds	r30, 0x2044
    247c:	f0 91 45 20 	lds	r31, 0x2045
    2480:	30 97       	sbiw	r30, 0x00	; 0
    2482:	09 f0       	breq	.+2      	; 0x2486 <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    2484:	09 95       	icall
	}
}
    2486:	ff 91       	pop	r31
    2488:	ef 91       	pop	r30
    248a:	bf 91       	pop	r27
    248c:	af 91       	pop	r26
    248e:	9f 91       	pop	r25
    2490:	8f 91       	pop	r24
    2492:	7f 91       	pop	r23
    2494:	6f 91       	pop	r22
    2496:	5f 91       	pop	r21
    2498:	4f 91       	pop	r20
    249a:	3f 91       	pop	r19
    249c:	2f 91       	pop	r18
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0
    24a4:	1f 90       	pop	r1
    24a6:	18 95       	reti

000024a8 <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    24a8:	1f 92       	push	r1
    24aa:	0f 92       	push	r0
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	0f 92       	push	r0
    24b0:	11 24       	eor	r1, r1
    24b2:	2f 93       	push	r18
    24b4:	3f 93       	push	r19
    24b6:	4f 93       	push	r20
    24b8:	5f 93       	push	r21
    24ba:	6f 93       	push	r22
    24bc:	7f 93       	push	r23
    24be:	8f 93       	push	r24
    24c0:	9f 93       	push	r25
    24c2:	af 93       	push	r26
    24c4:	bf 93       	push	r27
    24c6:	ef 93       	push	r30
    24c8:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    24ca:	e0 91 42 20 	lds	r30, 0x2042
    24ce:	f0 91 43 20 	lds	r31, 0x2043
    24d2:	30 97       	sbiw	r30, 0x00	; 0
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    24d6:	09 95       	icall
	}
}
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	7f 91       	pop	r23
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	0f 90       	pop	r0
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	0f 90       	pop	r0
    24f6:	1f 90       	pop	r1
    24f8:	18 95       	reti

000024fa <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    24fa:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    24fc:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    24fe:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    2500:	28 2f       	mov	r18, r24
    2502:	39 2f       	mov	r19, r25
    2504:	21 15       	cp	r18, r1
    2506:	88 e0       	ldi	r24, 0x08	; 8
    2508:	38 07       	cpc	r19, r24
    250a:	39 f4       	brne	.+14     	; 0x251a <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	f9 dc       	rcall	.-1550   	; 0x1f04 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2512:	64 e0       	ldi	r22, 0x04	; 4
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	f6 dc       	rcall	.-1556   	; 0x1f04 <sysclk_enable_module>
    2518:	17 c0       	rjmp	.+46     	; 0x2548 <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    251a:	20 34       	cpi	r18, 0x40	; 64
    251c:	88 e0       	ldi	r24, 0x08	; 8
    251e:	38 07       	cpc	r19, r24
    2520:	39 f4       	brne	.+14     	; 0x2530 <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    2522:	62 e0       	ldi	r22, 0x02	; 2
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	ee dc       	rcall	.-1572   	; 0x1f04 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	eb dc       	rcall	.-1578   	; 0x1f04 <sysclk_enable_module>
    252e:	0c c0       	rjmp	.+24     	; 0x2548 <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    2530:	20 34       	cpi	r18, 0x40	; 64
    2532:	39 40       	sbci	r19, 0x09	; 9
    2534:	39 f4       	brne	.+14     	; 0x2544 <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    2536:	62 e0       	ldi	r22, 0x02	; 2
    2538:	84 e0       	ldi	r24, 0x04	; 4
    253a:	e4 dc       	rcall	.-1592   	; 0x1f04 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    253c:	64 e0       	ldi	r22, 0x04	; 4
    253e:	84 e0       	ldi	r24, 0x04	; 4
    2540:	e1 dc       	rcall	.-1598   	; 0x1f04 <sysclk_enable_module>
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2544:	cf bf       	out	0x3f, r28	; 63
    2546:	09 c0       	rjmp	.+18     	; 0x255a <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2548:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    254a:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    254c:	ee e9       	ldi	r30, 0x9E	; 158
    254e:	f0 e2       	ldi	r31, 0x20	; 32
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2556:	9f bf       	out	0x3f, r25	; 63
    2558:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    255e:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2560:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2562:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2564:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    2566:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2568:	ee e9       	ldi	r30, 0x9E	; 158
    256a:	f0 e2       	ldi	r31, 0x20	; 32
    256c:	21 81       	ldd	r18, Z+1	; 0x01
    256e:	21 50       	subi	r18, 0x01	; 1
    2570:	21 83       	std	Z+1, r18	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2572:	3f bf       	out	0x3f, r19	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    2574:	28 2f       	mov	r18, r24
    2576:	39 2f       	mov	r19, r25
    2578:	21 15       	cp	r18, r1
    257a:	88 e0       	ldi	r24, 0x08	; 8
    257c:	38 07       	cpc	r19, r24
    257e:	39 f4       	brne	.+14     	; 0x258e <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	cb dc       	rcall	.-1642   	; 0x1f1c <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2586:	64 e0       	ldi	r22, 0x04	; 4
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	c8 dc       	rcall	.-1648   	; 0x1f1c <sysclk_disable_module>
    258c:	17 c0       	rjmp	.+46     	; 0x25bc <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    258e:	20 34       	cpi	r18, 0x40	; 64
    2590:	88 e0       	ldi	r24, 0x08	; 8
    2592:	38 07       	cpc	r19, r24
    2594:	39 f4       	brne	.+14     	; 0x25a4 <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    2596:	62 e0       	ldi	r22, 0x02	; 2
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	c0 dc       	rcall	.-1664   	; 0x1f1c <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    259c:	64 e0       	ldi	r22, 0x04	; 4
    259e:	83 e0       	ldi	r24, 0x03	; 3
    25a0:	bd dc       	rcall	.-1670   	; 0x1f1c <sysclk_disable_module>
    25a2:	0c c0       	rjmp	.+24     	; 0x25bc <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    25a4:	20 34       	cpi	r18, 0x40	; 64
    25a6:	39 40       	sbci	r19, 0x09	; 9
    25a8:	39 f4       	brne	.+14     	; 0x25b8 <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    25aa:	61 e0       	ldi	r22, 0x01	; 1
    25ac:	84 e0       	ldi	r24, 0x04	; 4
    25ae:	b6 dc       	rcall	.-1684   	; 0x1f1c <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	84 e0       	ldi	r24, 0x04	; 4
    25b4:	b3 dc       	rcall	.-1690   	; 0x1f1c <sysclk_disable_module>
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <tc45_disable+0x5e>
    25b8:	cf bf       	out	0x3f, r28	; 63
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <tc45_disable+0x60>
    25bc:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    25c2:	81 15       	cp	r24, r1
    25c4:	28 e0       	ldi	r18, 0x08	; 8
    25c6:	92 07       	cpc	r25, r18
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    25ca:	60 93 5c 20 	sts	0x205C, r22
    25ce:	70 93 5d 20 	sts	0x205D, r23
    25d2:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    25d4:	80 34       	cpi	r24, 0x40	; 64
    25d6:	28 e0       	ldi	r18, 0x08	; 8
    25d8:	92 07       	cpc	r25, r18
    25da:	29 f4       	brne	.+10     	; 0x25e6 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    25dc:	60 93 50 20 	sts	0x2050, r22
    25e0:	70 93 51 20 	sts	0x2051, r23
    25e4:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    25e6:	80 34       	cpi	r24, 0x40	; 64
    25e8:	99 40       	sbci	r25, 0x09	; 9
    25ea:	21 f4       	brne	.+8      	; 0x25f4 <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    25ec:	60 93 48 20 	sts	0x2048, r22
    25f0:	70 93 49 20 	sts	0x2049, r23
    25f4:	08 95       	ret

000025f6 <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    25f6:	1f 92       	push	r1
    25f8:	0f 92       	push	r0
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	0f 92       	push	r0
    25fe:	11 24       	eor	r1, r1
    2600:	2f 93       	push	r18
    2602:	3f 93       	push	r19
    2604:	4f 93       	push	r20
    2606:	5f 93       	push	r21
    2608:	6f 93       	push	r22
    260a:	7f 93       	push	r23
    260c:	8f 93       	push	r24
    260e:	9f 93       	push	r25
    2610:	af 93       	push	r26
    2612:	bf 93       	push	r27
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	ef 93       	push	r30
    261a:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    261c:	e0 91 5e 20 	lds	r30, 0x205E
    2620:	f0 91 5f 20 	lds	r31, 0x205F
    2624:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    2626:	83 ff       	sbrs	r24, 3
    2628:	08 c0       	rjmp	.+16     	; 0x263a <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    262a:	88 60       	ori	r24, 0x08	; 8
    262c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    2632:	86 ef       	ldi	r24, 0xF6	; 246
    2634:	80 93 68 20 	sts	0x2068, r24
    2638:	95 c0       	rjmp	.+298    	; 0x2764 <__vector_11+0x16e>
    263a:	98 2f       	mov	r25, r24
    263c:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    263e:	31 f0       	breq	.+12     	; 0x264c <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2640:	83 e0       	ldi	r24, 0x03	; 3
    2642:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	80 93 68 20 	sts	0x2068, r24
    264a:	8c c0       	rjmp	.+280    	; 0x2764 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    264c:	86 ff       	sbrs	r24, 6
    264e:	43 c0       	rjmp	.+134    	; 0x26d6 <__vector_11+0xe0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    2650:	ce e5       	ldi	r28, 0x5E	; 94
    2652:	d0 e2       	ldi	r29, 0x20	; 32
    2654:	aa 81       	ldd	r26, Y+2	; 0x02
    2656:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    2658:	8c 81       	ldd	r24, Y+4	; 0x04
    265a:	9d 81       	ldd	r25, Y+5	; 0x05
    265c:	14 96       	adiw	r26, 0x04	; 4
    265e:	2d 91       	ld	r18, X+
    2660:	3c 91       	ld	r19, X
    2662:	15 97       	sbiw	r26, 0x05	; 5
    2664:	82 17       	cp	r24, r18
    2666:	93 07       	cpc	r25, r19
    2668:	6c f4       	brge	.+26     	; 0x2684 <__vector_11+0x8e>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    266a:	9c 01       	movw	r18, r24
    266c:	2f 5f       	subi	r18, 0xFF	; 255
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	20 93 62 20 	sts	0x2062, r18
    2674:	30 93 63 20 	sts	0x2063, r19
    2678:	a8 0f       	add	r26, r24
    267a:	b9 1f       	adc	r27, r25
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	8c 91       	ld	r24, X
    2680:	87 83       	std	Z+7, r24	; 0x07
    2682:	70 c0       	rjmp	.+224    	; 0x2764 <__vector_11+0x16e>

	} else if (transfer.data_count < pkg->length) {
    2684:	80 91 64 20 	lds	r24, 0x2064
    2688:	90 91 65 20 	lds	r25, 0x2065
    268c:	18 96       	adiw	r26, 0x08	; 8
    268e:	2d 91       	ld	r18, X+
    2690:	3c 91       	ld	r19, X
    2692:	19 97       	sbiw	r26, 0x09	; 9
    2694:	82 17       	cp	r24, r18
    2696:	93 07       	cpc	r25, r19
    2698:	c8 f4       	brcc	.+50     	; 0x26cc <__vector_11+0xd6>

		if (transfer.read) {
    269a:	20 91 66 20 	lds	r18, 0x2066
    269e:	22 23       	and	r18, r18
    26a0:	21 f0       	breq	.+8      	; 0x26aa <__vector_11+0xb4>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    26a2:	86 81       	ldd	r24, Z+6	; 0x06
    26a4:	81 60       	ori	r24, 0x01	; 1
    26a6:	86 83       	std	Z+6, r24	; 0x06
    26a8:	5d c0       	rjmp	.+186    	; 0x2764 <__vector_11+0x16e>

		} else {
			const uint8_t * const data = pkg->buffer;
    26aa:	16 96       	adiw	r26, 0x06	; 6
    26ac:	2d 91       	ld	r18, X+
    26ae:	3c 91       	ld	r19, X
    26b0:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    26b2:	ac 01       	movw	r20, r24
    26b4:	4f 5f       	subi	r20, 0xFF	; 255
    26b6:	5f 4f       	sbci	r21, 0xFF	; 255
    26b8:	40 93 64 20 	sts	0x2064, r20
    26bc:	50 93 65 20 	sts	0x2065, r21
    26c0:	d9 01       	movw	r26, r18
    26c2:	a8 0f       	add	r26, r24
    26c4:	b9 1f       	adc	r27, r25
    26c6:	8c 91       	ld	r24, X
    26c8:	87 83       	std	Z+7, r24	; 0x07
    26ca:	4c c0       	rjmp	.+152    	; 0x2764 <__vector_11+0x16e>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    26d0:	10 92 68 20 	sts	0x2068, r1
    26d4:	47 c0       	rjmp	.+142    	; 0x2764 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    26d6:	88 23       	and	r24, r24
    26d8:	0c f0       	brlt	.+2      	; 0x26dc <__vector_11+0xe6>
    26da:	41 c0       	rjmp	.+130    	; 0x275e <__vector_11+0x168>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    26dc:	ce e5       	ldi	r28, 0x5E	; 94
    26de:	d0 e2       	ldi	r29, 0x20	; 32
    26e0:	aa 81       	ldd	r26, Y+2	; 0x02
    26e2:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.data_count < pkg->length) {
    26e4:	8e 81       	ldd	r24, Y+6	; 0x06
    26e6:	9f 81       	ldd	r25, Y+7	; 0x07
    26e8:	18 96       	adiw	r26, 0x08	; 8
    26ea:	2d 91       	ld	r18, X+
    26ec:	3c 91       	ld	r19, X
    26ee:	19 97       	sbiw	r26, 0x09	; 9
    26f0:	82 17       	cp	r24, r18
    26f2:	93 07       	cpc	r25, r19
    26f4:	70 f5       	brcc	.+92     	; 0x2752 <__vector_11+0x15c>

		uint8_t * const data = pkg->buffer;
    26f6:	16 96       	adiw	r26, 0x06	; 6
    26f8:	6d 91       	ld	r22, X+
    26fa:	7c 91       	ld	r23, X
    26fc:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    26fe:	9c 01       	movw	r18, r24
    2700:	2f 5f       	subi	r18, 0xFF	; 255
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	20 93 64 20 	sts	0x2064, r18
    2708:	30 93 65 20 	sts	0x2065, r19
    270c:	47 81       	ldd	r20, Z+7	; 0x07
    270e:	86 0f       	add	r24, r22
    2710:	97 1f       	adc	r25, r23
    2712:	ec 01       	movw	r28, r24
    2714:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    2716:	eb 01       	movw	r28, r22
    2718:	88 81       	ld	r24, Y
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	18 96       	adiw	r26, 0x08	; 8
    2720:	4d 91       	ld	r20, X+
    2722:	5c 91       	ld	r21, X
    2724:	19 97       	sbiw	r26, 0x09	; 9
    2726:	48 17       	cp	r20, r24
    2728:	59 07       	cpc	r21, r25
    272a:	21 f0       	breq	.+8      	; 0x2734 <__vector_11+0x13e>
		{
			pkg->length = data[0]+1;
    272c:	18 96       	adiw	r26, 0x08	; 8
    272e:	8d 93       	st	X+, r24
    2730:	9c 93       	st	X, r25
    2732:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    2734:	18 96       	adiw	r26, 0x08	; 8
    2736:	8d 91       	ld	r24, X+
    2738:	9c 91       	ld	r25, X
    273a:	19 97       	sbiw	r26, 0x09	; 9
    273c:	28 17       	cp	r18, r24
    273e:	39 07       	cpc	r19, r25
    2740:	18 f4       	brcc	.+6      	; 0x2748 <__vector_11+0x152>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	83 83       	std	Z+3, r24	; 0x03
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <__vector_11+0x16e>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2748:	87 e0       	ldi	r24, 0x07	; 7
    274a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    274c:	10 92 68 20 	sts	0x2068, r1
    2750:	09 c0       	rjmp	.+18     	; 0x2764 <__vector_11+0x16e>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    2756:	89 ef       	ldi	r24, 0xF9	; 249
    2758:	80 93 68 20 	sts	0x2068, r24
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <__vector_11+0x16e>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    275e:	8b ef       	ldi	r24, 0xFB	; 251
    2760:	80 93 68 20 	sts	0x2068, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    2764:	ff 91       	pop	r31
    2766:	ef 91       	pop	r30
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	bf 91       	pop	r27
    276e:	af 91       	pop	r26
    2770:	9f 91       	pop	r25
    2772:	8f 91       	pop	r24
    2774:	7f 91       	pop	r23
    2776:	6f 91       	pop	r22
    2778:	5f 91       	pop	r21
    277a:	4f 91       	pop	r20
    277c:	3f 91       	pop	r19
    277e:	2f 91       	pop	r18
    2780:	0f 90       	pop	r0
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	0f 90       	pop	r0
    2786:	1f 90       	pop	r1
    2788:	18 95       	reti

0000278a <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    278a:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    278c:	db 01       	movw	r26, r22
    278e:	14 96       	adiw	r26, 0x04	; 4
    2790:	8c 91       	ld	r24, X
    2792:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    2794:	88 eb       	ldi	r24, 0xB8	; 184
    2796:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    279c:	ee e5       	ldi	r30, 0x5E	; 94
    279e:	f0 e2       	ldi	r31, 0x20	; 32
    27a0:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    27a2:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    27a4:	e0 ea       	ldi	r30, 0xA0	; 160
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	82 60       	ori	r24, 0x02	; 2
    27ac:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    27ae:	78 94       	sei

	return STATUS_OK;
}
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	08 95       	ret

000027b4 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    27b4:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    27b6:	89 2b       	or	r24, r25
    27b8:	09 f4       	brne	.+2      	; 0x27bc <twi_master_transfer+0x8>
    27ba:	49 c0       	rjmp	.+146    	; 0x284e <twi_master_transfer+0x9a>
    27bc:	61 15       	cp	r22, r1
    27be:	71 05       	cpc	r23, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <twi_master_transfer+0x10>
    27c2:	47 c0       	rjmp	.+142    	; 0x2852 <twi_master_transfer+0x9e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    27c4:	fb 01       	movw	r30, r22
    27c6:	92 85       	ldd	r25, Z+10	; 0x0a
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {
    27c8:	80 91 67 20 	lds	r24, 0x2067
    27cc:	88 23       	and	r24, r24
    27ce:	19 f0       	breq	.+6      	; 0x27d6 <twi_master_transfer+0x22>

		if (no_wait) { return ERR_BUSY; }
    27d0:	99 23       	and	r25, r25
    27d2:	f1 f3       	breq	.-4      	; 0x27d0 <twi_master_transfer+0x1c>
    27d4:	40 c0       	rjmp	.+128    	; 0x2856 <twi_master_transfer+0xa2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    27d6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    27d8:	f8 94       	cli
		#endif
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    27da:	ee e5       	ldi	r30, 0x5E	; 94
    27dc:	f0 e2       	ldi	r31, 0x20	; 32
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
    27e2:	90 e8       	ldi	r25, 0x80	; 128
    27e4:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    27e6:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    27e8:	a0 83       	st	Z, r26
    27ea:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
    27ec:	62 83       	std	Z+2, r22	; 0x02
    27ee:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
    27f0:	14 82       	std	Z+4, r1	; 0x04
    27f2:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
    27f4:	16 82       	std	Z+6, r1	; 0x06
    27f6:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
    27f8:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
    27fa:	fb 01       	movw	r30, r22
    27fc:	80 81       	ld	r24, Z
    27fe:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    2800:	24 81       	ldd	r18, Z+4	; 0x04
    2802:	35 81       	ldd	r19, Z+5	; 0x05
    2804:	23 2b       	or	r18, r19
    2806:	11 f4       	brne	.+4      	; 0x280c <twi_master_transfer+0x58>
    2808:	41 11       	cpse	r20, r1
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <twi_master_transfer+0x5e>
			transfer.bus->MASTER.ADDR = chip;
    280c:	16 96       	adiw	r26, 0x06	; 6
    280e:	8c 93       	st	X, r24
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <twi_master_transfer+0x64>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    2812:	81 60       	ori	r24, 0x01	; 1
    2814:	16 96       	adiw	r26, 0x06	; 6
    2816:	8c 93       	st	X, r24
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	int count=0;
	while (OPERATION_IN_PROGRESS == transfer.status) {
    2818:	ee e5       	ldi	r30, 0x5E	; 94
    281a:	f0 e2       	ldi	r31, 0x20	; 32
    281c:	82 85       	ldd	r24, Z+10	; 0x0a
    281e:	80 38       	cpi	r24, 0x80	; 128
    2820:	e9 f3       	breq	.-6      	; 0x281c <twi_master_transfer+0x68>
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    2822:	e0 91 5e 20 	lds	r30, 0x205E
    2826:	f0 91 5f 20 	lds	r31, 0x205F
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    282a:	84 81       	ldd	r24, Z+4	; 0x04
    282c:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	49 f0       	breq	.+18     	; 0x2844 <twi_master_transfer+0x90>
    2832:	ae e5       	ldi	r26, 0x5E	; 94
    2834:	b0 e2       	ldi	r27, 0x20	; 32
    2836:	ed 91       	ld	r30, X+
    2838:	fc 91       	ld	r31, X
    283a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    283c:	84 81       	ldd	r24, Z+4	; 0x04
    283e:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	c9 f7       	brne	.-14     	; 0x2836 <twi_master_transfer+0x82>
			if(count++>10000)
			return ERR_BUSY;
		#endif
	}

	status_code_t const status = transfer.status;
    2844:	ee e5       	ldi	r30, 0x5E	; 94
    2846:	f0 e2       	ldi	r31, 0x20	; 32
    2848:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    284a:	11 86       	std	Z+9, r1	; 0x09
    284c:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    284e:	88 ef       	ldi	r24, 0xF8	; 248
    2850:	08 95       	ret
    2852:	88 ef       	ldi	r24, 0xF8	; 248
    2854:	08 95       	ret
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    2856:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    2858:	08 95       	ret

0000285a <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
    285a:	fc 01       	movw	r30, r24
      unsigned int count=0;
	  
	while (usart_data_register_is_empty(usart) == false) {
    285c:	22 e1       	ldi	r18, 0x12	; 18
    285e:	37 e2       	ldi	r19, 0x27	; 39
    2860:	03 c0       	rjmp	.+6      	; 0x2868 <usart_putchar+0xe>
    2862:	21 50       	subi	r18, 0x01	; 1
    2864:	31 09       	sbc	r19, r1
#ifdef LIMIT_LOOP
           if(count++>10000)
    2866:	19 f0       	breq	.+6      	; 0x286e <usart_putchar+0x14>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2868:	91 81       	ldd	r25, Z+1	; 0x01
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
      unsigned int count=0;
	  
	while (usart_data_register_is_empty(usart) == false) {
    286a:	95 ff       	sbrs	r25, 5
    286c:	fa cf       	rjmp	.-12     	; 0x2862 <usart_putchar+0x8>
           if(count++>10000)
		   	break;
#endif
	}
	
	(usart)->DATA = c;
    286e:	60 83       	st	Z, r22
	return STATUS_OK;
}
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	08 95       	ret

00002876 <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
    2876:	fc 01       	movw	r30, r24
      unsigned int count=0;
	  
	while (usart_rx_is_complete(usart) == false) {
    2878:	22 e1       	ldi	r18, 0x12	; 18
    287a:	37 e2       	ldi	r19, 0x27	; 39
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <usart_getchar+0xe>
    287e:	21 50       	subi	r18, 0x01	; 1
    2880:	31 09       	sbc	r19, r1
#ifdef LIMIT_LOOP
           if(count++>10000)
    2882:	19 f0       	breq	.+6      	; 0x288a <usart_getchar+0x14>
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    2884:	91 81       	ldd	r25, Z+1	; 0x01
 */
uint8_t usart_getchar(USART_t *usart)
{
      unsigned int count=0;
	  
	while (usart_rx_is_complete(usart) == false) {
    2886:	99 23       	and	r25, r25
    2888:	d4 f7       	brge	.-12     	; 0x287e <usart_getchar+0x8>
           if(count++>10000)
		   break;
#endif		
	}
	
	return ((uint8_t)(usart)->DATA);
    288a:	80 81       	ld	r24, Z
}
    288c:	08 95       	ret

0000288e <__udivmodhi4>:
    288e:	aa 1b       	sub	r26, r26
    2890:	bb 1b       	sub	r27, r27
    2892:	51 e1       	ldi	r21, 0x11	; 17
    2894:	07 c0       	rjmp	.+14     	; 0x28a4 <__udivmodhi4_ep>

00002896 <__udivmodhi4_loop>:
    2896:	aa 1f       	adc	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	a6 17       	cp	r26, r22
    289c:	b7 07       	cpc	r27, r23
    289e:	10 f0       	brcs	.+4      	; 0x28a4 <__udivmodhi4_ep>
    28a0:	a6 1b       	sub	r26, r22
    28a2:	b7 0b       	sbc	r27, r23

000028a4 <__udivmodhi4_ep>:
    28a4:	88 1f       	adc	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	5a 95       	dec	r21
    28aa:	a9 f7       	brne	.-22     	; 0x2896 <__udivmodhi4_loop>
    28ac:	80 95       	com	r24
    28ae:	90 95       	com	r25
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	08 95       	ret

000028b6 <__divmodhi4>:
    28b6:	97 fb       	bst	r25, 7
    28b8:	07 2e       	mov	r0, r23
    28ba:	16 f4       	brtc	.+4      	; 0x28c0 <__divmodhi4+0xa>
    28bc:	00 94       	com	r0
    28be:	06 d0       	rcall	.+12     	; 0x28cc <__divmodhi4_neg1>
    28c0:	77 fd       	sbrc	r23, 7
    28c2:	08 d0       	rcall	.+16     	; 0x28d4 <__divmodhi4_neg2>
    28c4:	e4 df       	rcall	.-56     	; 0x288e <__udivmodhi4>
    28c6:	07 fc       	sbrc	r0, 7
    28c8:	05 d0       	rcall	.+10     	; 0x28d4 <__divmodhi4_neg2>
    28ca:	3e f4       	brtc	.+14     	; 0x28da <__divmodhi4_exit>

000028cc <__divmodhi4_neg1>:
    28cc:	90 95       	com	r25
    28ce:	81 95       	neg	r24
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	08 95       	ret

000028d4 <__divmodhi4_neg2>:
    28d4:	70 95       	com	r23
    28d6:	61 95       	neg	r22
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255

000028da <__divmodhi4_exit>:
    28da:	08 95       	ret

000028dc <__tablejump2__>:
    28dc:	ee 0f       	add	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	05 90       	lpm	r0, Z+
    28e2:	f4 91       	lpm	r31, Z
    28e4:	e0 2d       	mov	r30, r0
    28e6:	09 94       	ijmp

000028e8 <_exit>:
    28e8:	f8 94       	cli

000028ea <__stop_program>:
    28ea:	ff cf       	rjmp	.-2      	; 0x28ea <__stop_program>
