
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00802000  000029be  00002a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  0080202a  0080202a  00002a9c  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00002a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ad8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006f8  00000000  00000000  00002b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00017c5d  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003301  00000000  00000000  0001ae6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c2b8  00000000  00000000  0001e16e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001704  00000000  00000000  0002a428  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002dbdf  00000000  00000000  0002bb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000079ca  00000000  00000000  0005970b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000780  00000000  00000000  000610d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000cb0d  00000000  00000000  00061855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c1       	rjmp	.+798    	; 0x320 <__ctors_end>
       2:	00 00       	nop
       4:	aa c1       	rjmp	.+852    	; 0x35a <__bad_interrupt>
       6:	00 00       	nop
       8:	a8 c1       	rjmp	.+848    	; 0x35a <__bad_interrupt>
       a:	00 00       	nop
       c:	a6 c1       	rjmp	.+844    	; 0x35a <__bad_interrupt>
       e:	00 00       	nop
      10:	a4 c1       	rjmp	.+840    	; 0x35a <__bad_interrupt>
      12:	00 00       	nop
      14:	a2 c1       	rjmp	.+836    	; 0x35a <__bad_interrupt>
      16:	00 00       	nop
      18:	a0 c1       	rjmp	.+832    	; 0x35a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9e c1       	rjmp	.+828    	; 0x35a <__bad_interrupt>
      1e:	00 00       	nop
      20:	9c c1       	rjmp	.+824    	; 0x35a <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c7       	rjmp	.+3920   	; 0xf76 <__vector_9>
      26:	00 00       	nop
      28:	98 c1       	rjmp	.+816    	; 0x35a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__vector_11>
      30:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_12>
      34:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_13>
      38:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__vector_14>
      3c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_15>
      40:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__vector_16>
      44:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__vector_17>
      48:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__vector_18>
      4c:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__vector_19>
      50:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__vector_20>
      54:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__vector_21>
      58:	80 c1       	rjmp	.+768    	; 0x35a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_23>
      60:	7c c1       	rjmp	.+760    	; 0x35a <__bad_interrupt>
      62:	00 00       	nop
      64:	7a c1       	rjmp	.+756    	; 0x35a <__bad_interrupt>
      66:	00 00       	nop
      68:	78 c1       	rjmp	.+752    	; 0x35a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	76 c1       	rjmp	.+748    	; 0x35a <__bad_interrupt>
      6e:	00 00       	nop
      70:	74 c1       	rjmp	.+744    	; 0x35a <__bad_interrupt>
      72:	00 00       	nop
      74:	72 c1       	rjmp	.+740    	; 0x35a <__bad_interrupt>
      76:	00 00       	nop
      78:	70 c1       	rjmp	.+736    	; 0x35a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6e c1       	rjmp	.+732    	; 0x35a <__bad_interrupt>
      7e:	00 00       	nop
      80:	6c c1       	rjmp	.+728    	; 0x35a <__bad_interrupt>
      82:	00 00       	nop
      84:	6a c1       	rjmp	.+724    	; 0x35a <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_34>
      8c:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_35>
      90:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__vector_36>
      94:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__vector_37>
      98:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__vector_38>
      9c:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_39>
      a0:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_40>
      a4:	5a c1       	rjmp	.+692    	; 0x35a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	58 c1       	rjmp	.+688    	; 0x35a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	21 08       	sbc	r2, r1
      ae:	26 08       	sbc	r2, r6
      b0:	58 08       	sbc	r5, r8
      b2:	58 08       	sbc	r5, r8
      b4:	58 08       	sbc	r5, r8
      b6:	58 08       	sbc	r5, r8
      b8:	58 08       	sbc	r5, r8
      ba:	58 08       	sbc	r5, r8
      bc:	58 08       	sbc	r5, r8
      be:	58 08       	sbc	r5, r8
      c0:	58 08       	sbc	r5, r8
      c2:	58 08       	sbc	r5, r8
      c4:	58 08       	sbc	r5, r8
      c6:	58 08       	sbc	r5, r8
      c8:	58 08       	sbc	r5, r8
      ca:	58 08       	sbc	r5, r8
      cc:	2b 08       	sbc	r2, r11
      ce:	58 08       	sbc	r5, r8
      d0:	58 08       	sbc	r5, r8
      d2:	58 08       	sbc	r5, r8
      d4:	58 08       	sbc	r5, r8
      d6:	58 08       	sbc	r5, r8
      d8:	58 08       	sbc	r5, r8
      da:	58 08       	sbc	r5, r8
      dc:	58 08       	sbc	r5, r8
      de:	58 08       	sbc	r5, r8
      e0:	58 08       	sbc	r5, r8
      e2:	58 08       	sbc	r5, r8
      e4:	58 08       	sbc	r5, r8
      e6:	58 08       	sbc	r5, r8
      e8:	58 08       	sbc	r5, r8
      ea:	58 08       	sbc	r5, r8
      ec:	58 08       	sbc	r5, r8
      ee:	30 08       	sbc	r3, r0
      f0:	35 08       	sbc	r3, r5
      f2:	58 08       	sbc	r5, r8
      f4:	58 08       	sbc	r5, r8
      f6:	58 08       	sbc	r5, r8
      f8:	58 08       	sbc	r5, r8
      fa:	58 08       	sbc	r5, r8
      fc:	58 08       	sbc	r5, r8
      fe:	58 08       	sbc	r5, r8
     100:	58 08       	sbc	r5, r8
     102:	58 08       	sbc	r5, r8
     104:	58 08       	sbc	r5, r8
     106:	58 08       	sbc	r5, r8
     108:	58 08       	sbc	r5, r8
     10a:	58 08       	sbc	r5, r8
     10c:	58 08       	sbc	r5, r8
     10e:	3a 08       	sbc	r3, r10
     110:	3f 08       	sbc	r3, r15
     112:	58 08       	sbc	r5, r8
     114:	58 08       	sbc	r5, r8
     116:	58 08       	sbc	r5, r8
     118:	58 08       	sbc	r5, r8
     11a:	58 08       	sbc	r5, r8
     11c:	58 08       	sbc	r5, r8
     11e:	58 08       	sbc	r5, r8
     120:	58 08       	sbc	r5, r8
     122:	58 08       	sbc	r5, r8
     124:	58 08       	sbc	r5, r8
     126:	58 08       	sbc	r5, r8
     128:	58 08       	sbc	r5, r8
     12a:	58 08       	sbc	r5, r8
     12c:	58 08       	sbc	r5, r8
     12e:	44 08       	sbc	r4, r4
     130:	49 08       	sbc	r4, r9
     132:	58 08       	sbc	r5, r8
     134:	58 08       	sbc	r5, r8
     136:	58 08       	sbc	r5, r8
     138:	58 08       	sbc	r5, r8
     13a:	58 08       	sbc	r5, r8
     13c:	58 08       	sbc	r5, r8
     13e:	58 08       	sbc	r5, r8
     140:	58 08       	sbc	r5, r8
     142:	58 08       	sbc	r5, r8
     144:	58 08       	sbc	r5, r8
     146:	58 08       	sbc	r5, r8
     148:	58 08       	sbc	r5, r8
     14a:	58 08       	sbc	r5, r8
     14c:	58 08       	sbc	r5, r8
     14e:	4e 08       	sbc	r4, r14
     150:	53 08       	sbc	r5, r3
     152:	a4 09       	sbc	r26, r4
     154:	a4 09       	sbc	r26, r4
     156:	a4 09       	sbc	r26, r4
     158:	a4 09       	sbc	r26, r4
     15a:	a4 09       	sbc	r26, r4
     15c:	a4 09       	sbc	r26, r4
     15e:	a6 09       	sbc	r26, r6
     160:	a6 09       	sbc	r26, r6
     162:	a6 09       	sbc	r26, r6
     164:	a6 09       	sbc	r26, r6
     166:	a6 09       	sbc	r26, r6
     168:	a6 09       	sbc	r26, r6
     16a:	a6 09       	sbc	r26, r6
     16c:	a6 09       	sbc	r26, r6
     16e:	a6 09       	sbc	r26, r6
     170:	a6 09       	sbc	r26, r6
     172:	a6 09       	sbc	r26, r6
     174:	a6 09       	sbc	r26, r6
     176:	a6 09       	sbc	r26, r6
     178:	a6 09       	sbc	r26, r6
     17a:	a6 09       	sbc	r26, r6
     17c:	a6 09       	sbc	r26, r6
     17e:	a6 09       	sbc	r26, r6
     180:	a6 09       	sbc	r26, r6
     182:	a6 09       	sbc	r26, r6
     184:	a6 09       	sbc	r26, r6
     186:	a6 09       	sbc	r26, r6
     188:	a6 09       	sbc	r26, r6
     18a:	a6 09       	sbc	r26, r6
     18c:	a6 09       	sbc	r26, r6
     18e:	a6 09       	sbc	r26, r6
     190:	a6 09       	sbc	r26, r6
     192:	a6 09       	sbc	r26, r6
     194:	a6 09       	sbc	r26, r6
     196:	a6 09       	sbc	r26, r6
     198:	a6 09       	sbc	r26, r6
     19a:	a6 09       	sbc	r26, r6
     19c:	a6 09       	sbc	r26, r6
     19e:	a6 09       	sbc	r26, r6
     1a0:	a6 09       	sbc	r26, r6
     1a2:	a6 09       	sbc	r26, r6
     1a4:	a6 09       	sbc	r26, r6
     1a6:	a6 09       	sbc	r26, r6
     1a8:	a6 09       	sbc	r26, r6
     1aa:	a6 09       	sbc	r26, r6
     1ac:	a6 09       	sbc	r26, r6
     1ae:	a6 09       	sbc	r26, r6
     1b0:	a6 09       	sbc	r26, r6
     1b2:	a6 09       	sbc	r26, r6
     1b4:	a6 09       	sbc	r26, r6
     1b6:	a6 09       	sbc	r26, r6
     1b8:	a6 09       	sbc	r26, r6
     1ba:	a6 09       	sbc	r26, r6
     1bc:	a6 09       	sbc	r26, r6
     1be:	a6 09       	sbc	r26, r6
     1c0:	a6 09       	sbc	r26, r6
     1c2:	a6 09       	sbc	r26, r6
     1c4:	a6 09       	sbc	r26, r6
     1c6:	a6 09       	sbc	r26, r6
     1c8:	a6 09       	sbc	r26, r6
     1ca:	a6 09       	sbc	r26, r6
     1cc:	a6 09       	sbc	r26, r6
     1ce:	a6 09       	sbc	r26, r6
     1d0:	a6 09       	sbc	r26, r6
     1d2:	a6 09       	sbc	r26, r6
     1d4:	a4 09       	sbc	r26, r4
     1d6:	a4 09       	sbc	r26, r4
     1d8:	a6 09       	sbc	r26, r6
     1da:	a6 09       	sbc	r26, r6
     1dc:	a6 09       	sbc	r26, r6
     1de:	a4 09       	sbc	r26, r4
     1e0:	a4 09       	sbc	r26, r4
     1e2:	a6 09       	sbc	r26, r6
     1e4:	a6 09       	sbc	r26, r6
     1e6:	a6 09       	sbc	r26, r6
     1e8:	a6 09       	sbc	r26, r6
     1ea:	a4 09       	sbc	r26, r4
     1ec:	a6 09       	sbc	r26, r6
     1ee:	a6 09       	sbc	r26, r6
     1f0:	a4 09       	sbc	r26, r4
     1f2:	a6 09       	sbc	r26, r6
     1f4:	a4 09       	sbc	r26, r4
     1f6:	a6 09       	sbc	r26, r6
     1f8:	a4 09       	sbc	r26, r4
     1fa:	a6 09       	sbc	r26, r6
     1fc:	a6 09       	sbc	r26, r6
     1fe:	a6 09       	sbc	r26, r6
     200:	a6 09       	sbc	r26, r6
     202:	a6 09       	sbc	r26, r6
     204:	a6 09       	sbc	r26, r6
     206:	a6 09       	sbc	r26, r6
     208:	a6 09       	sbc	r26, r6
     20a:	a6 09       	sbc	r26, r6
     20c:	a6 09       	sbc	r26, r6
     20e:	a6 09       	sbc	r26, r6
     210:	a6 09       	sbc	r26, r6
     212:	a6 09       	sbc	r26, r6
     214:	a6 09       	sbc	r26, r6
     216:	a4 09       	sbc	r26, r4
     218:	a6 09       	sbc	r26, r6
     21a:	a6 09       	sbc	r26, r6
     21c:	a6 09       	sbc	r26, r6
     21e:	a6 09       	sbc	r26, r6
     220:	a6 09       	sbc	r26, r6
     222:	a6 09       	sbc	r26, r6
     224:	a6 09       	sbc	r26, r6
     226:	a6 09       	sbc	r26, r6
     228:	a6 09       	sbc	r26, r6
     22a:	a6 09       	sbc	r26, r6
     22c:	a6 09       	sbc	r26, r6
     22e:	a6 09       	sbc	r26, r6
     230:	a4 09       	sbc	r26, r4
     232:	77 0a       	sbc	r7, r23
     234:	86 0a       	sbc	r8, r22
     236:	ca 0a       	sbc	r12, r26
     238:	cf 0a       	sbc	r12, r31
     23a:	d4 0a       	sbc	r13, r20
     23c:	d9 0a       	sbc	r13, r25
     23e:	3c 0b       	sbc	r19, r28
     240:	3c 0b       	sbc	r19, r28
     242:	3c 0b       	sbc	r19, r28
     244:	3c 0b       	sbc	r19, r28
     246:	3c 0b       	sbc	r19, r28
     248:	3c 0b       	sbc	r19, r28
     24a:	3c 0b       	sbc	r19, r28
     24c:	3c 0b       	sbc	r19, r28
     24e:	3c 0b       	sbc	r19, r28
     250:	3c 0b       	sbc	r19, r28
     252:	3c 0b       	sbc	r19, r28
     254:	3c 0b       	sbc	r19, r28
     256:	3c 0b       	sbc	r19, r28
     258:	3c 0b       	sbc	r19, r28
     25a:	3c 0b       	sbc	r19, r28
     25c:	3c 0b       	sbc	r19, r28
     25e:	3c 0b       	sbc	r19, r28
     260:	3c 0b       	sbc	r19, r28
     262:	3c 0b       	sbc	r19, r28
     264:	3c 0b       	sbc	r19, r28
     266:	3c 0b       	sbc	r19, r28
     268:	3c 0b       	sbc	r19, r28
     26a:	3c 0b       	sbc	r19, r28
     26c:	3c 0b       	sbc	r19, r28
     26e:	3c 0b       	sbc	r19, r28
     270:	3c 0b       	sbc	r19, r28
     272:	3c 0b       	sbc	r19, r28
     274:	3c 0b       	sbc	r19, r28
     276:	3c 0b       	sbc	r19, r28
     278:	3c 0b       	sbc	r19, r28
     27a:	3c 0b       	sbc	r19, r28
     27c:	3c 0b       	sbc	r19, r28
     27e:	3c 0b       	sbc	r19, r28
     280:	3c 0b       	sbc	r19, r28
     282:	3c 0b       	sbc	r19, r28
     284:	3c 0b       	sbc	r19, r28
     286:	3c 0b       	sbc	r19, r28
     288:	3c 0b       	sbc	r19, r28
     28a:	3c 0b       	sbc	r19, r28
     28c:	3c 0b       	sbc	r19, r28
     28e:	3c 0b       	sbc	r19, r28
     290:	3c 0b       	sbc	r19, r28
     292:	3c 0b       	sbc	r19, r28
     294:	3c 0b       	sbc	r19, r28
     296:	3c 0b       	sbc	r19, r28
     298:	3c 0b       	sbc	r19, r28
     29a:	3c 0b       	sbc	r19, r28
     29c:	3c 0b       	sbc	r19, r28
     29e:	3c 0b       	sbc	r19, r28
     2a0:	3c 0b       	sbc	r19, r28
     2a2:	3c 0b       	sbc	r19, r28
     2a4:	3c 0b       	sbc	r19, r28
     2a6:	3c 0b       	sbc	r19, r28
     2a8:	3c 0b       	sbc	r19, r28
     2aa:	3c 0b       	sbc	r19, r28
     2ac:	3c 0b       	sbc	r19, r28
     2ae:	3c 0b       	sbc	r19, r28
     2b0:	3c 0b       	sbc	r19, r28
     2b2:	3c 0b       	sbc	r19, r28
     2b4:	e0 0a       	sbc	r14, r16
     2b6:	ef 09       	sbc	r30, r15
     2b8:	3c 0b       	sbc	r19, r28
     2ba:	3c 0b       	sbc	r19, r28
     2bc:	3c 0b       	sbc	r19, r28
     2be:	e6 0a       	sbc	r14, r22
     2c0:	39 0b       	sbc	r19, r25
     2c2:	3c 0b       	sbc	r19, r28
     2c4:	3c 0b       	sbc	r19, r28
     2c6:	3c 0b       	sbc	r19, r28
     2c8:	3c 0b       	sbc	r19, r28
     2ca:	de 0a       	sbc	r13, r30
     2cc:	3c 0b       	sbc	r19, r28
     2ce:	3c 0b       	sbc	r19, r28
     2d0:	5b 0a       	sbc	r5, r27
     2d2:	3c 0b       	sbc	r19, r28
     2d4:	3b 0b       	sbc	r19, r27
     2d6:	3c 0b       	sbc	r19, r28
     2d8:	e8 0a       	sbc	r14, r24
     2da:	3c 0b       	sbc	r19, r28
     2dc:	3c 0b       	sbc	r19, r28
     2de:	3c 0b       	sbc	r19, r28
     2e0:	3c 0b       	sbc	r19, r28
     2e2:	3c 0b       	sbc	r19, r28
     2e4:	3c 0b       	sbc	r19, r28
     2e6:	3c 0b       	sbc	r19, r28
     2e8:	3c 0b       	sbc	r19, r28
     2ea:	3c 0b       	sbc	r19, r28
     2ec:	3c 0b       	sbc	r19, r28
     2ee:	3c 0b       	sbc	r19, r28
     2f0:	3c 0b       	sbc	r19, r28
     2f2:	3c 0b       	sbc	r19, r28
     2f4:	3c 0b       	sbc	r19, r28
     2f6:	e4 0a       	sbc	r14, r20
     2f8:	3c 0b       	sbc	r19, r28
     2fa:	3c 0b       	sbc	r19, r28
     2fc:	3c 0b       	sbc	r19, r28
     2fe:	3c 0b       	sbc	r19, r28
     300:	3c 0b       	sbc	r19, r28
     302:	3c 0b       	sbc	r19, r28
     304:	3c 0b       	sbc	r19, r28
     306:	3c 0b       	sbc	r19, r28
     308:	3c 0b       	sbc	r19, r28
     30a:	3c 0b       	sbc	r19, r28
     30c:	3c 0b       	sbc	r19, r28
     30e:	3c 0b       	sbc	r19, r28
     310:	e2 0a       	sbc	r14, r18
     312:	92 0a       	sbc	r9, r18
     314:	9a 0a       	sbc	r9, r26
     316:	a2 0a       	sbc	r10, r18
     318:	aa 0a       	sbc	r10, r26
     31a:	b2 0a       	sbc	r11, r18
     31c:	ba 0a       	sbc	r11, r26
     31e:	c2 0a       	sbc	r12, r18

00000320 <__ctors_end>:
     320:	11 24       	eor	r1, r1
     322:	1f be       	out	0x3f, r1	; 63
     324:	cf ef       	ldi	r28, 0xFF	; 255
     326:	cd bf       	out	0x3d, r28	; 61
     328:	df e2       	ldi	r29, 0x2F	; 47
     32a:	de bf       	out	0x3e, r29	; 62

0000032c <__do_copy_data>:
     32c:	10 e2       	ldi	r17, 0x20	; 32
     32e:	a0 e0       	ldi	r26, 0x00	; 0
     330:	b0 e2       	ldi	r27, 0x20	; 32
     332:	ee eb       	ldi	r30, 0xBE	; 190
     334:	f9 e2       	ldi	r31, 0x29	; 41
     336:	02 c0       	rjmp	.+4      	; 0x33c <__do_copy_data+0x10>
     338:	05 90       	lpm	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	aa 32       	cpi	r26, 0x2A	; 42
     33e:	b1 07       	cpc	r27, r17
     340:	d9 f7       	brne	.-10     	; 0x338 <__do_copy_data+0xc>

00000342 <__do_clear_bss>:
     342:	20 e2       	ldi	r18, 0x20	; 32
     344:	aa e2       	ldi	r26, 0x2A	; 42
     346:	b0 e2       	ldi	r27, 0x20	; 32
     348:	01 c0       	rjmp	.+2      	; 0x34c <.do_clear_bss_start>

0000034a <.do_clear_bss_loop>:
     34a:	1d 92       	st	X+, r1

0000034c <.do_clear_bss_start>:
     34c:	a6 3a       	cpi	r26, 0xA6	; 166
     34e:	b2 07       	cpc	r27, r18
     350:	e1 f7       	brne	.-8      	; 0x34a <.do_clear_bss_loop>
     352:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <main>
     356:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <_exit>

0000035a <__bad_interrupt>:
     35a:	52 ce       	rjmp	.-860    	; 0x0 <__vectors>

0000035c <wdt_set_timeout_period>:
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     35c:	60 91 80 00 	lds	r22, 0x0080
     360:	62 70       	andi	r22, 0x02	; 2
     362:	61 60       	ori	r22, 0x01	; 1
     364:	24 e0       	ldi	r18, 0x04	; 4
     366:	82 9f       	mul	r24, r18
     368:	c0 01       	movw	r24, r0
     36a:	11 24       	eor	r1, r1
     36c:	8c 73       	andi	r24, 0x3C	; 60
     36e:	68 2b       	or	r22, r24
     370:	80 e8       	ldi	r24, 0x80	; 128
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ccp_write_io>
     378:	e0 e8       	ldi	r30, 0x80	; 128
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	82 81       	ldd	r24, Z+2	; 0x02
     37e:	80 fd       	sbrc	r24, 0
     380:	fd cf       	rjmp	.-6      	; 0x37c <wdt_set_timeout_period+0x20>
     382:	08 95       	ret

00000384 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     384:	60 91 80 00 	lds	r22, 0x0080
     388:	6c 73       	andi	r22, 0x3C	; 60
     38a:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     38c:	80 e8       	ldi	r24, 0x80	; 128
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     394:	e0 e8       	ldi	r30, 0x80	; 128
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	80 fd       	sbrc	r24, 0
     39c:	fd cf       	rjmp	.-6      	; 0x398 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
     39e:	08 95       	ret

000003a0 <init_i2c>:
{
	cmd_read_register(index, offset);
	wait_result();
	
	return REG_READ;
}
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	29 97       	sbiw	r28, 0x09	; 9
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	80 e8       	ldi	r24, 0x80	; 128
     3b0:	9a e1       	ldi	r25, 0x1A	; 26
     3b2:	a6 e0       	ldi	r26, 0x06	; 6
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	ab 83       	std	Y+3, r26	; 0x03
     3bc:	bc 83       	std	Y+4, r27	; 0x04
     3be:	83 e2       	ldi	r24, 0x23	; 35
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8d 83       	std	Y+5, r24	; 0x05
     3c8:	9e 83       	std	Y+6, r25	; 0x06
     3ca:	af 83       	std	Y+7, r26	; 0x07
     3cc:	b8 87       	std	Y+8, r27	; 0x08
     3ce:	80 e5       	ldi	r24, 0x50	; 80
     3d0:	89 87       	std	Y+9, r24	; 0x09
     3d2:	60 e4       	ldi	r22, 0x40	; 64
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sysclk_enable_module>
     3da:	be 01       	movw	r22, r28
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	80 e8       	ldi	r24, 0x80	; 128
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	0e 94 2e 14 	call	0x285c	; 0x285c <twi_master_init>
     3e8:	e0 e8       	ldi	r30, 0x80	; 128
     3ea:	f4 e0       	ldi	r31, 0x04	; 4
     3ec:	81 81       	ldd	r24, Z+1	; 0x01
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	81 83       	std	Z+1, r24	; 0x01
     3f2:	78 94       	sei
     3f4:	29 96       	adiw	r28, 0x09	; 9
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <init_mtch6301>:
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	59 e1       	ldi	r21, 0x19	; 25
     404:	60 e2       	ldi	r22, 0x20	; 32
     406:	80 e4       	ldi	r24, 0x40	; 64
     408:	96 e0       	ldi	r25, 0x06	; 6
     40a:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     40e:	80 e2       	ldi	r24, 0x20	; 32
     410:	80 93 b0 00 	sts	0x00B0, r24
     414:	e0 e4       	ldi	r30, 0x40	; 64
     416:	f6 e0       	ldi	r31, 0x06	; 6
     418:	82 87       	std	Z+10, r24	; 0x0a
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	81 87       	std	Z+9, r24	; 0x09
     41e:	e0 ea       	ldi	r30, 0xA0	; 160
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	82 81       	ldd	r24, Z+2	; 0x02
     424:	81 60       	ori	r24, 0x01	; 1
     426:	82 83       	std	Z+2, r24	; 0x02
     428:	78 94       	sei
     42a:	08 95       	ret

0000042c <init_mtchio>:
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	60 e2       	ldi	r22, 0x20	; 32
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	96 e0       	ldi	r25, 0x06	; 6
     436:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	60 e4       	ldi	r22, 0x40	; 64
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	96 e0       	ldi	r25, 0x06	; 6
     444:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	60 e8       	ldi	r22, 0x80	; 128
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	96 e0       	ldi	r25, 0x06	; 6
     452:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	60 e4       	ldi	r22, 0x40	; 64
     45c:	80 e6       	ldi	r24, 0x60	; 96
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	80 ee       	ldi	r24, 0xE0	; 224
     46c:	97 e0       	ldi	r25, 0x07	; 7
     46e:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	80 e6       	ldi	r24, 0x60	; 96
     47a:	96 e0       	ldi	r25, 0x06	; 6
     47c:	0e 94 02 10 	call	0x2004	; 0x2004 <ioport_configure_port_pin>
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	80 e6       	ldi	r24, 0x60	; 96
     488:	96 e0       	ldi	r25, 0x06	; 6
     48a:	0c 94 02 10 	jmp	0x2004	; 0x2004 <ioport_configure_port_pin>
     48e:	08 95       	ret

00000490 <cmd_write_register>:
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	61 97       	sbiw	r28, 0x11	; 17
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	9a ef       	ldi	r25, 0xFA	; 250
     4a0:	90 93 03 20 	sts	0x2003, r25
     4a4:	95 e5       	ldi	r25, 0x55	; 85
     4a6:	99 83       	std	Y+1, r25	; 0x01
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	95 e1       	ldi	r25, 0x15	; 21
     4ae:	9b 83       	std	Y+3, r25	; 0x03
     4b0:	8c 83       	std	Y+4, r24	; 0x04
     4b2:	6d 83       	std	Y+5, r22	; 0x05
     4b4:	4e 83       	std	Y+6, r20	; 0x06
     4b6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <wdt_kick>
     4ba:	be 01       	movw	r22, r28
     4bc:	69 5f       	subi	r22, 0xF9	; 249
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	8b e0       	ldi	r24, 0x0B	; 11
     4c2:	fb 01       	movw	r30, r22
     4c4:	11 92       	st	Z+, r1
     4c6:	8a 95       	dec	r24
     4c8:	e9 f7       	brne	.-6      	; 0x4c4 <cmd_write_register+0x34>
     4ca:	85 e2       	ldi	r24, 0x25	; 37
     4cc:	8f 83       	std	Y+7, r24	; 0x07
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	8d 87       	std	Y+13, r24	; 0x0d
     4d4:	9e 87       	std	Y+14, r25	; 0x0e
     4d6:	86 e0       	ldi	r24, 0x06	; 6
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	8f 87       	std	Y+15, r24	; 0x0f
     4dc:	98 8b       	std	Y+16, r25	; 0x10
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	0e 94 43 14 	call	0x2886	; 0x2886 <twi_master_transfer>
     4e8:	80 93 03 20 	sts	0x2003, r24
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	90 93 35 20 	sts	0x2035, r25
     4f2:	81 11       	cpse	r24, r1
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <cmd_write_register+0x68>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	89 2f       	mov	r24, r25
     4fa:	61 96       	adiw	r28, 0x11	; 17
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <cmd_mtch6301>:
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}

void cmd_mtch6301(uint8_t cmd)
{
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	2e 97       	sbiw	r28, 0x0e	; 14
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62
	status_res = ERR_UNSUPPORTED_DEV;
     516:	9a ef       	ldi	r25, 0xFA	; 250
     518:	90 93 03 20 	sts	0x2003, r25
	uint8_t cmd_slaver[3]={0x55,0x01,cmd};
     51c:	95 e5       	ldi	r25, 0x55	; 85
     51e:	99 83       	std	Y+1, r25	; 0x01
     520:	11 e0       	ldi	r17, 0x01	; 1
     522:	1a 83       	std	Y+2, r17	; 0x02
     524:	8b 83       	std	Y+3, r24	; 0x03
		
	#ifdef ENABLE_WDT
		wdt_kick();
     526:	0e 94 bc 0c 	call	0x1978	; 0x1978 <wdt_kick>
	#endif
	
	twi_package_t package = {
     52a:	be 01       	movw	r22, r28
     52c:	6c 5f       	subi	r22, 0xFC	; 252
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	8b e0       	ldi	r24, 0x0B	; 11
     532:	fb 01       	movw	r30, r22
     534:	11 92       	st	Z+, r1
     536:	8a 95       	dec	r24
     538:	e9 f7       	brne	.-6      	; 0x534 <cmd_mtch6301+0x2e>
     53a:	85 e2       	ldi	r24, 0x25	; 37
     53c:	8c 83       	std	Y+4, r24	; 0x04
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	8a 87       	std	Y+10, r24	; 0x0a
     544:	9b 87       	std	Y+11, r25	; 0x0b
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	8c 87       	std	Y+12, r24	; 0x0c
     54c:	9d 87       	std	Y+13, r25	; 0x0d
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	80 e8       	ldi	r24, 0x80	; 128
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	0e 94 43 14 	call	0x2886	; 0x2886 <twi_master_transfer>
		.buffer			= (void *)cmd_slaver,
		.length			= 3,
		.no_wait		= false
	};
	
	status_res = twi_master_write(&TWI_MASTER, &package);
     558:	80 93 03 20 	sts	0x2003, r24
	cmd_status = 1;
     55c:	10 93 35 20 	sts	0x2035, r17
}
     560:	2e 96       	adiw	r28, 0x0e	; 14
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	08 95       	ret

0000056e <write_mtch_settings>:
	}
	
	cmd_res = 0x01;
}	

bool write_mtch_settings(void) {
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
     572:	85 e5       	ldi	r24, 0x55	; 85
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <write_mtch_settings+0x12>
     57e:	f7 c4       	rjmp	.+2542   	; 0xf6e <write_mtch_settings+0xa00>
		return true;
	}
	#ifdef ENABLE_WDT
		wdt_kick();
     580:	0e 94 bc 0c 	call	0x1978	; 0x1978 <wdt_kick>
	#endif
	
	twinkle(255, 0, 0);
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <twinkle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	83 ed       	ldi	r24, 0xD3	; 211
     592:	90 e3       	ldi	r25, 0x30	; 48
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <write_mtch_settings+0x26>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <write_mtch_settings+0x30>
     59e:	00 00       	nop
	
	_delay_ms(16000);
	
	//turn off touch and save to NVRAM first
	cmd_mtch6301(0x01);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	b1 df       	rcall	.-158    	; 0x506 <cmd_mtch6301>
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	83 ed       	ldi	r24, 0xD3	; 211
     5a8:	90 e3       	ldi	r25, 0x30	; 48
     5aa:	21 50       	subi	r18, 0x01	; 1
     5ac:	80 40       	sbci	r24, 0x00	; 0
     5ae:	90 40       	sbci	r25, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <write_mtch_settings+0x3c>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <write_mtch_settings+0x46>
     5b4:	00 00       	nop
	_delay_ms(16000);
	cmd_mtch6301(0x17);
     5b6:	87 e1       	ldi	r24, 0x17	; 23
     5b8:	a6 df       	rcall	.-180    	; 0x506 <cmd_mtch6301>
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	83 ed       	ldi	r24, 0xD3	; 211
     5be:	90 e3       	ldi	r25, 0x30	; 48
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <write_mtch_settings+0x52>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <write_mtch_settings+0x5c>
     5ca:	00 00       	nop
	_delay_ms(16000);

	//GENERAL - INDEX 0x00
	if (EEPROM_GENERAL_UPDATE_BOOL) {
     5cc:	8d e4       	ldi	r24, 0x4D	; 77
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     5d4:	88 23       	and	r24, r24
     5d6:	09 f4       	brne	.+2      	; 0x5da <write_mtch_settings+0x6c>
     5d8:	bc c0       	rjmp	.+376    	; 0x752 <write_mtch_settings+0x1e4>
		twinkle(255, 255, 0);
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	6f ef       	ldi	r22, 0xFF	; 255
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x00, 0x01, EEPROM_NUMRXCHANNELS); //NUM RX CHANNELS
     5e4:	8a e0       	ldi	r24, 0x0A	; 10
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     5ec:	48 2f       	mov	r20, r24
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	4e df       	rcall	.-356    	; 0x490 <cmd_write_register>
     5f4:	c8 2f       	mov	r28, r24
     5f6:	2f ef       	ldi	r18, 0xFF	; 255
     5f8:	89 e6       	ldi	r24, 0x69	; 105
     5fa:	98 e1       	ldi	r25, 0x18	; 24
     5fc:	21 50       	subi	r18, 0x01	; 1
     5fe:	80 40       	sbci	r24, 0x00	; 0
     600:	90 40       	sbci	r25, 0x00	; 0
     602:	e1 f7       	brne	.-8      	; 0x5fc <write_mtch_settings+0x8e>
     604:	00 c0       	rjmp	.+0      	; 0x606 <write_mtch_settings+0x98>
     606:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x02, EEPROM_NUMTXCHANNELS); //NUM TX CHANNELS
     608:	8b e0       	ldi	r24, 0x0B	; 11
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     610:	48 2f       	mov	r20, r24
     612:	62 e0       	ldi	r22, 0x02	; 2
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	3c df       	rcall	.-392    	; 0x490 <cmd_write_register>
     618:	c8 2b       	or	r28, r24
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	89 e6       	ldi	r24, 0x69	; 105
     61e:	98 e1       	ldi	r25, 0x18	; 24
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <write_mtch_settings+0xb2>
     628:	00 c0       	rjmp	.+0      	; 0x62a <write_mtch_settings+0xbc>
     62a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x04, EEPROM_RXSCALE_7_0); //RX SCALING [7:0]
     62c:	8c e0       	ldi	r24, 0x0C	; 12
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     634:	48 2f       	mov	r20, r24
     636:	64 e0       	ldi	r22, 0x04	; 4
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	2a df       	rcall	.-428    	; 0x490 <cmd_write_register>
     63c:	c8 2b       	or	r28, r24
     63e:	2f ef       	ldi	r18, 0xFF	; 255
     640:	89 e6       	ldi	r24, 0x69	; 105
     642:	98 e1       	ldi	r25, 0x18	; 24
     644:	21 50       	subi	r18, 0x01	; 1
     646:	80 40       	sbci	r24, 0x00	; 0
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <write_mtch_settings+0xd6>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <write_mtch_settings+0xe0>
     64e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x05, EEPROM_RXSCALE_15_8); //RX SCALING [15:8]
     650:	8d e0       	ldi	r24, 0x0D	; 13
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     658:	48 2f       	mov	r20, r24
     65a:	65 e0       	ldi	r22, 0x05	; 5
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	18 df       	rcall	.-464    	; 0x490 <cmd_write_register>
     660:	c8 2b       	or	r28, r24
     662:	2f ef       	ldi	r18, 0xFF	; 255
     664:	89 e6       	ldi	r24, 0x69	; 105
     666:	98 e1       	ldi	r25, 0x18	; 24
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	80 40       	sbci	r24, 0x00	; 0
     66c:	90 40       	sbci	r25, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <write_mtch_settings+0xfa>
     670:	00 c0       	rjmp	.+0      	; 0x672 <write_mtch_settings+0x104>
     672:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x06, EEPROM_TXSCALE_7_0); //TX SCALING [7:0]
     674:	8e e0       	ldi	r24, 0x0E	; 14
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     67c:	48 2f       	mov	r20, r24
     67e:	66 e0       	ldi	r22, 0x06	; 6
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	06 df       	rcall	.-500    	; 0x490 <cmd_write_register>
     684:	c8 2b       	or	r28, r24
     686:	2f ef       	ldi	r18, 0xFF	; 255
     688:	89 e6       	ldi	r24, 0x69	; 105
     68a:	98 e1       	ldi	r25, 0x18	; 24
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	90 40       	sbci	r25, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <write_mtch_settings+0x11e>
     694:	00 c0       	rjmp	.+0      	; 0x696 <write_mtch_settings+0x128>
     696:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x07, EEPROM_TXSCALE_15_8); //TX SCALING [15:8]
     698:	8f e0       	ldi	r24, 0x0F	; 15
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     6a0:	48 2f       	mov	r20, r24
     6a2:	67 e0       	ldi	r22, 0x07	; 7
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	f4 de       	rcall	.-536    	; 0x490 <cmd_write_register>
     6a8:	c8 2b       	or	r28, r24
     6aa:	2f ef       	ldi	r18, 0xFF	; 255
     6ac:	89 e6       	ldi	r24, 0x69	; 105
     6ae:	98 e1       	ldi	r25, 0x18	; 24
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	80 40       	sbci	r24, 0x00	; 0
     6b4:	90 40       	sbci	r25, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <write_mtch_settings+0x142>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <write_mtch_settings+0x14c>
     6ba:	00 00       	nop
		_delay_ms(8000);
		
		write_status |= cmd_write_register(0x00, 0x00, 0x00); //flag1
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	e6 de       	rcall	.-564    	; 0x490 <cmd_write_register>
     6c4:	c8 2b       	or	r28, r24
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	89 e6       	ldi	r24, 0x69	; 105
     6ca:	98 e1       	ldi	r25, 0x18	; 24
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <write_mtch_settings+0x15e>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <write_mtch_settings+0x168>
     6d6:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x03, 0xd0); //customFlag
     6d8:	40 ed       	ldi	r20, 0xD0	; 208
     6da:	63 e0       	ldi	r22, 0x03	; 3
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	d8 de       	rcall	.-592    	; 0x490 <cmd_write_register>
     6e0:	c8 2b       	or	r28, r24
     6e2:	2f ef       	ldi	r18, 0xFF	; 255
     6e4:	89 e6       	ldi	r24, 0x69	; 105
     6e6:	98 e1       	ldi	r25, 0x18	; 24
     6e8:	21 50       	subi	r18, 0x01	; 1
     6ea:	80 40       	sbci	r24, 0x00	; 0
     6ec:	90 40       	sbci	r25, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <write_mtch_settings+0x17a>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <write_mtch_settings+0x184>
     6f2:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x08, 0x00); //rxDiagChannel
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	68 e0       	ldi	r22, 0x08	; 8
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	ca de       	rcall	.-620    	; 0x490 <cmd_write_register>
     6fc:	c8 2b       	or	r28, r24
     6fe:	2f ef       	ldi	r18, 0xFF	; 255
     700:	89 e6       	ldi	r24, 0x69	; 105
     702:	98 e1       	ldi	r25, 0x18	; 24
     704:	21 50       	subi	r18, 0x01	; 1
     706:	80 40       	sbci	r24, 0x00	; 0
     708:	90 40       	sbci	r25, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <write_mtch_settings+0x196>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <write_mtch_settings+0x1a0>
     70e:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x09, 0x00); //txDiagChannel
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	69 e0       	ldi	r22, 0x09	; 9
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	bc de       	rcall	.-648    	; 0x490 <cmd_write_register>
     718:	d8 2f       	mov	r29, r24
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	89 e6       	ldi	r24, 0x69	; 105
     71e:	98 e1       	ldi	r25, 0x18	; 24
     720:	21 50       	subi	r18, 0x01	; 1
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <write_mtch_settings+0x1b2>
     728:	00 c0       	rjmp	.+0      	; 0x72a <write_mtch_settings+0x1bc>
     72a:	00 00       	nop
		write_status |= cmd_write_register(0x00, 0x0c, 0x70); //stuckTimeout [7:0]
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x0d, 0x17); //stuckTimeout [15:8]
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
     72c:	87 e1       	ldi	r24, 0x17	; 23
     72e:	eb de       	rcall	.-554    	; 0x506 <cmd_mtch6301>
     730:	2f ef       	ldi	r18, 0xFF	; 255
     732:	83 ed       	ldi	r24, 0xD3	; 211
     734:	90 e3       	ldi	r25, 0x30	; 48
     736:	21 50       	subi	r18, 0x01	; 1
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	90 40       	sbci	r25, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <write_mtch_settings+0x1c8>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <write_mtch_settings+0x1d2>
     740:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x03, 0xd0); //customFlag
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x08, 0x00); //rxDiagChannel
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x09, 0x00); //txDiagChannel
     742:	cd 2b       	or	r28, r29
		write_status |= cmd_write_register(0x00, 0x0d, 0x17); //stuckTimeout [15:8]
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, STATUS_OK != write_status);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	09 f4       	brne	.+2      	; 0x74a <write_mtch_settings+0x1dc>
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	8d e4       	ldi	r24, 0x4D	; 77
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//RXMAP - INDEX 0x01
	if (EEPROM_RXMAP_UPDATE_BOOL) {
     752:	8e e4       	ldi	r24, 0x4E	; 78
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     75a:	88 23       	and	r24, r24
     75c:	09 f4       	brne	.+2      	; 0x760 <write_mtch_settings+0x1f2>
     75e:	95 c0       	rjmp	.+298    	; 0x88a <write_mtch_settings+0x31c>
		twinkle(0, 255, 0);
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	6f ef       	ldi	r22, 0xFF	; 255
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	c2 d7       	rcall	.+3972   	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x01, 0x00, EEPROM_RXPIN0);
     768:	80 e1       	ldi	r24, 0x10	; 16
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     770:	48 2f       	mov	r20, r24
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	8c de       	rcall	.-744    	; 0x490 <cmd_write_register>
     778:	c8 2f       	mov	r28, r24
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	89 e6       	ldi	r24, 0x69	; 105
     77e:	98 e1       	ldi	r25, 0x18	; 24
     780:	21 50       	subi	r18, 0x01	; 1
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	90 40       	sbci	r25, 0x00	; 0
     786:	e1 f7       	brne	.-8      	; 0x780 <write_mtch_settings+0x212>
     788:	00 c0       	rjmp	.+0      	; 0x78a <write_mtch_settings+0x21c>
     78a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x01, EEPROM_RXPIN1);
     78c:	81 e1       	ldi	r24, 0x11	; 17
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     794:	48 2f       	mov	r20, r24
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	7a de       	rcall	.-780    	; 0x490 <cmd_write_register>
     79c:	c8 2b       	or	r28, r24
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	89 e6       	ldi	r24, 0x69	; 105
     7a2:	98 e1       	ldi	r25, 0x18	; 24
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	80 40       	sbci	r24, 0x00	; 0
     7a8:	90 40       	sbci	r25, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <write_mtch_settings+0x236>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <write_mtch_settings+0x240>
     7ae:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x02, EEPROM_RXPIN2);
     7b0:	82 e1       	ldi	r24, 0x12	; 18
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     7b8:	48 2f       	mov	r20, r24
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	68 de       	rcall	.-816    	; 0x490 <cmd_write_register>
     7c0:	c8 2b       	or	r28, r24
     7c2:	2f ef       	ldi	r18, 0xFF	; 255
     7c4:	89 e6       	ldi	r24, 0x69	; 105
     7c6:	98 e1       	ldi	r25, 0x18	; 24
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	90 40       	sbci	r25, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <write_mtch_settings+0x25a>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <write_mtch_settings+0x264>
     7d2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x03, EEPROM_RXPIN3);
     7d4:	83 e1       	ldi	r24, 0x13	; 19
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     7dc:	48 2f       	mov	r20, r24
     7de:	63 e0       	ldi	r22, 0x03	; 3
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	56 de       	rcall	.-852    	; 0x490 <cmd_write_register>
     7e4:	c8 2b       	or	r28, r24
     7e6:	2f ef       	ldi	r18, 0xFF	; 255
     7e8:	89 e6       	ldi	r24, 0x69	; 105
     7ea:	98 e1       	ldi	r25, 0x18	; 24
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	80 40       	sbci	r24, 0x00	; 0
     7f0:	90 40       	sbci	r25, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <write_mtch_settings+0x27e>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <write_mtch_settings+0x288>
     7f6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
     7f8:	84 e1       	ldi	r24, 0x14	; 20
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     800:	48 2f       	mov	r20, r24
     802:	64 e0       	ldi	r22, 0x04	; 4
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	44 de       	rcall	.-888    	; 0x490 <cmd_write_register>
     808:	c8 2b       	or	r28, r24
     80a:	2f ef       	ldi	r18, 0xFF	; 255
     80c:	89 e6       	ldi	r24, 0x69	; 105
     80e:	98 e1       	ldi	r25, 0x18	; 24
     810:	21 50       	subi	r18, 0x01	; 1
     812:	80 40       	sbci	r24, 0x00	; 0
     814:	90 40       	sbci	r25, 0x00	; 0
     816:	e1 f7       	brne	.-8      	; 0x810 <write_mtch_settings+0x2a2>
     818:	00 c0       	rjmp	.+0      	; 0x81a <write_mtch_settings+0x2ac>
     81a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
     81c:	85 e1       	ldi	r24, 0x15	; 21
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     824:	48 2f       	mov	r20, r24
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	32 de       	rcall	.-924    	; 0x490 <cmd_write_register>
     82c:	c8 2b       	or	r28, r24
     82e:	2f ef       	ldi	r18, 0xFF	; 255
     830:	89 e6       	ldi	r24, 0x69	; 105
     832:	98 e1       	ldi	r25, 0x18	; 24
     834:	21 50       	subi	r18, 0x01	; 1
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <write_mtch_settings+0x2c6>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <write_mtch_settings+0x2d0>
     83e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     848:	48 2f       	mov	r20, r24
     84a:	66 e0       	ldi	r22, 0x06	; 6
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	20 de       	rcall	.-960    	; 0x490 <cmd_write_register>
     850:	d8 2f       	mov	r29, r24
     852:	2f ef       	ldi	r18, 0xFF	; 255
     854:	89 e6       	ldi	r24, 0x69	; 105
     856:	98 e1       	ldi	r25, 0x18	; 24
     858:	21 50       	subi	r18, 0x01	; 1
     85a:	80 40       	sbci	r24, 0x00	; 0
     85c:	90 40       	sbci	r25, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <write_mtch_settings+0x2ea>
     860:	00 c0       	rjmp	.+0      	; 0x862 <write_mtch_settings+0x2f4>
     862:	00 00       	nop
		 write_status |= cmd_write_register(0x01, 0x0b, EEPROM_RXPIN11);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
     864:	87 e1       	ldi	r24, 0x17	; 23
     866:	4f de       	rcall	.-866    	; 0x506 <cmd_mtch6301>
     868:	2f ef       	ldi	r18, 0xFF	; 255
     86a:	83 ed       	ldi	r24, 0xD3	; 211
     86c:	90 e3       	ldi	r25, 0x30	; 48
     86e:	21 50       	subi	r18, 0x01	; 1
     870:	80 40       	sbci	r24, 0x00	; 0
     872:	90 40       	sbci	r25, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <write_mtch_settings+0x300>
     876:	00 c0       	rjmp	.+0      	; 0x878 <write_mtch_settings+0x30a>
     878:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
     87a:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, STATUS_OK != write_status);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	09 f4       	brne	.+2      	; 0x882 <write_mtch_settings+0x314>
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	8e e4       	ldi	r24, 0x4E	; 78
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//TXMAP - INDEX 0x02
	if (EEPROM_TXMAP_UPDATE_BOOL) {
     88a:	8f e4       	ldi	r24, 0x4F	; 79
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     892:	88 23       	and	r24, r24
     894:	09 f4       	brne	.+2      	; 0x898 <write_mtch_settings+0x32a>
     896:	71 c0       	rjmp	.+226    	; 0x97a <write_mtch_settings+0x40c>
		twinkle(0, 255, 255);
     898:	4f ef       	ldi	r20, 0xFF	; 255
     89a:	6f ef       	ldi	r22, 0xFF	; 255
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	26 d7       	rcall	.+3660   	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x02, 0x00, EEPROM_TXPIN0);
     8a0:	8d e1       	ldi	r24, 0x1D	; 29
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     8a8:	48 2f       	mov	r20, r24
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	f0 dd       	rcall	.-1056   	; 0x490 <cmd_write_register>
     8b0:	c8 2f       	mov	r28, r24
     8b2:	2f ef       	ldi	r18, 0xFF	; 255
     8b4:	89 e6       	ldi	r24, 0x69	; 105
     8b6:	98 e1       	ldi	r25, 0x18	; 24
     8b8:	21 50       	subi	r18, 0x01	; 1
     8ba:	80 40       	sbci	r24, 0x00	; 0
     8bc:	90 40       	sbci	r25, 0x00	; 0
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <write_mtch_settings+0x34a>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <write_mtch_settings+0x354>
     8c2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x01, EEPROM_TXPIN1);
     8c4:	8e e1       	ldi	r24, 0x1E	; 30
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     8cc:	48 2f       	mov	r20, r24
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	de dd       	rcall	.-1092   	; 0x490 <cmd_write_register>
     8d4:	c8 2b       	or	r28, r24
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	89 e6       	ldi	r24, 0x69	; 105
     8da:	98 e1       	ldi	r25, 0x18	; 24
     8dc:	21 50       	subi	r18, 0x01	; 1
     8de:	80 40       	sbci	r24, 0x00	; 0
     8e0:	90 40       	sbci	r25, 0x00	; 0
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <write_mtch_settings+0x36e>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <write_mtch_settings+0x378>
     8e6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
     8e8:	8f e1       	ldi	r24, 0x1F	; 31
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     8f0:	48 2f       	mov	r20, r24
     8f2:	62 e0       	ldi	r22, 0x02	; 2
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	cc dd       	rcall	.-1128   	; 0x490 <cmd_write_register>
     8f8:	c8 2b       	or	r28, r24
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	89 e6       	ldi	r24, 0x69	; 105
     8fe:	98 e1       	ldi	r25, 0x18	; 24
     900:	21 50       	subi	r18, 0x01	; 1
     902:	80 40       	sbci	r24, 0x00	; 0
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <write_mtch_settings+0x392>
     908:	00 c0       	rjmp	.+0      	; 0x90a <write_mtch_settings+0x39c>
     90a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
     90c:	80 e2       	ldi	r24, 0x20	; 32
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     914:	48 2f       	mov	r20, r24
     916:	63 e0       	ldi	r22, 0x03	; 3
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	ba dd       	rcall	.-1164   	; 0x490 <cmd_write_register>
     91c:	c8 2b       	or	r28, r24
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	89 e6       	ldi	r24, 0x69	; 105
     922:	98 e1       	ldi	r25, 0x18	; 24
     924:	21 50       	subi	r18, 0x01	; 1
     926:	80 40       	sbci	r24, 0x00	; 0
     928:	90 40       	sbci	r25, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <write_mtch_settings+0x3b6>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <write_mtch_settings+0x3c0>
     92e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
     930:	81 e2       	ldi	r24, 0x21	; 33
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     938:	48 2f       	mov	r20, r24
     93a:	64 e0       	ldi	r22, 0x04	; 4
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	a8 dd       	rcall	.-1200   	; 0x490 <cmd_write_register>
     940:	d8 2f       	mov	r29, r24
     942:	2f ef       	ldi	r18, 0xFF	; 255
     944:	89 e6       	ldi	r24, 0x69	; 105
     946:	98 e1       	ldi	r25, 0x18	; 24
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <write_mtch_settings+0x3da>
     950:	00 c0       	rjmp	.+0      	; 0x952 <write_mtch_settings+0x3e4>
     952:	00 00       	nop
		 write_status |= cmd_write_register(0x02, 0x10, EEPROM_TXPIN16);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
     954:	87 e1       	ldi	r24, 0x17	; 23
     956:	d7 dd       	rcall	.-1106   	; 0x506 <cmd_mtch6301>
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	83 ed       	ldi	r24, 0xD3	; 211
     95c:	90 e3       	ldi	r25, 0x30	; 48
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	80 40       	sbci	r24, 0x00	; 0
     962:	90 40       	sbci	r25, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <write_mtch_settings+0x3f0>
     966:	00 c0       	rjmp	.+0      	; 0x968 <write_mtch_settings+0x3fa>
     968:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
     96a:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, STATUS_OK != write_status);
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	09 f4       	brne	.+2      	; 0x972 <write_mtch_settings+0x404>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	8f e4       	ldi	r24, 0x4F	; 79
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//SELF - INDEX 0x10
	if (EEPROM_SELF_UPDATE_BOOL) {
     97a:	80 e5       	ldi	r24, 0x50	; 80
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <write_mtch_settings+0x41a>
     986:	57 c0       	rjmp	.+174    	; 0xa36 <write_mtch_settings+0x4c8>
		twinkle(0, 0, 255);
     988:	4f ef       	ldi	r20, 0xFF	; 255
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	ae d6       	rcall	.+3420   	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x10, 0x00, EEPROM_SELFSCANTIME); //SELF SCAN TIME
     990:	8f e2       	ldi	r24, 0x2F	; 47
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     998:	48 2f       	mov	r20, r24
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	78 dd       	rcall	.-1296   	; 0x490 <cmd_write_register>
     9a0:	c8 2f       	mov	r28, r24
     9a2:	2f ef       	ldi	r18, 0xFF	; 255
     9a4:	89 e6       	ldi	r24, 0x69	; 105
     9a6:	98 e1       	ldi	r25, 0x18	; 24
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	80 40       	sbci	r24, 0x00	; 0
     9ac:	90 40       	sbci	r25, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <write_mtch_settings+0x43a>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <write_mtch_settings+0x444>
     9b2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
     9b4:	80 e3       	ldi	r24, 0x30	; 48
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     9bc:	48 2f       	mov	r20, r24
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	80 e1       	ldi	r24, 0x10	; 16
     9c2:	66 dd       	rcall	.-1332   	; 0x490 <cmd_write_register>
     9c4:	c8 2b       	or	r28, r24
     9c6:	2f ef       	ldi	r18, 0xFF	; 255
     9c8:	89 e6       	ldi	r24, 0x69	; 105
     9ca:	98 e1       	ldi	r25, 0x18	; 24
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	80 40       	sbci	r24, 0x00	; 0
     9d0:	90 40       	sbci	r25, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <write_mtch_settings+0x45e>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <write_mtch_settings+0x468>
     9d6:	00 00       	nop
		_delay_ms(8000);
		
		write_status |= cmd_write_register(0x10, 0x02, 0x01); //selfSampleFreq
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	62 e0       	ldi	r22, 0x02	; 2
     9dc:	80 e1       	ldi	r24, 0x10	; 16
     9de:	58 dd       	rcall	.-1360   	; 0x490 <cmd_write_register>
     9e0:	c8 2b       	or	r28, r24
     9e2:	2f ef       	ldi	r18, 0xFF	; 255
     9e4:	89 e6       	ldi	r24, 0x69	; 105
     9e6:	98 e1       	ldi	r25, 0x18	; 24
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	80 40       	sbci	r24, 0x00	; 0
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <write_mtch_settings+0x47a>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <write_mtch_settings+0x484>
     9f2:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x10, 0x03, 0x01); //stutterMult
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	63 e0       	ldi	r22, 0x03	; 3
     9f8:	80 e1       	ldi	r24, 0x10	; 16
     9fa:	4a dd       	rcall	.-1388   	; 0x490 <cmd_write_register>
     9fc:	d8 2f       	mov	r29, r24
     9fe:	2f ef       	ldi	r18, 0xFF	; 255
     a00:	89 e6       	ldi	r24, 0x69	; 105
     a02:	98 e1       	ldi	r25, 0x18	; 24
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	80 40       	sbci	r24, 0x00	; 0
     a08:	90 40       	sbci	r25, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <write_mtch_settings+0x496>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <write_mtch_settings+0x4a0>
     a0e:	00 00       	nop
		_delay_ms(8000);
		//cmd_write_register(0x11, 0x00, 0x00); //selfscanfinetune...
		//_delay_ms(8000);
		
		
		cmd_mtch6301(0x17);
     a10:	87 e1       	ldi	r24, 0x17	; 23
     a12:	79 dd       	rcall	.-1294   	; 0x506 <cmd_mtch6301>
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	83 ed       	ldi	r24, 0xD3	; 211
     a18:	90 e3       	ldi	r25, 0x30	; 48
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	80 40       	sbci	r24, 0x00	; 0
     a1e:	90 40       	sbci	r25, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <write_mtch_settings+0x4ac>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <write_mtch_settings+0x4b6>
     a24:	00 00       	nop
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
		_delay_ms(8000);
		
		write_status |= cmd_write_register(0x10, 0x02, 0x01); //selfSampleFreq
		_delay_ms(8000);
		write_status |= cmd_write_register(0x10, 0x03, 0x01); //stutterMult
     a26:	cd 2b       	or	r28, r29
		//_delay_ms(8000);
		
		
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_SELF, STATUS_OK != write_status);
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	09 f4       	brne	.+2      	; 0xa2e <write_mtch_settings+0x4c0>
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	80 e5       	ldi	r24, 0x50	; 80
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//MUTUAL - INDEX 0x20
	if (EEPROM_MUTUAL_UPDATE_BOOL) {
     a36:	81 e5       	ldi	r24, 0x51	; 81
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <write_mtch_settings+0x4d6>
     a42:	4a c0       	rjmp	.+148    	; 0xad8 <write_mtch_settings+0x56a>
		twinkle(255, 0, 255);
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	50 d6       	rcall	.+3232   	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
     a4c:	81 e3       	ldi	r24, 0x31	; 49
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     a54:	48 2f       	mov	r20, r24
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	1a dd       	rcall	.-1484   	; 0x490 <cmd_write_register>
     a5c:	c8 2f       	mov	r28, r24
     a5e:	2f ef       	ldi	r18, 0xFF	; 255
     a60:	89 e6       	ldi	r24, 0x69	; 105
     a62:	98 e1       	ldi	r25, 0x18	; 24
     a64:	21 50       	subi	r18, 0x01	; 1
     a66:	80 40       	sbci	r24, 0x00	; 0
     a68:	90 40       	sbci	r25, 0x00	; 0
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <write_mtch_settings+0x4f6>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <write_mtch_settings+0x500>
     a6e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
     a70:	82 e3       	ldi	r24, 0x32	; 50
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     a78:	48 2f       	mov	r20, r24
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	80 e2       	ldi	r24, 0x20	; 32
     a7e:	08 dd       	rcall	.-1520   	; 0x490 <cmd_write_register>
     a80:	d8 2f       	mov	r29, r24
     a82:	dc 2b       	or	r29, r28
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	89 e6       	ldi	r24, 0x69	; 105
     a88:	98 e1       	ldi	r25, 0x18	; 24
     a8a:	21 50       	subi	r18, 0x01	; 1
     a8c:	80 40       	sbci	r24, 0x00	; 0
     a8e:	90 40       	sbci	r25, 0x00	; 0
     a90:	e1 f7       	brne	.-8      	; 0xa8a <write_mtch_settings+0x51c>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <write_mtch_settings+0x526>
     a94:	00 00       	nop
		_delay_ms(8000);
		
		 write_status |= cmd_write_register(0x20, 0x02, 0x16); //mutSampleFreq
     a96:	46 e1       	ldi	r20, 0x16	; 22
     a98:	62 e0       	ldi	r22, 0x02	; 2
     a9a:	80 e2       	ldi	r24, 0x20	; 32
     a9c:	f9 dc       	rcall	.-1550   	; 0x490 <cmd_write_register>
     a9e:	c8 2f       	mov	r28, r24
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	89 e6       	ldi	r24, 0x69	; 105
     aa4:	98 e1       	ldi	r25, 0x18	; 24
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	80 40       	sbci	r24, 0x00	; 0
     aaa:	90 40       	sbci	r25, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <write_mtch_settings+0x538>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <write_mtch_settings+0x542>
     ab0:	00 00       	nop
		write_status |= cmd_write_register(0x30, 0x03, 0xff); //weightThreshold
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x09, 0x96); //largeActThres
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
     ab2:	87 e1       	ldi	r24, 0x17	; 23
     ab4:	28 dd       	rcall	.-1456   	; 0x506 <cmd_mtch6301>
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	83 ed       	ldi	r24, 0xD3	; 211
     aba:	90 e3       	ldi	r25, 0x30	; 48
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <write_mtch_settings+0x54e>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <write_mtch_settings+0x558>
     ac6:	00 00       	nop
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
		_delay_ms(8000);
		
		 write_status |= cmd_write_register(0x20, 0x02, 0x16); //mutSampleFreq
     ac8:	cd 2b       	or	r28, r29
		write_status |= cmd_write_register(0x30, 0x09, 0x96); //largeActThres
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, STATUS_OK != write_status);
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	09 f4       	brne	.+2      	; 0xad0 <write_mtch_settings+0x562>
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	81 e5       	ldi	r24, 0x51	; 81
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//DECODING - INDEX 0x30
	if (EEPROM_DECODING_UPDATE_BOOL) {
     ad8:	82 e5       	ldi	r24, 0x52	; 82
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     ae0:	88 23       	and	r24, r24
     ae2:	09 f4       	brne	.+2      	; 0xae6 <write_mtch_settings+0x578>
     ae4:	7f c0       	rjmp	.+254    	; 0xbe4 <write_mtch_settings+0x676>
		twinkle(0, 0, 255);
     ae6:	4f ef       	ldi	r20, 0xFF	; 255
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	ff d5       	rcall	.+3070   	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x30, 0x00, 0x01); //FLIP STATE
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	80 e3       	ldi	r24, 0x30	; 48
     af4:	cd dc       	rcall	.-1638   	; 0x490 <cmd_write_register>
     af6:	c8 2f       	mov	r28, r24
     af8:	2f ef       	ldi	r18, 0xFF	; 255
     afa:	89 e6       	ldi	r24, 0x69	; 105
     afc:	98 e1       	ldi	r25, 0x18	; 24
     afe:	21 50       	subi	r18, 0x01	; 1
     b00:	80 40       	sbci	r24, 0x00	; 0
     b02:	90 40       	sbci	r25, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <write_mtch_settings+0x590>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <write_mtch_settings+0x59a>
     b08:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x01, EEPROM_NUMAVG); //NUM AVERAGES
     b0a:	84 e3       	ldi	r24, 0x34	; 52
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     b12:	48 2f       	mov	r20, r24
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	80 e3       	ldi	r24, 0x30	; 48
     b18:	bb dc       	rcall	.-1674   	; 0x490 <cmd_write_register>
     b1a:	c8 2b       	or	r28, r24
     b1c:	2f ef       	ldi	r18, 0xFF	; 255
     b1e:	89 e6       	ldi	r24, 0x69	; 105
     b20:	98 e1       	ldi	r25, 0x18	; 24
     b22:	21 50       	subi	r18, 0x01	; 1
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <write_mtch_settings+0x5b4>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <write_mtch_settings+0x5be>
     b2c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x04, EEPROM_MINTOUCHDIST); //MIN TOUCH DISTANCE
     b2e:	85 e3       	ldi	r24, 0x35	; 53
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     b36:	48 2f       	mov	r20, r24
     b38:	64 e0       	ldi	r22, 0x04	; 4
     b3a:	80 e3       	ldi	r24, 0x30	; 48
     b3c:	a9 dc       	rcall	.-1710   	; 0x490 <cmd_write_register>
     b3e:	c8 2b       	or	r28, r24
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	89 e6       	ldi	r24, 0x69	; 105
     b44:	98 e1       	ldi	r25, 0x18	; 24
     b46:	21 50       	subi	r18, 0x01	; 1
     b48:	80 40       	sbci	r24, 0x00	; 0
     b4a:	90 40       	sbci	r25, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <write_mtch_settings+0x5d8>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <write_mtch_settings+0x5e2>
     b50:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
     b52:	86 e3       	ldi	r24, 0x36	; 54
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     b5a:	48 2f       	mov	r20, r24
     b5c:	65 e0       	ldi	r22, 0x05	; 5
     b5e:	80 e3       	ldi	r24, 0x30	; 48
     b60:	97 dc       	rcall	.-1746   	; 0x490 <cmd_write_register>
     b62:	c8 2b       	or	r28, r24
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	89 e6       	ldi	r24, 0x69	; 105
     b68:	98 e1       	ldi	r25, 0x18	; 24
     b6a:	21 50       	subi	r18, 0x01	; 1
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	e1 f7       	brne	.-8      	; 0xb6a <write_mtch_settings+0x5fc>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <write_mtch_settings+0x606>
     b74:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
     b76:	87 e3       	ldi	r24, 0x37	; 55
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     b7e:	48 2f       	mov	r20, r24
     b80:	66 e0       	ldi	r22, 0x06	; 6
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	85 dc       	rcall	.-1782   	; 0x490 <cmd_write_register>
     b86:	c8 2b       	or	r28, r24
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	89 e6       	ldi	r24, 0x69	; 105
     b8c:	98 e1       	ldi	r25, 0x18	; 24
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <write_mtch_settings+0x620>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <write_mtch_settings+0x62a>
     b98:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
     b9a:	88 e3       	ldi	r24, 0x38	; 56
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     ba2:	48 2f       	mov	r20, r24
     ba4:	67 e0       	ldi	r22, 0x07	; 7
     ba6:	80 e3       	ldi	r24, 0x30	; 48
     ba8:	73 dc       	rcall	.-1818   	; 0x490 <cmd_write_register>
     baa:	d8 2f       	mov	r29, r24
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	89 e6       	ldi	r24, 0x69	; 105
     bb0:	98 e1       	ldi	r25, 0x18	; 24
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	80 40       	sbci	r24, 0x00	; 0
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <write_mtch_settings+0x644>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <write_mtch_settings+0x64e>
     bbc:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     bbe:	87 e1       	ldi	r24, 0x17	; 23
     bc0:	a2 dc       	rcall	.-1724   	; 0x506 <cmd_mtch6301>
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	83 ed       	ldi	r24, 0xD3	; 211
     bc6:	90 e3       	ldi	r25, 0x30	; 48
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	80 40       	sbci	r24, 0x00	; 0
     bcc:	90 40       	sbci	r25, 0x00	; 0
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <write_mtch_settings+0x65a>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <write_mtch_settings+0x664>
     bd2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
     bd4:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, STATUS_OK != write_status);
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <write_mtch_settings+0x66e>
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	82 e5       	ldi	r24, 0x52	; 82
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//GESTURES - INDEX 0x50
	if (EEPROM_GESTURES_UPDATE_BOOL) {
     be4:	83 e5       	ldi	r24, 0x53	; 83
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <write_mtch_settings+0x684>
     bf0:	01 c1       	rjmp	.+514    	; 0xdf4 <write_mtch_settings+0x886>
		twinkle(255, 0, 255);
     bf2:	4f ef       	ldi	r20, 0xFF	; 255
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	79 d5       	rcall	.+2802   	; 0x16ec <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x50, 0x00, EEPROM_RXSWIPELEN); //RX SWIPE LENGTH
     bfa:	89 e3       	ldi	r24, 0x39	; 57
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     c02:	48 2f       	mov	r20, r24
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	80 e5       	ldi	r24, 0x50	; 80
     c08:	43 dc       	rcall	.-1914   	; 0x490 <cmd_write_register>
     c0a:	c8 2f       	mov	r28, r24
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	89 e6       	ldi	r24, 0x69	; 105
     c10:	98 e1       	ldi	r25, 0x18	; 24
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <write_mtch_settings+0x6a4>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <write_mtch_settings+0x6ae>
     c1c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x01, EEPROM_TXSWIPELEN); //TX SWIPE LENGTH
     c1e:	8a e3       	ldi	r24, 0x3A	; 58
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     c26:	48 2f       	mov	r20, r24
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	80 e5       	ldi	r24, 0x50	; 80
     c2c:	31 dc       	rcall	.-1950   	; 0x490 <cmd_write_register>
     c2e:	c8 2b       	or	r28, r24
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	89 e6       	ldi	r24, 0x69	; 105
     c34:	98 e1       	ldi	r25, 0x18	; 24
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	80 40       	sbci	r24, 0x00	; 0
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <write_mtch_settings+0x6c8>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <write_mtch_settings+0x6d2>
     c40:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x02, EEPROM_SWIPEBOUNDARY); //SWIPE BOUNDARY
     c42:	8b e3       	ldi	r24, 0x3B	; 59
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     c4a:	48 2f       	mov	r20, r24
     c4c:	62 e0       	ldi	r22, 0x02	; 2
     c4e:	80 e5       	ldi	r24, 0x50	; 80
     c50:	1f dc       	rcall	.-1986   	; 0x490 <cmd_write_register>
     c52:	c8 2b       	or	r28, r24
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	89 e6       	ldi	r24, 0x69	; 105
     c58:	98 e1       	ldi	r25, 0x18	; 24
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	80 40       	sbci	r24, 0x00	; 0
     c5e:	90 40       	sbci	r25, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <write_mtch_settings+0x6ec>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <write_mtch_settings+0x6f6>
     c64:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x03, EEPROM_SWIPEHOLDTHRES); //SWIPE HOLD THRESHOLD
     c66:	8c e3       	ldi	r24, 0x3C	; 60
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     c6e:	48 2f       	mov	r20, r24
     c70:	63 e0       	ldi	r22, 0x03	; 3
     c72:	80 e5       	ldi	r24, 0x50	; 80
     c74:	0d dc       	rcall	.-2022   	; 0x490 <cmd_write_register>
     c76:	c8 2b       	or	r28, r24
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	89 e6       	ldi	r24, 0x69	; 105
     c7c:	98 e1       	ldi	r25, 0x18	; 24
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	80 40       	sbci	r24, 0x00	; 0
     c82:	90 40       	sbci	r25, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <write_mtch_settings+0x710>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <write_mtch_settings+0x71a>
     c88:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x04, EEPROM_SWIPETIME_7_0); //SWIPE TIME [7:0]
     c8a:	8d e3       	ldi	r24, 0x3D	; 61
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     c92:	48 2f       	mov	r20, r24
     c94:	64 e0       	ldi	r22, 0x04	; 4
     c96:	80 e5       	ldi	r24, 0x50	; 80
     c98:	fb db       	rcall	.-2058   	; 0x490 <cmd_write_register>
     c9a:	c8 2b       	or	r28, r24
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	89 e6       	ldi	r24, 0x69	; 105
     ca0:	98 e1       	ldi	r25, 0x18	; 24
     ca2:	21 50       	subi	r18, 0x01	; 1
     ca4:	80 40       	sbci	r24, 0x00	; 0
     ca6:	90 40       	sbci	r25, 0x00	; 0
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <write_mtch_settings+0x734>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <write_mtch_settings+0x73e>
     cac:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x05, EEPROM_SWIPETIME_15_8); //SWIPE TIME [15:8]
     cae:	8e e3       	ldi	r24, 0x3E	; 62
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     cb6:	48 2f       	mov	r20, r24
     cb8:	65 e0       	ldi	r22, 0x05	; 5
     cba:	80 e5       	ldi	r24, 0x50	; 80
     cbc:	e9 db       	rcall	.-2094   	; 0x490 <cmd_write_register>
     cbe:	c8 2b       	or	r28, r24
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	89 e6       	ldi	r24, 0x69	; 105
     cc4:	98 e1       	ldi	r25, 0x18	; 24
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	80 40       	sbci	r24, 0x00	; 0
     cca:	90 40       	sbci	r25, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <write_mtch_settings+0x758>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <write_mtch_settings+0x762>
     cd0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x06, EEPROM_TAPTIME_7_0); //TAP TIME [7:0]
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     cda:	48 2f       	mov	r20, r24
     cdc:	66 e0       	ldi	r22, 0x06	; 6
     cde:	80 e5       	ldi	r24, 0x50	; 80
     ce0:	d7 db       	rcall	.-2130   	; 0x490 <cmd_write_register>
     ce2:	c8 2b       	or	r28, r24
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	89 e6       	ldi	r24, 0x69	; 105
     ce8:	98 e1       	ldi	r25, 0x18	; 24
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	80 40       	sbci	r24, 0x00	; 0
     cee:	90 40       	sbci	r25, 0x00	; 0
     cf0:	e1 f7       	brne	.-8      	; 0xcea <write_mtch_settings+0x77c>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <write_mtch_settings+0x786>
     cf4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x07, EEPROM_TAPTIME_15_8); //TAP TIME [15:8]
     cf6:	80 e4       	ldi	r24, 0x40	; 64
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     cfe:	48 2f       	mov	r20, r24
     d00:	67 e0       	ldi	r22, 0x07	; 7
     d02:	80 e5       	ldi	r24, 0x50	; 80
     d04:	c5 db       	rcall	.-2166   	; 0x490 <cmd_write_register>
     d06:	c8 2b       	or	r28, r24
     d08:	2f ef       	ldi	r18, 0xFF	; 255
     d0a:	89 e6       	ldi	r24, 0x69	; 105
     d0c:	98 e1       	ldi	r25, 0x18	; 24
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	80 40       	sbci	r24, 0x00	; 0
     d12:	90 40       	sbci	r25, 0x00	; 0
     d14:	e1 f7       	brne	.-8      	; 0xd0e <write_mtch_settings+0x7a0>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <write_mtch_settings+0x7aa>
     d18:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x08, EEPROM_TAPTHRES); //TAP THRESHOLD
     d1a:	81 e4       	ldi	r24, 0x41	; 65
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     d22:	48 2f       	mov	r20, r24
     d24:	68 e0       	ldi	r22, 0x08	; 8
     d26:	80 e5       	ldi	r24, 0x50	; 80
     d28:	b3 db       	rcall	.-2202   	; 0x490 <cmd_write_register>
     d2a:	c8 2b       	or	r28, r24
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	89 e6       	ldi	r24, 0x69	; 105
     d30:	98 e1       	ldi	r25, 0x18	; 24
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	90 40       	sbci	r25, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <write_mtch_settings+0x7c4>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <write_mtch_settings+0x7ce>
     d3c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x09, EEPROM_MINSWIPEVELOCITY); //MIN SWIPE VELOCITY
     d3e:	82 e4       	ldi	r24, 0x42	; 66
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     d46:	48 2f       	mov	r20, r24
     d48:	69 e0       	ldi	r22, 0x09	; 9
     d4a:	80 e5       	ldi	r24, 0x50	; 80
     d4c:	a1 db       	rcall	.-2238   	; 0x490 <cmd_write_register>
     d4e:	c8 2b       	or	r28, r24
     d50:	2f ef       	ldi	r18, 0xFF	; 255
     d52:	89 e6       	ldi	r24, 0x69	; 105
     d54:	98 e1       	ldi	r25, 0x18	; 24
     d56:	21 50       	subi	r18, 0x01	; 1
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	90 40       	sbci	r25, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <write_mtch_settings+0x7e8>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <write_mtch_settings+0x7f2>
     d60:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
     d62:	83 e4       	ldi	r24, 0x43	; 67
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     d6a:	48 2f       	mov	r20, r24
     d6c:	6a e0       	ldi	r22, 0x0A	; 10
     d6e:	80 e5       	ldi	r24, 0x50	; 80
     d70:	8f db       	rcall	.-2274   	; 0x490 <cmd_write_register>
     d72:	c8 2b       	or	r28, r24
     d74:	2f ef       	ldi	r18, 0xFF	; 255
     d76:	89 e6       	ldi	r24, 0x69	; 105
     d78:	98 e1       	ldi	r25, 0x18	; 24
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	90 40       	sbci	r25, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <write_mtch_settings+0x80c>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <write_mtch_settings+0x816>
     d84:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
     d86:	84 e4       	ldi	r24, 0x44	; 68
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     d8e:	48 2f       	mov	r20, r24
     d90:	6b e0       	ldi	r22, 0x0B	; 11
     d92:	80 e5       	ldi	r24, 0x50	; 80
     d94:	7d db       	rcall	.-2310   	; 0x490 <cmd_write_register>
     d96:	c8 2b       	or	r28, r24
     d98:	2f ef       	ldi	r18, 0xFF	; 255
     d9a:	89 e6       	ldi	r24, 0x69	; 105
     d9c:	98 e1       	ldi	r25, 0x18	; 24
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	80 40       	sbci	r24, 0x00	; 0
     da2:	90 40       	sbci	r25, 0x00	; 0
     da4:	e1 f7       	brne	.-8      	; 0xd9e <write_mtch_settings+0x830>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <write_mtch_settings+0x83a>
     da8:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
     daa:	85 e4       	ldi	r24, 0x45	; 69
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     db2:	48 2f       	mov	r20, r24
     db4:	6c e0       	ldi	r22, 0x0C	; 12
     db6:	80 e5       	ldi	r24, 0x50	; 80
     db8:	6b db       	rcall	.-2346   	; 0x490 <cmd_write_register>
     dba:	d8 2f       	mov	r29, r24
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	89 e6       	ldi	r24, 0x69	; 105
     dc0:	98 e1       	ldi	r25, 0x18	; 24
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <write_mtch_settings+0x854>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <write_mtch_settings+0x85e>
     dcc:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
     dce:	87 e1       	ldi	r24, 0x17	; 23
     dd0:	9a db       	rcall	.-2252   	; 0x506 <cmd_mtch6301>
     dd2:	2f ef       	ldi	r18, 0xFF	; 255
     dd4:	83 ed       	ldi	r24, 0xD3	; 211
     dd6:	90 e3       	ldi	r25, 0x30	; 48
     dd8:	21 50       	subi	r18, 0x01	; 1
     dda:	80 40       	sbci	r24, 0x00	; 0
     ddc:	90 40       	sbci	r25, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <write_mtch_settings+0x86a>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <write_mtch_settings+0x874>
     de2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
     de4:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, STATUS_OK != write_status);
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	09 f4       	brne	.+2      	; 0xdec <write_mtch_settings+0x87e>
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	83 e5       	ldi	r24, 0x53	; 83
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	}
	
	
	//CONFIG - INDEX 0xf0
	if (EEPROM_CONFIG_UPDATE_BOOL) {
     df4:	84 e5       	ldi	r24, 0x54	; 84
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     dfc:	88 23       	and	r24, r24
     dfe:	09 f4       	brne	.+2      	; 0xe02 <write_mtch_settings+0x894>
     e00:	5f c0       	rjmp	.+190    	; 0xec0 <write_mtch_settings+0x952>
		twinkle(255, 255, 255);
     e02:	4f ef       	ldi	r20, 0xFF	; 255
     e04:	6f ef       	ldi	r22, 0xFF	; 255
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	71 d4       	rcall	.+2274   	; 0x16ec <twinkle>
		 write_status |= cmd_write_register(0xf0, 0x02, EEPROM_SLEEP_23_16); //SLEEP TIMEOUT [23:16]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x03, EEPROM_SLEEP_31_24); //SLEEP TIMEOUT [31:24]
		_delay_ms(8000);
		*/
		 write_status |= cmd_write_register(0xf0, 0x07, EEPROM_TOUCHPACKETCFG); //TOUCH PACKET CFG
     e0a:	8a e4       	ldi	r24, 0x4A	; 74
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     e12:	48 2f       	mov	r20, r24
     e14:	67 e0       	ldi	r22, 0x07	; 7
     e16:	80 ef       	ldi	r24, 0xF0	; 240
     e18:	3b db       	rcall	.-2442   	; 0x490 <cmd_write_register>
     e1a:	c8 2f       	mov	r28, r24
     e1c:	2f ef       	ldi	r18, 0xFF	; 255
     e1e:	89 e6       	ldi	r24, 0x69	; 105
     e20:	98 e1       	ldi	r25, 0x18	; 24
     e22:	21 50       	subi	r18, 0x01	; 1
     e24:	80 40       	sbci	r24, 0x00	; 0
     e26:	90 40       	sbci	r25, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <write_mtch_settings+0x8b4>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <write_mtch_settings+0x8be>
     e2c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
     e2e:	8b e4       	ldi	r24, 0x4B	; 75
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     e36:	48 2f       	mov	r20, r24
     e38:	69 e0       	ldi	r22, 0x09	; 9
     e3a:	80 ef       	ldi	r24, 0xF0	; 240
     e3c:	29 db       	rcall	.-2478   	; 0x490 <cmd_write_register>
     e3e:	c8 2b       	or	r28, r24
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	89 e6       	ldi	r24, 0x69	; 105
     e44:	98 e1       	ldi	r25, 0x18	; 24
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <write_mtch_settings+0x8d8>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <write_mtch_settings+0x8e2>
     e50:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
     e52:	8c e4       	ldi	r24, 0x4C	; 76
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     e5a:	48 2f       	mov	r20, r24
     e5c:	6a e0       	ldi	r22, 0x0A	; 10
     e5e:	80 ef       	ldi	r24, 0xF0	; 240
     e60:	17 db       	rcall	.-2514   	; 0x490 <cmd_write_register>
     e62:	c8 2b       	or	r28, r24
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	89 e6       	ldi	r24, 0x69	; 105
     e68:	98 e1       	ldi	r25, 0x18	; 24
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <write_mtch_settings+0x8fc>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <write_mtch_settings+0x906>
     e74:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
     e76:	83 e3       	ldi	r24, 0x33	; 51
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     e7e:	48 2f       	mov	r20, r24
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	80 e3       	ldi	r24, 0x30	; 48
     e84:	05 db       	rcall	.-2550   	; 0x490 <cmd_write_register>
     e86:	d8 2f       	mov	r29, r24
     e88:	2f ef       	ldi	r18, 0xFF	; 255
     e8a:	89 e6       	ldi	r24, 0x69	; 105
     e8c:	98 e1       	ldi	r25, 0x18	; 24
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	90 40       	sbci	r25, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <write_mtch_settings+0x920>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <write_mtch_settings+0x92a>
     e98:	00 00       	nop
		_delay_ms(8000);
		cmd_write_register(0xf0, 0x08, 0x81); //commandPacketConfig
		_delay_ms(8000);
		*/
		
		cmd_mtch6301(0x17);
     e9a:	87 e1       	ldi	r24, 0x17	; 23
     e9c:	34 db       	rcall	.-2456   	; 0x506 <cmd_mtch6301>
     e9e:	2f ef       	ldi	r18, 0xFF	; 255
     ea0:	83 ed       	ldi	r24, 0xD3	; 211
     ea2:	90 e3       	ldi	r25, 0x30	; 48
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	80 40       	sbci	r24, 0x00	; 0
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <write_mtch_settings+0x936>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <write_mtch_settings+0x940>
     eae:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
     eb0:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		*/
		
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, STATUS_OK != write_status);
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <write_mtch_settings+0x94a>
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	84 e5       	ldi	r24, 0x54	; 84
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
	*/
	
	
	
	//Restore touch functionality and save to NVRAM
	cmd_mtch6301(0x00);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	21 db       	rcall	.-2494   	; 0x506 <cmd_mtch6301>
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	83 ed       	ldi	r24, 0xD3	; 211
     ec8:	90 e3       	ldi	r25, 0x30	; 48
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	80 40       	sbci	r24, 0x00	; 0
     ece:	90 40       	sbci	r25, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <write_mtch_settings+0x95c>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <write_mtch_settings+0x966>
     ed4:	00 00       	nop
	_delay_ms(16000);
	cmd_mtch6301(0x17);
     ed6:	87 e1       	ldi	r24, 0x17	; 23
     ed8:	16 db       	rcall	.-2516   	; 0x506 <cmd_mtch6301>
     eda:	2f ef       	ldi	r18, 0xFF	; 255
     edc:	83 ed       	ldi	r24, 0xD3	; 211
     ede:	90 e3       	ldi	r25, 0x30	; 48
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	80 40       	sbci	r24, 0x00	; 0
     ee4:	90 40       	sbci	r25, 0x00	; 0
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <write_mtch_settings+0x972>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <write_mtch_settings+0x97c>
     eea:	00 00       	nop
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
		EEPROM_GENERAL_UPDATE_BOOL	|
     eec:	8d e4       	ldi	r24, 0x4D	; 77
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     ef4:	c8 2f       	mov	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
     ef6:	8d e4       	ldi	r24, 0x4D	; 77
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     efe:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
     f00:	8e e4       	ldi	r24, 0x4E	; 78
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f08:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
     f0a:	8f e4       	ldi	r24, 0x4F	; 79
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f12:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
     f14:	80 e5       	ldi	r24, 0x50	; 80
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f1c:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
     f1e:	81 e5       	ldi	r24, 0x51	; 81
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f26:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
     f28:	82 e5       	ldi	r24, 0x52	; 82
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f30:	c8 2b       	or	r28, r24
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
     f32:	83 e5       	ldi	r24, 0x53	; 83
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f3a:	c8 2b       	or	r28, r24
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
     f3c:	84 e5       	ldi	r24, 0x54	; 84
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
     f44:	6c 2f       	mov	r22, r28
     f46:	68 2b       	or	r22, r24
     f48:	85 e5       	ldi	r24, 0x55	; 85
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 83 10 	call	0x2106	; 0x2106 <nvm_eeprom_write_byte>
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
	));
	
	if (EEPROM_MTCH_UPDATE_BOOL) {
     f50:	85 e5       	ldi	r24, 0x55	; 85
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nvm_eeprom_read_byte>
     f58:	88 23       	and	r24, r24
     f5a:	31 f0       	breq	.+12     	; 0xf68 <write_mtch_settings+0x9fa>
		twinkle(255, 0, 0);
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	c4 d3       	rcall	.+1928   	; 0x16ec <twinkle>
		return false;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <write_mtch_settings+0xa02>
	}
	
	else {
		rainbow();
     f68:	d7 d3       	rcall	.+1966   	; 0x1718 <rainbow>
		return true;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <write_mtch_settings+0xa02>
}	

bool write_mtch_settings(void) {
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
		return true;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
	
	else {
		rainbow();
		return true;
	}
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	61 97       	sbiw	r28, 0x11	; 17
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	80 93 4c 06 	sts	0x064C, r24
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
     fb0:	80 91 35 20 	lds	r24, 0x2035
     fb4:	88 23       	and	r24, r24
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <__vector_9+0x4a>
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	09 f4       	brne	.+2      	; 0xfbe <__vector_9+0x48>
     fbc:	7f c0       	rjmp	.+254    	; 0x10bc <__vector_9+0x146>
     fbe:	9c c0       	rjmp	.+312    	; 0x10f8 <__vector_9+0x182>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
     fc0:	fe 01       	movw	r30, r28
     fc2:	3c 96       	adiw	r30, 0x0c	; 12
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	df 01       	movw	r26, r30
     fc8:	1d 92       	st	X+, r1
     fca:	8a 95       	dec	r24
     fcc:	e9 f7       	brne	.-6      	; 0xfc8 <__vector_9+0x52>
	
	twi_package_t package = {
     fce:	be 01       	movw	r22, r28
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8b e0       	ldi	r24, 0x0B	; 11
     fd6:	db 01       	movw	r26, r22
     fd8:	1d 92       	st	X+, r1
     fda:	8a 95       	dec	r24
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <__vector_9+0x62>
     fde:	85 e2       	ldi	r24, 0x25	; 37
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	ef 83       	std	Y+7, r30	; 0x07
     fe4:	f8 87       	std	Y+8, r31	; 0x08
     fe6:	86 e0       	ldi	r24, 0x06	; 6
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	89 87       	std	Y+9, r24	; 0x09
     fec:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	94 e0       	ldi	r25, 0x04	; 4
     ff4:	0e 94 43 14 	call	0x2886	; 0x2886 <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
     ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffa:	82 fb       	bst	r24, 2
     ffc:	00 27       	eor	r16, r16
     ffe:	00 f9       	bld	r16, 0
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	00 93 6a 20 	sts	0x206A, r16
	
	if (m_touch_pkg->tch == 0)
    1006:	01 2b       	or	r16, r17
    1008:	09 f4       	brne	.+2      	; 0x100c <__vector_9+0x96>
    100a:	76 c0       	rjmp	.+236    	; 0x10f8 <__vector_9+0x182>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
    100c:	a9 e6       	ldi	r26, 0x69	; 105
    100e:	b0 e2       	ldi	r27, 0x20	; 32
    1010:	88 77       	andi	r24, 0x78	; 120
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	8c 93       	st	X, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
    1022:	8e 85       	ldd	r24, Y+14	; 0x0e
    1024:	e8 2f       	mov	r30, r24
    1026:	ef 77       	andi	r30, 0x7F	; 127
    1028:	17 96       	adiw	r26, 0x07	; 7
    102a:	ec 93       	st	X, r30
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
    102c:	8e 2f       	mov	r24, r30
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	70 97       	sbiw	r30, 0x10	; 16
    1034:	e3 35       	cpi	r30, 0x53	; 83
    1036:	f1 05       	cpc	r31, r1
    1038:	d8 f5       	brcc	.+118    	; 0x10b0 <__vector_9+0x13a>
    103a:	ea 5a       	subi	r30, 0xAA	; 170
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
    1042:	80 ea       	ldi	r24, 0xA0	; 160
    1044:	80 93 2a 20 	sts	0x202A, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	35 c0       	rjmp	.+106    	; 0x10b6 <__vector_9+0x140>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
    104c:	81 ea       	ldi	r24, 0xA1	; 161
    104e:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	30 c0       	rjmp	.+96     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
    1056:	82 ea       	ldi	r24, 0xA2	; 162
    1058:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	2b c0       	rjmp	.+86     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
    1060:	83 ea       	ldi	r24, 0xA3	; 163
    1062:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	26 c0       	rjmp	.+76     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
    106a:	83 ea       	ldi	r24, 0xA3	; 163
    106c:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	21 c0       	rjmp	.+66     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
    1074:	84 ea       	ldi	r24, 0xA4	; 164
    1076:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	1c c0       	rjmp	.+56     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
    107e:	84 ea       	ldi	r24, 0xA4	; 164
    1080:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
    1084:	85 e0       	ldi	r24, 0x05	; 5
    1086:	17 c0       	rjmp	.+46     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    1088:	85 ea       	ldi	r24, 0xA5	; 165
    108a:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
    108e:	86 e0       	ldi	r24, 0x06	; 6
    1090:	12 c0       	rjmp	.+36     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    1092:	85 ea       	ldi	r24, 0xA5	; 165
    1094:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
    1098:	86 e0       	ldi	r24, 0x06	; 6
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
    109c:	86 ea       	ldi	r24, 0xA6	; 166
    109e:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
    10a2:	87 e0       	ldi	r24, 0x07	; 7
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
    10a6:	86 ea       	ldi	r24, 0xA6	; 166
    10a8:	80 93 2a 20 	sts	0x202A, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
    10ac:	87 e0       	ldi	r24, 0x07	; 7
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
    10b0:	10 92 2a 20 	sts	0x202A, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
    10b4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
    10b6:	80 93 34 20 	sts	0x2034, r24
    10ba:	1e c0       	rjmp	.+60     	; 0x10f8 <__vector_9+0x182>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
    10bc:	be 01       	movw	r22, r28
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8b e0       	ldi	r24, 0x0B	; 11
    10c4:	fb 01       	movw	r30, r22
    10c6:	11 92       	st	Z+, r1
    10c8:	8a 95       	dec	r24
    10ca:	e9 f7       	brne	.-6      	; 0x10c6 <__vector_9+0x150>
    10cc:	85 e2       	ldi	r24, 0x25	; 37
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	0b e2       	ldi	r16, 0x2B	; 43
    10d2:	10 e2       	ldi	r17, 0x20	; 32
    10d4:	0f 83       	std	Y+7, r16	; 0x07
    10d6:	18 87       	std	Y+8, r17	; 0x08
    10d8:	89 e0       	ldi	r24, 0x09	; 9
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	89 87       	std	Y+9, r24	; 0x09
    10de:	9a 87       	std	Y+10, r25	; 0x0a
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	80 e8       	ldi	r24, 0x80	; 128
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	0e 94 43 14 	call	0x2886	; 0x2886 <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    10ea:	10 92 35 20 	sts	0x2035, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    10ee:	d8 01       	movw	r26, r16
    10f0:	13 96       	adiw	r26, 0x03	; 3
    10f2:	8c 91       	ld	r24, X
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    10f4:	80 93 04 20 	sts	0x2004, r24
			break;
		default:
			return;
	}
    10f8:	61 96       	adiw	r28, 0x11	; 17
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <timerD5_overflow_interrupt_callback>:
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
}
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 73 20 	sts	0x2073, r24
    112e:	e0 e4       	ldi	r30, 0x40	; 64
    1130:	f9 e0       	ldi	r31, 0x09	; 9
    1132:	84 85       	ldd	r24, Z+12	; 0x0c
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	84 87       	std	Z+12, r24	; 0x0c
    1138:	08 95       	ret

0000113a <init_timerd5>:

void init_timerd5(void)
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
	tc45_enable(&TCD5);
    113e:	80 e4       	ldi	r24, 0x40	; 64
    1140:	99 e0       	ldi	r25, 0x09	; 9
    1142:	0e 94 e6 12 	call	0x25cc	; 0x25cc <tc45_enable>
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    1146:	c0 e4       	ldi	r28, 0x40	; 64
    1148:	d9 e0       	ldi	r29, 0x09	; 9
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	8c 7f       	andi	r24, 0xFC	; 252
    114e:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	88 7f       	andi	r24, 0xF8	; 248
    115a:	89 83       	std	Y+1, r24	; 0x01
	tc45_set_overflow_interrupt_level(&TCD5, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCD5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCD5,	timerD5_overflow_interrupt_callback);
    115c:	64 e9       	ldi	r22, 0x94	; 148
    115e:	78 e0       	ldi	r23, 0x08	; 8
    1160:	80 e4       	ldi	r24, 0x40	; 64
    1162:	99 e0       	ldi	r25, 0x09	; 9
    1164:	0e 94 4a 13 	call	0x2694	; 0x2694 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    1168:	82 ea       	ldi	r24, 0xA2	; 162
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	8e a3       	std	Y+38, r24	; 0x26
    116e:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    1170:	88 81       	ld	r24, Y
    1172:	80 7f       	andi	r24, 0xF0	; 240
    1174:	87 60       	ori	r24, 0x07	; 7
    1176:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    1178:	e0 ea       	ldi	r30, 0xA0	; 160
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	81 60       	ori	r24, 0x01	; 1
    1180:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCD5, 162);//EVERY 5ms
	tc45_set_resolution(&TCD5, 31250);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    1182:	78 94       	sei
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <uart_send_status>:
	pulse_state_changed = false;
	return changed;
}

void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
    118a:	68 2f       	mov	r22, r24
    118c:	80 ec       	ldi	r24, 0xC0	; 192
    118e:	98 e0       	ldi	r25, 0x08	; 8
    1190:	0c 94 96 14 	jmp	0x292c	; 0x292c <usart_putchar>
    1194:	08 95       	ret

00001196 <led_set_from_colors>:
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	a5 e0       	ldi	r26, 0x05	; 5
    119c:	b0 e2       	ldi	r27, 0x20	; 32
    119e:	8c 91       	ld	r24, X
    11a0:	ec e8       	ldi	r30, 0x8C	; 140
    11a2:	f0 e2       	ldi	r31, 0x20	; 32
    11a4:	80 83       	st	Z, r24
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	8c 91       	ld	r24, X
    11aa:	11 97       	sbiw	r26, 0x01	; 1
    11ac:	81 83       	std	Z+1, r24	; 0x01
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	8c 91       	ld	r24, X
    11b2:	12 97       	sbiw	r26, 0x02	; 2
    11b4:	82 83       	std	Z+2, r24	; 0x02
    11b6:	8c 91       	ld	r24, X
    11b8:	81 87       	std	Z+9, r24	; 0x09
    11ba:	11 96       	adiw	r26, 0x01	; 1
    11bc:	8c 91       	ld	r24, X
    11be:	11 97       	sbiw	r26, 0x01	; 1
    11c0:	82 87       	std	Z+10, r24	; 0x0a
    11c2:	12 96       	adiw	r26, 0x02	; 2
    11c4:	8c 91       	ld	r24, X
    11c6:	12 97       	sbiw	r26, 0x02	; 2
    11c8:	83 87       	std	Z+11, r24	; 0x0b
    11ca:	13 96       	adiw	r26, 0x03	; 3
    11cc:	8c 91       	ld	r24, X
    11ce:	13 97       	sbiw	r26, 0x03	; 3
    11d0:	83 83       	std	Z+3, r24	; 0x03
    11d2:	14 96       	adiw	r26, 0x04	; 4
    11d4:	8c 91       	ld	r24, X
    11d6:	14 97       	sbiw	r26, 0x04	; 4
    11d8:	84 83       	std	Z+4, r24	; 0x04
    11da:	15 96       	adiw	r26, 0x05	; 5
    11dc:	8c 91       	ld	r24, X
    11de:	15 97       	sbiw	r26, 0x05	; 5
    11e0:	85 83       	std	Z+5, r24	; 0x05
    11e2:	13 96       	adiw	r26, 0x03	; 3
    11e4:	8c 91       	ld	r24, X
    11e6:	13 97       	sbiw	r26, 0x03	; 3
    11e8:	84 87       	std	Z+12, r24	; 0x0c
    11ea:	14 96       	adiw	r26, 0x04	; 4
    11ec:	8c 91       	ld	r24, X
    11ee:	14 97       	sbiw	r26, 0x04	; 4
    11f0:	85 87       	std	Z+13, r24	; 0x0d
    11f2:	15 96       	adiw	r26, 0x05	; 5
    11f4:	8c 91       	ld	r24, X
    11f6:	15 97       	sbiw	r26, 0x05	; 5
    11f8:	86 87       	std	Z+14, r24	; 0x0e
    11fa:	16 96       	adiw	r26, 0x06	; 6
    11fc:	8c 91       	ld	r24, X
    11fe:	16 97       	sbiw	r26, 0x06	; 6
    1200:	86 83       	std	Z+6, r24	; 0x06
    1202:	17 96       	adiw	r26, 0x07	; 7
    1204:	8c 91       	ld	r24, X
    1206:	17 97       	sbiw	r26, 0x07	; 7
    1208:	87 83       	std	Z+7, r24	; 0x07
    120a:	18 96       	adiw	r26, 0x08	; 8
    120c:	8c 91       	ld	r24, X
    120e:	18 97       	sbiw	r26, 0x08	; 8
    1210:	80 87       	std	Z+8, r24	; 0x08
    1212:	16 96       	adiw	r26, 0x06	; 6
    1214:	8c 91       	ld	r24, X
    1216:	16 97       	sbiw	r26, 0x06	; 6
    1218:	87 87       	std	Z+15, r24	; 0x0f
    121a:	17 96       	adiw	r26, 0x07	; 7
    121c:	8c 91       	ld	r24, X
    121e:	17 97       	sbiw	r26, 0x07	; 7
    1220:	80 8b       	std	Z+16, r24	; 0x10
    1222:	18 96       	adiw	r26, 0x08	; 8
    1224:	8c 91       	ld	r24, X
    1226:	81 8b       	std	Z+17, r24	; 0x11
    1228:	c0 e0       	ldi	r28, 0x00	; 0
    122a:	d0 e0       	ldi	r29, 0x00	; 0
    122c:	fe 01       	movw	r30, r28
    122e:	eb 5f       	subi	r30, 0xFB	; 251
    1230:	ff 4d       	sbci	r31, 0xDF	; 223
    1232:	60 81       	ld	r22, Z
    1234:	21 96       	adiw	r28, 0x01	; 1
    1236:	ce 01       	movw	r24, r28
    1238:	66 d7       	rcall	.+3788   	; 0x2106 <nvm_eeprom_write_byte>
    123a:	c9 30       	cpi	r28, 0x09	; 9
    123c:	d1 05       	cpc	r29, r1
    123e:	b1 f7       	brne	.-20     	; 0x122c <led_set_from_colors+0x96>
    1240:	50 d2       	rcall	.+1184   	; 0x16e2 <ischarging>
    1242:	81 11       	cpse	r24, r1
    1244:	04 c0       	rjmp	.+8      	; 0x124e <led_set_from_colors+0xb8>
    1246:	66 e0       	ldi	r22, 0x06	; 6
    1248:	8c e8       	ldi	r24, 0x8C	; 140
    124a:	90 e2       	ldi	r25, 0x20	; 32
    124c:	c5 d4       	rcall	.+2442   	; 0x1bd8 <set_flash_ws2812>
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <get_pulse_state>:
    1254:	80 91 38 20 	lds	r24, 0x2038
    1258:	08 95       	ret

0000125a <__vector_23>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTC0_RXC_vect)
{
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
    127c:	80 ec       	ldi	r24, 0xC0	; 192
    127e:	98 e0       	ldi	r25, 0x08	; 8
    1280:	0e 94 a4 14 	call	0x2948	; 0x2948 <usart_getchar>
	
	0F 04 00 01 FB F0
*/
static inline void uart_protocal(uint8_t rxvalue)
{
	if (num_rx == 0)
    1284:	90 91 3b 20 	lds	r25, 0x203B
    1288:	91 11       	cpse	r25, r1
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <__vector_23+0x4e>
	{
		if (rxvalue == 0x0F)
    128c:	8f 30       	cpi	r24, 0x0F	; 15
    128e:	49 f4       	brne	.+18     	; 0x12a2 <__vector_23+0x48>
		{
			num_rx ++;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 3b 20 	sts	0x203B, r24
			uart_length = 6;
    1296:	96 e0       	ldi	r25, 0x06	; 6
    1298:	90 93 1b 20 	sts	0x201B, r25
	usart_putchar(M_USART, status_uart);
}

void uart_start(void)
{
	uart_start_flag = true;
    129c:	80 93 3a 20 	sts	0x203A, r24
    12a0:	38 c0       	rjmp	.+112    	; 0x1312 <__vector_23+0xb8>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    12a2:	10 92 3b 20 	sts	0x203B, r1
    12a6:	35 c0       	rjmp	.+106    	; 0x1312 <__vector_23+0xb8>
		else
		{
			uart_clear();
		}
	} 
	else if (num_rx == uart_length+1)
    12a8:	29 2f       	mov	r18, r25
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	60 91 1b 20 	lds	r22, 0x201B
    12b0:	46 2f       	mov	r20, r22
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	24 17       	cp	r18, r20
    12ba:	35 07       	cpc	r19, r21
    12bc:	f1 f4       	brne	.+60     	; 0x12fa <__vector_23+0xa0>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    12be:	10 92 3b 20 	sts	0x203B, r1
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    12c2:	80 3f       	cpi	r24, 0xF0	; 240
    12c4:	a9 f4       	brne	.+42     	; 0x12f0 <__vector_23+0x96>

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    12c6:	20 91 74 20 	lds	r18, 0x2074
    12ca:	22 23       	and	r18, r18
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <__vector_23+0x8c>
    12ce:	44 e7       	ldi	r20, 0x74	; 116
    12d0:	50 e2       	ldi	r21, 0x20	; 32
    12d2:	fa 01       	movw	r30, r20
    12d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		sum += rxvalue[i];
    12d6:	91 91       	ld	r25, Z+
    12d8:	89 0f       	add	r24, r25
    12da:	9e 2f       	mov	r25, r30
    12dc:	94 1b       	sub	r25, r20

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    12de:	92 17       	cp	r25, r18
    12e0:	d0 f3       	brcs	.-12     	; 0x12d6 <__vector_23+0x7c>
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    12e2:	81 11       	cpse	r24, r1
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <__vector_23+0x96>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    12e6:	10 92 3a 20 	sts	0x203A, r1
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
		{
			uart_stop();
			uart_send_status(UART_OK);
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	4e df       	rcall	.-356    	; 0x118a <uart_send_status>
    12ee:	11 c0       	rjmp	.+34     	; 0x1312 <__vector_23+0xb8>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    12f0:	10 92 3a 20 	sts	0x203A, r1
			uart_send_status(UART_OK);
		} 
		else
		{
			uart_stop();
			uart_send_status(UART_FAIL);
    12f4:	8c e0       	ldi	r24, 0x0C	; 12
    12f6:	49 df       	rcall	.-366    	; 0x118a <uart_send_status>
    12f8:	0c c0       	rjmp	.+24     	; 0x1312 <__vector_23+0xb8>
		}
	} 
	else
	{
		rxdata[num_rx-1] = rxvalue;
    12fa:	f9 01       	movw	r30, r18
    12fc:	ed 58       	subi	r30, 0x8D	; 141
    12fe:	ff 4d       	sbci	r31, 0xDF	; 223
    1300:	80 83       	st	Z, r24
		num_rx ++;
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	90 93 3b 20 	sts	0x203B, r25
		
		if (uart_length != rxdata[UART_LENGTH])
    1308:	80 91 74 20 	lds	r24, 0x2074
    130c:	68 13       	cpse	r22, r24
		{
			uart_length = rxdata[UART_LENGTH];
    130e:	80 93 1b 20 	sts	0x201B, r24
*/
ISR(USARTC0_RXC_vect)
{
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
}
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	0f 90       	pop	r0
    1330:	1f 90       	pop	r1
    1332:	18 95       	reti

00001334 <uartCmdValid>:


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    switch(cmd){
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	31 97       	sbiw	r30, 0x01	; 1
    133a:	e0 37       	cpi	r30, 0x70	; 112
    133c:	f1 05       	cpc	r31, r1
    133e:	30 f4       	brcc	.+12     	; 0x134c <uartCmdValid+0x18>
    1340:	e7 55       	subi	r30, 0x57	; 87
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__tablejump2__>
		case UART_GET_COLOR:
		case UART_GET_CHARGING:
		case UART_SET_MTCH:
		case UART_GET_MTCH:
		case UART_SET_RESTART:
			retval=true;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	08 95       	ret
}


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    134c:	80 e0       	ldi	r24, 0x00	; 0
		default:
			break;
	}
	return retval;

}
    134e:	08 95       	ret

00001350 <__vector_40>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
	 unsigned int count=0;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    137e:	e0 ec       	ldi	r30, 0xC0	; 192
    1380:	f9 e0       	ldi	r31, 0x09	; 9
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <__vector_40+0x42>

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
#ifdef LIMIT_LOOP //do not wait for ever.
               if(count++>10000)
    1384:	9c 01       	movw	r18, r24
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	81 31       	cpi	r24, 0x11	; 17
    138c:	97 42       	sbci	r25, 0x27	; 39
    138e:	78 f4       	brcc	.+30     	; 0x13ae <__vector_40+0x5e>
    1390:	c9 01       	movw	r24, r18
    1392:	21 81       	ldd	r18, Z+1	; 0x01
	}*/
	

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
    1394:	22 23       	and	r18, r18
    1396:	b4 f7       	brge	.-20     	; 0x1384 <__vector_40+0x34>
#endif		
	      }
		//do not read when error
		if(errflag)
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
    1398:	20 81       	ld	r18, Z
    139a:	da 01       	movw	r26, r20
    139c:	a2 5f       	subi	r26, 0xF2	; 242
    139e:	bf 4d       	sbci	r27, 0xDF	; 223
    13a0:	2c 93       	st	X, r18
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    13a2:	4f 5f       	subi	r20, 0xFF	; 255
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	4b 30       	cpi	r20, 0x0B	; 11
    13a8:	51 05       	cpc	r21, r1
    13aa:	99 f7       	brne	.-26     	; 0x1392 <__vector_40+0x42>
    13ac:	69 c1       	rjmp	.+722    	; 0x1680 <__vector_40+0x330>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    13ae:	80 91 0e 20 	lds	r24, 0x200E
    13b2:	c0 df       	rcall	.-128    	; 0x1334 <uartCmdValid>
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <__vector_40+0x6a>
    13b8:	5f c1       	rjmp	.+702    	; 0x1678 <__vector_40+0x328>
    13ba:	80 91 0f 20 	lds	r24, 0x200F
    13be:	89 30       	cpi	r24, 0x09	; 9
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <__vector_40+0x74>
    13c2:	5a c1       	rjmp	.+692    	; 0x1678 <__vector_40+0x328>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    13c4:	80 91 0e 20 	lds	r24, 0x200E
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	fc 01       	movw	r30, r24
    13cc:	31 97       	sbiw	r30, 0x01	; 1
    13ce:	e0 37       	cpi	r30, 0x70	; 112
    13d0:	f1 05       	cpc	r31, r1
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <__vector_40+0x86>
    13d4:	51 c1       	rjmp	.+674    	; 0x1678 <__vector_40+0x328>
    13d6:	e7 5e       	subi	r30, 0xE7	; 231
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__tablejump2__>
		case UART_SET_COLOR:
	#ifdef LIMIT_LOOP //only handle correct format	
			if(buffer_data[1]!=UART_COLOR_LEN)
    13de:	80 91 0f 20 	lds	r24, 0x200F
    13e2:	89 30       	cpi	r24, 0x09	; 9
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <__vector_40+0x98>
    13e6:	48 c1       	rjmp	.+656    	; 0x1678 <__vector_40+0x328>
				break;
	#endif	
			send_response(UART_SET_COLOR, 0xff);
    13e8:	6f ef       	ldi	r22, 0xFF	; 255
    13ea:	83 e4       	ldi	r24, 0x43	; 67
    13ec:	ed d1       	rcall	.+986    	; 0x17c8 <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    13ee:	ae e0       	ldi	r26, 0x0E	; 14
    13f0:	b0 e2       	ldi	r27, 0x20	; 32
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	8c 91       	ld	r24, X
    13f6:	12 97       	sbiw	r26, 0x02	; 2
    13f8:	ec e8       	ldi	r30, 0x8C	; 140
    13fa:	f0 e2       	ldi	r31, 0x20	; 32
    13fc:	80 83       	st	Z, r24
	m_led_struct[0].g = buffer_data[3];
    13fe:	13 96       	adiw	r26, 0x03	; 3
    1400:	8c 91       	ld	r24, X
    1402:	13 97       	sbiw	r26, 0x03	; 3
    1404:	81 83       	std	Z+1, r24	; 0x01
	m_led_struct[0].b = buffer_data[4];
    1406:	14 96       	adiw	r26, 0x04	; 4
    1408:	8c 91       	ld	r24, X
    140a:	14 97       	sbiw	r26, 0x04	; 4
    140c:	82 83       	std	Z+2, r24	; 0x02
	m_led_struct[3].r = buffer_data[2];
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	8c 91       	ld	r24, X
    1412:	12 97       	sbiw	r26, 0x02	; 2
    1414:	81 87       	std	Z+9, r24	; 0x09
	m_led_struct[3].g = buffer_data[3];
    1416:	13 96       	adiw	r26, 0x03	; 3
    1418:	8c 91       	ld	r24, X
    141a:	13 97       	sbiw	r26, 0x03	; 3
    141c:	82 87       	std	Z+10, r24	; 0x0a
	m_led_struct[3].b = buffer_data[4];
    141e:	14 96       	adiw	r26, 0x04	; 4
    1420:	8c 91       	ld	r24, X
    1422:	14 97       	sbiw	r26, 0x04	; 4
    1424:	83 87       	std	Z+11, r24	; 0x0b
	
	m_led_struct[1].r = buffer_data[5];
    1426:	15 96       	adiw	r26, 0x05	; 5
    1428:	8c 91       	ld	r24, X
    142a:	15 97       	sbiw	r26, 0x05	; 5
    142c:	83 83       	std	Z+3, r24	; 0x03
	m_led_struct[1].g = buffer_data[6];
    142e:	16 96       	adiw	r26, 0x06	; 6
    1430:	8c 91       	ld	r24, X
    1432:	16 97       	sbiw	r26, 0x06	; 6
    1434:	84 83       	std	Z+4, r24	; 0x04
	m_led_struct[1].b = buffer_data[7];
    1436:	17 96       	adiw	r26, 0x07	; 7
    1438:	8c 91       	ld	r24, X
    143a:	17 97       	sbiw	r26, 0x07	; 7
    143c:	85 83       	std	Z+5, r24	; 0x05
	m_led_struct[4].r = buffer_data[5];
    143e:	15 96       	adiw	r26, 0x05	; 5
    1440:	8c 91       	ld	r24, X
    1442:	15 97       	sbiw	r26, 0x05	; 5
    1444:	84 87       	std	Z+12, r24	; 0x0c
	m_led_struct[4].g = buffer_data[6];
    1446:	16 96       	adiw	r26, 0x06	; 6
    1448:	8c 91       	ld	r24, X
    144a:	16 97       	sbiw	r26, 0x06	; 6
    144c:	85 87       	std	Z+13, r24	; 0x0d
	m_led_struct[4].b = buffer_data[7];
    144e:	17 96       	adiw	r26, 0x07	; 7
    1450:	8c 91       	ld	r24, X
    1452:	17 97       	sbiw	r26, 0x07	; 7
    1454:	86 87       	std	Z+14, r24	; 0x0e
	
	m_led_struct[2].r = buffer_data[8];
    1456:	18 96       	adiw	r26, 0x08	; 8
    1458:	8c 91       	ld	r24, X
    145a:	18 97       	sbiw	r26, 0x08	; 8
    145c:	86 83       	std	Z+6, r24	; 0x06
	m_led_struct[2].g = buffer_data[9];
    145e:	19 96       	adiw	r26, 0x09	; 9
    1460:	8c 91       	ld	r24, X
    1462:	19 97       	sbiw	r26, 0x09	; 9
    1464:	87 83       	std	Z+7, r24	; 0x07
	m_led_struct[2].b = buffer_data[10];
    1466:	1a 96       	adiw	r26, 0x0a	; 10
    1468:	8c 91       	ld	r24, X
    146a:	1a 97       	sbiw	r26, 0x0a	; 10
    146c:	80 87       	std	Z+8, r24	; 0x08
	m_led_struct[5].r = buffer_data[8];
    146e:	18 96       	adiw	r26, 0x08	; 8
    1470:	8c 91       	ld	r24, X
    1472:	18 97       	sbiw	r26, 0x08	; 8
    1474:	87 87       	std	Z+15, r24	; 0x0f
	m_led_struct[5].g = buffer_data[9];
    1476:	19 96       	adiw	r26, 0x09	; 9
    1478:	8c 91       	ld	r24, X
    147a:	19 97       	sbiw	r26, 0x09	; 9
    147c:	80 8b       	std	Z+16, r24	; 0x10
	m_led_struct[5].b = buffer_data[10];
    147e:	1a 96       	adiw	r26, 0x0a	; 10
    1480:	8c 91       	ld	r24, X
    1482:	81 8b       	std	Z+17, r24	; 0x11
	
	for (int i=0; i<9; i++) {
    1484:	c0 e0       	ldi	r28, 0x00	; 0
    1486:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    1488:	fe 01       	movw	r30, r28
    148a:	e0 5f       	subi	r30, 0xF0	; 240
    148c:	ff 4d       	sbci	r31, 0xDF	; 223
    148e:	80 81       	ld	r24, Z
    1490:	fe 01       	movw	r30, r28
    1492:	eb 5f       	subi	r30, 0xFB	; 251
    1494:	ff 4d       	sbci	r31, 0xDF	; 223
    1496:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    1498:	60 81       	ld	r22, Z
    149a:	21 96       	adiw	r28, 0x01	; 1
    149c:	ce 01       	movw	r24, r28
    149e:	33 d6       	rcall	.+3174   	; 0x2106 <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    14a0:	c9 30       	cpi	r28, 0x09	; 9
    14a2:	d1 05       	cpc	r29, r1
    14a4:	89 f7       	brne	.-30     	; 0x1488 <__vector_40+0x138>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    14a6:	1d d1       	rcall	.+570    	; 0x16e2 <ischarging>
    14a8:	81 11       	cpse	r24, r1
    14aa:	e6 c0       	rjmp	.+460    	; 0x1678 <__vector_40+0x328>
		set_flash_ws2812(m_led_struct, 6);
    14ac:	66 e0       	ldi	r22, 0x06	; 6
    14ae:	8c e8       	ldi	r24, 0x8C	; 140
    14b0:	90 e2       	ldi	r25, 0x20	; 32
    14b2:	92 d3       	rcall	.+1828   	; 0x1bd8 <set_flash_ws2812>
    14b4:	e1 c0       	rjmp	.+450    	; 0x1678 <__vector_40+0x328>
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    14b6:	6f ef       	ldi	r22, 0xFF	; 255
    14b8:	80 e5       	ldi	r24, 0x50	; 80
    14ba:	86 d1       	rcall	.+780    	; 0x17c8 <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    14bc:	80 91 10 20 	lds	r24, 0x2010
    14c0:	88 23       	and	r24, r24
    14c2:	19 f0       	breq	.+6      	; 0x14ca <__vector_40+0x17a>
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	39 f0       	breq	.+14     	; 0x14d6 <__vector_40+0x186>
    14c8:	0c c0       	rjmp	.+24     	; 0x14e2 <__vector_40+0x192>
		case 0x00:
			pulse_state = false;
    14ca:	10 92 38 20 	sts	0x2038, r1
			pulse_state_changed = true;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	80 93 37 20 	sts	0x2037, r24
    14d4:	d1 c0       	rjmp	.+418    	; 0x1678 <__vector_40+0x328>
			break;
		case 0x01:
			pulse_state = true;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	80 93 38 20 	sts	0x2038, r24
			pulse_state_changed = true;
    14dc:	80 93 37 20 	sts	0x2037, r24
    14e0:	cb c0       	rjmp	.+406    	; 0x1678 <__vector_40+0x328>
			break;
		default:
			pulse_state = true;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	80 93 38 20 	sts	0x2038, r24
			pulse_state_changed = true;
    14e8:	80 93 37 20 	sts	0x2037, r24
    14ec:	c5 c0       	rjmp	.+394    	; 0x1678 <__vector_40+0x328>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    14ee:	80 91 38 20 	lds	r24, 0x2038
    14f2:	88 23       	and	r24, r24
    14f4:	29 f0       	breq	.+10     	; 0x1500 <__vector_40+0x1b0>
				pulse_state = false;
    14f6:	10 92 38 20 	sts	0x2038, r1
				pulse_state_changed = true;	
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	80 93 37 20 	sts	0x2037, r24
			}
			shutdown_received = true;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 36 20 	sts	0x2036, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    1506:	6f ef       	ldi	r22, 0xFF	; 255
    1508:	5f d1       	rcall	.+702    	; 0x17c8 <send_response>
    150a:	b6 c0       	rjmp	.+364    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    150c:	80 91 10 20 	lds	r24, 0x2010
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	87 30       	cpi	r24, 0x07	; 7
    1514:	91 05       	cpc	r25, r1
    1516:	08 f0       	brcs	.+2      	; 0x151a <__vector_40+0x1ca>
    1518:	af c0       	rjmp	.+350    	; 0x1678 <__vector_40+0x328>
    151a:	fc 01       	movw	r30, r24
    151c:	e7 57       	subi	r30, 0x77	; 119
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    1524:	80 91 11 20 	lds	r24, 0x2011
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	80 93 40 20 	sts	0x2040, r24
    152e:	90 93 41 20 	sts	0x2041, r25
    1532:	a2 c0       	rjmp	.+324    	; 0x1678 <__vector_40+0x328>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    1534:	80 91 11 20 	lds	r24, 0x2011
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	80 93 27 20 	sts	0x2027, r24
    153e:	90 93 28 20 	sts	0x2028, r25
    1542:	9a c0       	rjmp	.+308    	; 0x1678 <__vector_40+0x328>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    1544:	80 91 11 20 	lds	r24, 0x2011
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	80 93 25 20 	sts	0x2025, r24
    154e:	90 93 26 20 	sts	0x2026, r25
    1552:	92 c0       	rjmp	.+292    	; 0x1678 <__vector_40+0x328>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    1554:	80 91 11 20 	lds	r24, 0x2011
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	80 93 23 20 	sts	0x2023, r24
    155e:	90 93 24 20 	sts	0x2024, r25
    1562:	8a c0       	rjmp	.+276    	; 0x1678 <__vector_40+0x328>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    1564:	80 91 11 20 	lds	r24, 0x2011
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	80 93 21 20 	sts	0x2021, r24
    156e:	90 93 22 20 	sts	0x2022, r25
    1572:	82 c0       	rjmp	.+260    	; 0x1678 <__vector_40+0x328>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    1574:	80 91 11 20 	lds	r24, 0x2011
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	80 93 1f 20 	sts	0x201F, r24
    157e:	90 93 20 20 	sts	0x2020, r25
    1582:	7a c0       	rjmp	.+244    	; 0x1678 <__vector_40+0x328>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    1584:	80 91 11 20 	lds	r24, 0x2011
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	80 93 1d 20 	sts	0x201D, r24
    158e:	90 93 1e 20 	sts	0x201E, r25
    1592:	72 c0       	rjmp	.+228    	; 0x1678 <__vector_40+0x328>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    1594:	80 91 10 20 	lds	r24, 0x2010
    1598:	80 93 1c 20 	sts	0x201C, r24
    159c:	6d c0       	rjmp	.+218    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    159e:	80 91 10 20 	lds	r24, 0x2010
    15a2:	80 93 02 20 	sts	0x2002, r24
    15a6:	68 c0       	rjmp	.+208    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    15a8:	80 91 10 20 	lds	r24, 0x2010
    15ac:	80 93 01 20 	sts	0x2001, r24
    15b0:	63 c0       	rjmp	.+198    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    15b2:	80 91 10 20 	lds	r24, 0x2010
    15b6:	80 93 00 20 	sts	0x2000, r24
    15ba:	5e c0       	rjmp	.+188    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    15bc:	16 d1       	rcall	.+556    	; 0x17ea <send_light_data>
    15be:	5c c0       	rjmp	.+184    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    15c0:	2d d1       	rcall	.+602    	; 0x181c <send_battery_data>
    15c2:	5a c0       	rjmp	.+180    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    15c4:	98 d1       	rcall	.+816    	; 0x18f6 <send_pulse_data>
    15c6:	58 c0       	rjmp	.+176    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    15c8:	6f d1       	rcall	.+734    	; 0x18a8 <send_color_data>
    15ca:	56 c0       	rjmp	.+172    	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    15cc:	41 d1       	rcall	.+642    	; 0x1850 <send_charging_data>
    15ce:	54 c0       	rjmp	.+168    	; 0x1678 <__vector_40+0x328>
			break;		
			
		case UART_SET_MTCH:
			nvm_eeprom_write_byte(buffer_data[2], buffer_data[3]);
    15d0:	ce e0       	ldi	r28, 0x0E	; 14
    15d2:	d0 e2       	ldi	r29, 0x20	; 32
    15d4:	6b 81       	ldd	r22, Y+3	; 0x03
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	95 d5       	rcall	.+2858   	; 0x2106 <nvm_eeprom_write_byte>
			
			if (buffer_data[2] <= 15) {
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	80 31       	cpi	r24, 0x10	; 16
    15e0:	28 f4       	brcc	.+10     	; 0x15ec <__vector_40+0x29c>
				nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, 1);
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	8d e4       	ldi	r24, 0x4D	; 77
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	8e d5       	rcall	.+2844   	; 0x2106 <nvm_eeprom_write_byte>
    15ea:	3e c0       	rjmp	.+124    	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 28) {
    15ec:	80 91 10 20 	lds	r24, 0x2010
    15f0:	8d 31       	cpi	r24, 0x1D	; 29
    15f2:	28 f4       	brcc	.+10     	; 0x15fe <__vector_40+0x2ae>
				nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, 1);
    15f4:	61 e0       	ldi	r22, 0x01	; 1
    15f6:	8e e4       	ldi	r24, 0x4E	; 78
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	85 d5       	rcall	.+2826   	; 0x2106 <nvm_eeprom_write_byte>
    15fc:	35 c0       	rjmp	.+106    	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 46) {
    15fe:	80 91 10 20 	lds	r24, 0x2010
    1602:	8f 32       	cpi	r24, 0x2F	; 47
    1604:	28 f4       	brcc	.+10     	; 0x1610 <__vector_40+0x2c0>
				nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, 1);
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	8f e4       	ldi	r24, 0x4F	; 79
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	7c d5       	rcall	.+2808   	; 0x2106 <nvm_eeprom_write_byte>
    160e:	2c c0       	rjmp	.+88     	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 48) {
    1610:	80 91 10 20 	lds	r24, 0x2010
    1614:	81 33       	cpi	r24, 0x31	; 49
    1616:	28 f4       	brcc	.+10     	; 0x1622 <__vector_40+0x2d2>
				nvm_eeprom_write_byte(EEPROM_INDEX_SELF, 1);
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	80 e5       	ldi	r24, 0x50	; 80
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	73 d5       	rcall	.+2790   	; 0x2106 <nvm_eeprom_write_byte>
    1620:	23 c0       	rjmp	.+70     	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 50) {
    1622:	80 91 10 20 	lds	r24, 0x2010
    1626:	83 33       	cpi	r24, 0x33	; 51
    1628:	28 f4       	brcc	.+10     	; 0x1634 <__vector_40+0x2e4>
				nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, 1);
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	81 e5       	ldi	r24, 0x51	; 81
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	6a d5       	rcall	.+2772   	; 0x2106 <nvm_eeprom_write_byte>
    1632:	1a c0       	rjmp	.+52     	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 56) {
    1634:	80 91 10 20 	lds	r24, 0x2010
    1638:	89 33       	cpi	r24, 0x39	; 57
    163a:	28 f4       	brcc	.+10     	; 0x1646 <__vector_40+0x2f6>
				nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, 1);
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	82 e5       	ldi	r24, 0x52	; 82
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	61 d5       	rcall	.+2754   	; 0x2106 <nvm_eeprom_write_byte>
    1644:	11 c0       	rjmp	.+34     	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 69) {
    1646:	80 91 10 20 	lds	r24, 0x2010
    164a:	86 34       	cpi	r24, 0x46	; 70
    164c:	28 f4       	brcc	.+10     	; 0x1658 <__vector_40+0x308>
				nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 1);
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	83 e5       	ldi	r24, 0x53	; 83
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	58 d5       	rcall	.+2736   	; 0x2106 <nvm_eeprom_write_byte>
    1656:	08 c0       	rjmp	.+16     	; 0x1668 <__vector_40+0x318>
			}
			else if (buffer_data[2] <= 76) {
    1658:	80 91 10 20 	lds	r24, 0x2010
    165c:	8d 34       	cpi	r24, 0x4D	; 77
    165e:	20 f4       	brcc	.+8      	; 0x1668 <__vector_40+0x318>
				nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	84 e5       	ldi	r24, 0x54	; 84
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	4f d5       	rcall	.+2718   	; 0x2106 <nvm_eeprom_write_byte>
			}
			nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	85 e5       	ldi	r24, 0x55	; 85
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	4b d5       	rcall	.+2710   	; 0x2106 <nvm_eeprom_write_byte>
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_GET_MTCH:
			send_mtch_update_status();
    1672:	03 d1       	rcall	.+518    	; 0x187a <send_mtch_update_status>
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <__vector_40+0x328>
			break;
			
		case UART_SET_RESTART:
			while(1) {barrier();}
    1676:	ff cf       	rjmp	.-2      	; 0x1676 <__vector_40+0x326>
	{
	interpret_message();
          errflag=0;
	}
	
	uart_done_flag = true;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 39 20 	sts	0x2039, r24
    167e:	06 c0       	rjmp	.+12     	; 0x168c <__vector_40+0x33c>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    1680:	80 91 0e 20 	lds	r24, 0x200E
    1684:	57 de       	rcall	.-850    	; 0x1334 <uartCmdValid>
    1686:	81 11       	cpse	r24, r1
    1688:	9d ce       	rjmp	.-710    	; 0x13c4 <__vector_40+0x74>
    168a:	f6 cf       	rjmp	.-20     	; 0x1678 <__vector_40+0x328>
			usart_putchar(&USARTD0, buffer_data[0]);
			usart_putchar(&USARTD0, count_uart);
		}
		}
	*/
}
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	bf 91       	pop	r27
    1696:	af 91       	pop	r26
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	7f 91       	pop	r23
    169e:	6f 91       	pop	r22
    16a0:	5f 91       	pop	r21
    16a2:	4f 91       	pop	r20
    16a4:	3f 91       	pop	r19
    16a6:	2f 91       	pop	r18
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
	for (int i = 0; i < len; i++){
    16ba:	61 15       	cp	r22, r1
    16bc:	71 05       	cpc	r23, r1
    16be:	61 f0       	breq	.+24     	; 0x16d8 <uart_send_bytes+0x26>
    16c0:	8c 01       	movw	r16, r24
    16c2:	ec 01       	movw	r28, r24
    16c4:	06 0f       	add	r16, r22
    16c6:	17 1f       	adc	r17, r23
		usart_putchar(&USARTD0, byte_array[i]);
    16c8:	69 91       	ld	r22, Y+
    16ca:	80 ec       	ldi	r24, 0xC0	; 192
    16cc:	99 e0       	ldi	r25, 0x09	; 9
    16ce:	0e 94 96 14 	call	0x292c	; 0x292c <usart_putchar>
	*/
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    16d2:	c0 17       	cp	r28, r16
    16d4:	d1 07       	cpc	r29, r17
    16d6:	c1 f7       	brne	.-16     	; 0x16c8 <uart_send_bytes+0x16>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <ischarging>:
	}
	/* If visualization wasn't on then load solid colors that are saved including no color saved */
	else 
	{
		fht_flag = false;
		restore_led_from_eeprom();
    16e2:	80 91 e8 07 	lds	r24, 0x07E8
    16e6:	86 95       	lsr	r24
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	08 95       	ret

000016ec <twinkle>:
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	f9 01       	movw	r30, r18
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	e2 0f       	add	r30, r18
    16f8:	f3 1f       	adc	r31, r19
    16fa:	e4 57       	subi	r30, 0x74	; 116
    16fc:	ff 4d       	sbci	r31, 0xDF	; 223
    16fe:	80 83       	st	Z, r24
    1700:	61 83       	std	Z+1, r22	; 0x01
    1702:	42 83       	std	Z+2, r20	; 0x02
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	26 30       	cpi	r18, 0x06	; 6
    170a:	31 05       	cpc	r19, r1
    170c:	89 f7       	brne	.-30     	; 0x16f0 <twinkle+0x4>
    170e:	66 e0       	ldi	r22, 0x06	; 6
    1710:	8c e8       	ldi	r24, 0x8C	; 140
    1712:	90 e2       	ldi	r25, 0x20	; 32
    1714:	61 c2       	rjmp	.+1218   	; 0x1bd8 <set_flash_ws2812>
    1716:	08 95       	ret

00001718 <rainbow>:
    1718:	ec e8       	ldi	r30, 0x8C	; 140
    171a:	f0 e2       	ldi	r31, 0x20	; 32
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	80 83       	st	Z, r24
    1720:	11 82       	std	Z+1, r1	; 0x01
    1722:	12 82       	std	Z+2, r1	; 0x02
    1724:	13 82       	std	Z+3, r1	; 0x03
    1726:	84 83       	std	Z+4, r24	; 0x04
    1728:	15 82       	std	Z+5, r1	; 0x05
    172a:	16 82       	std	Z+6, r1	; 0x06
    172c:	17 82       	std	Z+7, r1	; 0x07
    172e:	80 87       	std	Z+8, r24	; 0x08
    1730:	81 87       	std	Z+9, r24	; 0x09
    1732:	12 86       	std	Z+10, r1	; 0x0a
    1734:	13 86       	std	Z+11, r1	; 0x0b
    1736:	14 86       	std	Z+12, r1	; 0x0c
    1738:	85 87       	std	Z+13, r24	; 0x0d
    173a:	16 86       	std	Z+14, r1	; 0x0e
    173c:	17 86       	std	Z+15, r1	; 0x0f
    173e:	10 8a       	std	Z+16, r1	; 0x10
    1740:	81 8b       	std	Z+17, r24	; 0x11
    1742:	66 e0       	ldi	r22, 0x06	; 6
    1744:	cf 01       	movw	r24, r30
    1746:	48 c2       	rjmp	.+1168   	; 0x1bd8 <set_flash_ws2812>
    1748:	08 95       	ret

0000174a <clear_led>:
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	e8 2f       	mov	r30, r24
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	9f 01       	movw	r18, r30
    1752:	22 0f       	add	r18, r18
    1754:	33 1f       	adc	r19, r19
    1756:	e2 0f       	add	r30, r18
    1758:	f3 1f       	adc	r31, r19
    175a:	e4 57       	subi	r30, 0x74	; 116
    175c:	ff 4d       	sbci	r31, 0xDF	; 223
    175e:	10 82       	st	Z, r1
    1760:	11 82       	std	Z+1, r1	; 0x01
    1762:	12 82       	std	Z+2, r1	; 0x02
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	86 30       	cpi	r24, 0x06	; 6
    1768:	89 f7       	brne	.-30     	; 0x174c <clear_led+0x2>
    176a:	66 e0       	ldi	r22, 0x06	; 6
    176c:	8c e8       	ldi	r24, 0x8C	; 140
    176e:	90 e2       	ldi	r25, 0x20	; 32
    1770:	33 c2       	rjmp	.+1126   	; 0x1bd8 <set_flash_ws2812>
    1772:	08 95       	ret

00001774 <__vector_35>:
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	80 93 6c 06 	sts	0x066C, r24
    179c:	d6 df       	rcall	.-84     	; 0x174a <clear_led>
    179e:	82 e1       	ldi	r24, 0x12	; 18
    17a0:	97 e2       	ldi	r25, 0x27	; 39
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <__vector_35+0x2e>
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <send_response>:
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <send_response+0x6>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	6a 83       	std	Y+2, r22	; 0x02
    17d6:	62 e0       	ldi	r22, 0x02	; 2
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	69 df       	rcall	.-302    	; 0x16b2 <uart_send_bytes>
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <send_light_data>:
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <send_light_data+0x6>
    17f0:	1f 92       	push	r1
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	90 91 3e 20 	lds	r25, 0x203E
    17fa:	80 91 3f 20 	lds	r24, 0x203F
    17fe:	9b 83       	std	Y+3, r25	; 0x03
    1800:	8a 83       	std	Y+2, r24	; 0x02
    1802:	8d e4       	ldi	r24, 0x4D	; 77
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	63 e0       	ldi	r22, 0x03	; 3
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	ce 01       	movw	r24, r28
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	51 df       	rcall	.-350    	; 0x16b2 <uart_send_bytes>
    1810:	23 96       	adiw	r28, 0x03	; 3
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <send_battery_data>:
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	00 d0       	rcall	.+0      	; 0x1822 <send_battery_data+0x6>
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	80 91 3c 20 	lds	r24, 0x203C
    182a:	90 91 3d 20 	lds	r25, 0x203D
    182e:	6a e0       	ldi	r22, 0x0A	; 10
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
    1836:	6a 83       	std	Y+2, r22	; 0x02
    1838:	82 e4       	ldi	r24, 0x42	; 66
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	36 df       	rcall	.-404    	; 0x16b2 <uart_send_bytes>
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	08 95       	ret

00001850 <send_charging_data>:
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	00 d0       	rcall	.+0      	; 0x1856 <send_charging_data+0x6>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	19 82       	std	Y+1, r1	; 0x01
    185c:	1a 82       	std	Y+2, r1	; 0x02
    185e:	41 df       	rcall	.-382    	; 0x16e2 <ischarging>
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	87 e4       	ldi	r24, 0x47	; 71
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	62 e0       	ldi	r22, 0x02	; 2
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	ce 01       	movw	r24, r28
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	21 df       	rcall	.-446    	; 0x16b2 <uart_send_bytes>
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	08 95       	ret

0000187a <send_mtch_update_status>:
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	00 d0       	rcall	.+0      	; 0x1880 <send_mtch_update_status+0x6>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	19 82       	std	Y+1, r1	; 0x01
    1886:	1a 82       	std	Y+2, r1	; 0x02
    1888:	85 e5       	ldi	r24, 0x55	; 85
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	17 d4       	rcall	.+2094   	; 0x20bc <nvm_eeprom_read_byte>
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	88 e4       	ldi	r24, 0x48	; 72
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	62 e0       	ldi	r22, 0x02	; 2
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	ce 01       	movw	r24, r28
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	0a df       	rcall	.-492    	; 0x16b2 <uart_send_bytes>
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <send_color_data>:
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	2a 97       	sbiw	r28, 0x0a	; 10
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	fe 01       	movw	r30, r28
    18b8:	31 96       	adiw	r30, 0x01	; 1
    18ba:	8a e0       	ldi	r24, 0x0A	; 10
    18bc:	df 01       	movw	r26, r30
    18be:	1d 92       	st	X+, r1
    18c0:	8a 95       	dec	r24
    18c2:	e9 f7       	brne	.-6      	; 0x18be <send_color_data+0x16>
    18c4:	83 e6       	ldi	r24, 0x63	; 99
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	31 96       	adiw	r30, 0x01	; 1
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	dc 01       	movw	r26, r24
    18d0:	ab 5f       	subi	r26, 0xFB	; 251
    18d2:	bf 4d       	sbci	r27, 0xDF	; 223
    18d4:	2c 91       	ld	r18, X
    18d6:	21 93       	st	Z+, r18
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	89 30       	cpi	r24, 0x09	; 9
    18dc:	91 05       	cpc	r25, r1
    18de:	b9 f7       	brne	.-18     	; 0x18ce <send_color_data+0x26>
    18e0:	6a e0       	ldi	r22, 0x0A	; 10
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	ce 01       	movw	r24, r28
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	e4 de       	rcall	.-568    	; 0x16b2 <uart_send_bytes>
    18ea:	2a 96       	adiw	r28, 0x0a	; 10
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <send_pulse_data>:
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <send_pulse_data+0x6>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	1a 82       	std	Y+2, r1	; 0x02
    1904:	a7 dc       	rcall	.-1714   	; 0x1254 <get_pulse_state>
    1906:	8a 83       	std	Y+2, r24	; 0x02
    1908:	80 e7       	ldi	r24, 0x70	; 112
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	ce de       	rcall	.-612    	; 0x16b2 <uart_send_bytes>
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <restore_led_from_eeprom>:
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	c9 d3       	rcall	.+1938   	; 0x20bc <nvm_eeprom_read_byte>
    192a:	c5 e0       	ldi	r28, 0x05	; 5
    192c:	d0 e2       	ldi	r29, 0x20	; 32
    192e:	88 83       	st	Y, r24
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	c3 d3       	rcall	.+1926   	; 0x20bc <nvm_eeprom_read_byte>
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	bf d3       	rcall	.+1918   	; 0x20bc <nvm_eeprom_read_byte>
    193e:	8a 83       	std	Y+2, r24	; 0x02
    1940:	84 e0       	ldi	r24, 0x04	; 4
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	bb d3       	rcall	.+1910   	; 0x20bc <nvm_eeprom_read_byte>
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	85 e0       	ldi	r24, 0x05	; 5
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	b7 d3       	rcall	.+1902   	; 0x20bc <nvm_eeprom_read_byte>
    194e:	8c 83       	std	Y+4, r24	; 0x04
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	b3 d3       	rcall	.+1894   	; 0x20bc <nvm_eeprom_read_byte>
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	87 e0       	ldi	r24, 0x07	; 7
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	af d3       	rcall	.+1886   	; 0x20bc <nvm_eeprom_read_byte>
    195e:	8e 83       	std	Y+6, r24	; 0x06
    1960:	88 e0       	ldi	r24, 0x08	; 8
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	ab d3       	rcall	.+1878   	; 0x20bc <nvm_eeprom_read_byte>
    1966:	8f 83       	std	Y+7, r24	; 0x07
    1968:	89 e0       	ldi	r24, 0x09	; 9
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a7 d3       	rcall	.+1870   	; 0x20bc <nvm_eeprom_read_byte>
    196e:	88 87       	std	Y+8, r24	; 0x08
    1970:	12 dc       	rcall	.-2012   	; 0x1196 <led_set_from_colors>
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <wdt_kick>:
	}
}

void wdt_kick(void) {
	if (flag_timerd5) {
    1978:	80 91 73 20 	lds	r24, 0x2073
    197c:	88 23       	and	r24, r24
    197e:	19 f0       	breq	.+6      	; 0x1986 <wdt_kick+0xe>
		flag_timerd5 = false;
    1980:	10 92 73 20 	sts	0x2073, r1
		wdt_reset();
    1984:	a8 95       	wdr
    1986:	08 95       	ret

00001988 <init_ws2812>:
    1988:	98 2f       	mov	r25, r24
    198a:	97 70       	andi	r25, 0x07	; 7
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <init_ws2812+0xe>
    1992:	66 0f       	add	r22, r22
    1994:	77 1f       	adc	r23, r23
    1996:	9a 95       	dec	r25
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <init_ws2812+0xa>
    199a:	86 95       	lsr	r24
    199c:	86 95       	lsr	r24
    199e:	86 95       	lsr	r24
    19a0:	20 e2       	ldi	r18, 0x20	; 32
    19a2:	82 9f       	mul	r24, r18
    19a4:	c0 01       	movw	r24, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	9a 5f       	subi	r25, 0xFA	; 250
    19ae:	2a c3       	rjmp	.+1620   	; 0x2004 <ioport_configure_port_pin>
    19b0:	08 95       	ret

000019b2 <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    19b2:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	2c 91       	ld	r18, X
    19b8:	11 97       	sbiw	r26, 0x01	; 1
    19ba:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    19bc:	e0 e4       	ldi	r30, 0x40	; 64
    19be:	f6 e0       	ldi	r31, 0x06	; 6
    19c0:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    19c2:	22 23       	and	r18, r18
    19c4:	0c f0       	brlt	.+2      	; 0x19c8 <set_led_ws2812+0x16>
    19c6:	28 c0       	rjmp	.+80     	; 0x1a18 <set_led_ws2812+0x66>
    19c8:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    19fa:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1a14:	00 00       	nop
    1a16:	26 c0       	rjmp	.+76     	; 0x1a64 <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1a18:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1a2e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1a30:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1a62:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    1a64:	22 0f       	add	r18, r18
    1a66:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <set_led_ws2812+0xba>
    1a6a:	ab cf       	rjmp	.-170    	; 0x19c2 <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    1a6c:	2c 91       	ld	r18, X
    1a6e:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1a70:	e0 e4       	ldi	r30, 0x40	; 64
    1a72:	f6 e0       	ldi	r31, 0x06	; 6
    1a74:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    1a76:	22 23       	and	r18, r18
    1a78:	0c f0       	brlt	.+2      	; 0x1a7c <set_led_ws2812+0xca>
    1a7a:	28 c0       	rjmp	.+80     	; 0x1acc <set_led_ws2812+0x11a>
    1a7c:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1aae:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1ac8:	00 00       	nop
    1aca:	26 c0       	rjmp	.+76     	; 0x1b18 <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1acc:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1ae2:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1ae4:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1b16:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    1b18:	22 0f       	add	r18, r18
    1b1a:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <set_led_ws2812+0x16e>
    1b1e:	ab cf       	rjmp	.-170    	; 0x1a76 <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    1b20:	12 96       	adiw	r26, 0x02	; 2
    1b22:	9c 91       	ld	r25, X
    1b24:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1b26:	e0 e4       	ldi	r30, 0x40	; 64
    1b28:	f6 e0       	ldi	r31, 0x06	; 6
    1b2a:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    1b2c:	99 23       	and	r25, r25
    1b2e:	0c f0       	brlt	.+2      	; 0x1b32 <set_led_ws2812+0x180>
    1b30:	28 c0       	rjmp	.+80     	; 0x1b82 <set_led_ws2812+0x1d0>
    1b32:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1b64:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1b7e:	00 00       	nop
    1b80:	26 c0       	rjmp	.+76     	; 0x1bce <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1b82:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1b98:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1b9a:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    1bcc:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    1bce:	99 0f       	add	r25, r25
    1bd0:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <set_led_ws2812+0x224>
    1bd4:	ab cf       	rjmp	.-170    	; 0x1b2c <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    1bd6:	08 95       	ret

00001bd8 <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    1be0:	66 23       	and	r22, r22
    1be2:	51 f0       	breq	.+20     	; 0x1bf8 <set_flash_ws2812+0x20>
    1be4:	06 2f       	mov	r16, r22
    1be6:	c8 2f       	mov	r28, r24
    1be8:	d9 2f       	mov	r29, r25
    1bea:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    1bec:	ce 01       	movw	r24, r28
    1bee:	e1 de       	rcall	.-574    	; 0x19b2 <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    1bf0:	1f 5f       	subi	r17, 0xFF	; 255
    1bf2:	23 96       	adiw	r28, 0x03	; 3
    1bf4:	10 13       	cpse	r17, r16
    1bf6:	fa cf       	rjmp	.-12     	; 0x1bec <set_flash_ws2812+0x14>
    1bf8:	80 e4       	ldi	r24, 0x40	; 64
    1bfa:	80 93 46 06 	sts	0x0646, r24
    1bfe:	89 ef       	ldi	r24, 0xF9	; 249
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <set_flash_ws2812+0x2a>
    1c06:	00 c0       	rjmp	.+0      	; 0x1c08 <set_flash_ws2812+0x30>
    1c08:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	08 95       	ret

00001c14 <main>:
	set_flash_ws2812(m_led_struct, 6);
}


int main(void)
{
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	de bf       	out	0x3e, r29	; 62
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    1c22:	b2 d1       	rcall	.+868    	; 0x1f88 <sysclk_init>

	
	nvm_eeprom_write_byte(10, 0x07);
    1c24:	67 e0       	ldi	r22, 0x07	; 7
    1c26:	8a e0       	ldi	r24, 0x0A	; 10
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	6d d2       	rcall	.+1242   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(11, 0x05);
    1c2c:	65 e0       	ldi	r22, 0x05	; 5
    1c2e:	8b e0       	ldi	r24, 0x0B	; 11
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	69 d2       	rcall	.+1234   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(12, 0x92);
    1c34:	62 e9       	ldi	r22, 0x92	; 146
    1c36:	8c e0       	ldi	r24, 0x0C	; 12
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	65 d2       	rcall	.+1226   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(13, 0x24);
    1c3c:	64 e2       	ldi	r22, 0x24	; 36
    1c3e:	8d e0       	ldi	r24, 0x0D	; 13
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	61 d2       	rcall	.+1218   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(14, 0x33);
    1c44:	63 e3       	ldi	r22, 0x33	; 51
    1c46:	8e e0       	ldi	r24, 0x0E	; 14
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	5d d2       	rcall	.+1210   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(15, 0x33);
    1c4c:	63 e3       	ldi	r22, 0x33	; 51
    1c4e:	8f e0       	ldi	r24, 0x0F	; 15
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	59 d2       	rcall	.+1202   	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(16, 0x05);
    1c54:	65 e0       	ldi	r22, 0x05	; 5
    1c56:	80 e1       	ldi	r24, 0x10	; 16
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	55 d2       	rcall	.+1194   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(17, 0x06);
    1c5c:	66 e0       	ldi	r22, 0x06	; 6
    1c5e:	81 e1       	ldi	r24, 0x11	; 17
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	51 d2       	rcall	.+1186   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(18, 0x07);
    1c64:	67 e0       	ldi	r22, 0x07	; 7
    1c66:	82 e1       	ldi	r24, 0x12	; 18
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	4d d2       	rcall	.+1178   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(19, 0x01);
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	83 e1       	ldi	r24, 0x13	; 19
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	49 d2       	rcall	.+1170   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(20, 0x04);
    1c74:	64 e0       	ldi	r22, 0x04	; 4
    1c76:	84 e1       	ldi	r24, 0x14	; 20
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	45 d2       	rcall	.+1162   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(21, 0x03);
    1c7c:	63 e0       	ldi	r22, 0x03	; 3
    1c7e:	85 e1       	ldi	r24, 0x15	; 21
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	41 d2       	rcall	.+1154   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(22, 0x02);
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	86 e1       	ldi	r24, 0x16	; 22
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	3d d2       	rcall	.+1146   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(23, 0x01);
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	87 e1       	ldi	r24, 0x17	; 23
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	39 d2       	rcall	.+1138   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(24, 0x00);
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	88 e1       	ldi	r24, 0x18	; 24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	35 d2       	rcall	.+1130   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(25, 0x09);
    1c9c:	69 e0       	ldi	r22, 0x09	; 9
    1c9e:	89 e1       	ldi	r24, 0x19	; 25
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	31 d2       	rcall	.+1122   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(26, 0x0a);
    1ca4:	6a e0       	ldi	r22, 0x0A	; 10
    1ca6:	8a e1       	ldi	r24, 0x1A	; 26
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	2d d2       	rcall	.+1114   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(27, 0x0b);
    1cac:	6b e0       	ldi	r22, 0x0B	; 11
    1cae:	8b e1       	ldi	r24, 0x1B	; 27
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	29 d2       	rcall	.+1106   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(28, 0x0c);
    1cb4:	6c e0       	ldi	r22, 0x0C	; 12
    1cb6:	8c e1       	ldi	r24, 0x1C	; 28
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	25 d2       	rcall	.+1098   	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(29, 0x03);
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	8d e1       	ldi	r24, 0x1D	; 29
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	21 d2       	rcall	.+1090   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(30, 0x06);
    1cc4:	66 e0       	ldi	r22, 0x06	; 6
    1cc6:	8e e1       	ldi	r24, 0x1E	; 30
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	1d d2       	rcall	.+1082   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(31, 0x0d);
    1ccc:	6d e0       	ldi	r22, 0x0D	; 13
    1cce:	8f e1       	ldi	r24, 0x1F	; 31
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	19 d2       	rcall	.+1074   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(32, 0x04);
    1cd4:	64 e0       	ldi	r22, 0x04	; 4
    1cd6:	80 e2       	ldi	r24, 0x20	; 32
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	15 d2       	rcall	.+1066   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(33, 0x02);
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	81 e2       	ldi	r24, 0x21	; 33
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	11 d2       	rcall	.+1058   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(34, 0x1e);
    1ce4:	6e e1       	ldi	r22, 0x1E	; 30
    1ce6:	82 e2       	ldi	r24, 0x22	; 34
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0d d2       	rcall	.+1050   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(35, 0x1d);
    1cec:	6d e1       	ldi	r22, 0x1D	; 29
    1cee:	83 e2       	ldi	r24, 0x23	; 35
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	09 d2       	rcall	.+1042   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(36, 0x1c);
    1cf4:	6c e1       	ldi	r22, 0x1C	; 28
    1cf6:	84 e2       	ldi	r24, 0x24	; 36
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	05 d2       	rcall	.+1034   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(37, 0x07);
    1cfc:	67 e0       	ldi	r22, 0x07	; 7
    1cfe:	85 e2       	ldi	r24, 0x25	; 37
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	01 d2       	rcall	.+1026   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(38, 0x0e);
    1d04:	6e e0       	ldi	r22, 0x0E	; 14
    1d06:	86 e2       	ldi	r24, 0x26	; 38
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	fd d1       	rcall	.+1018   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(39, 0x0f);
    1d0c:	6f e0       	ldi	r22, 0x0F	; 15
    1d0e:	87 e2       	ldi	r24, 0x27	; 39
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	f9 d1       	rcall	.+1010   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(40, 0x10);
    1d14:	60 e1       	ldi	r22, 0x10	; 16
    1d16:	88 e2       	ldi	r24, 0x28	; 40
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	f5 d1       	rcall	.+1002   	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(41, 0x05);
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	89 e2       	ldi	r24, 0x29	; 41
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	f1 d1       	rcall	.+994    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(42, 0x08);
    1d24:	68 e0       	ldi	r22, 0x08	; 8
    1d26:	8a e2       	ldi	r24, 0x2A	; 42
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	ed d1       	rcall	.+986    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(43, 0x22);
    1d2c:	62 e2       	ldi	r22, 0x22	; 34
    1d2e:	8b e2       	ldi	r24, 0x2B	; 43
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	e9 d1       	rcall	.+978    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(44, 0x21);
    1d34:	61 e2       	ldi	r22, 0x21	; 33
    1d36:	8c e2       	ldi	r24, 0x2C	; 44
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	e5 d1       	rcall	.+970    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(45, 0x20);
    1d3c:	60 e2       	ldi	r22, 0x20	; 32
    1d3e:	8d e2       	ldi	r24, 0x2D	; 45
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	e1 d1       	rcall	.+962    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(46, 0x1f);
    1d44:	6f e1       	ldi	r22, 0x1F	; 31
    1d46:	8e e2       	ldi	r24, 0x2E	; 46
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	dd d1       	rcall	.+954    	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(47, 0x07);
    1d4c:	67 e0       	ldi	r22, 0x07	; 7
    1d4e:	8f e2       	ldi	r24, 0x2F	; 47
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	d9 d1       	rcall	.+946    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(48, 0x1d);
    1d54:	6d e1       	ldi	r22, 0x1D	; 29
    1d56:	80 e3       	ldi	r24, 0x30	; 48
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	d5 d1       	rcall	.+938    	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(49, 0x0a);
    1d5c:	6a e0       	ldi	r22, 0x0A	; 10
    1d5e:	81 e3       	ldi	r24, 0x31	; 49
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	d1 d1       	rcall	.+930    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(50, 0x27);
    1d64:	67 e2       	ldi	r22, 0x27	; 39
    1d66:	82 e3       	ldi	r24, 0x32	; 50
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	cd d1       	rcall	.+922    	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(51, 0x01);
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	83 e3       	ldi	r24, 0x33	; 51
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	c9 d1       	rcall	.+914    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(52, 0x08);
    1d74:	68 e0       	ldi	r22, 0x08	; 8
    1d76:	84 e3       	ldi	r24, 0x34	; 52
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	c5 d1       	rcall	.+906    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(53, 0x96);
    1d7c:	66 e9       	ldi	r22, 0x96	; 150
    1d7e:	85 e3       	ldi	r24, 0x35	; 53
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	c1 d1       	rcall	.+898    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(54, 0x03);
    1d84:	63 e0       	ldi	r22, 0x03	; 3
    1d86:	86 e3       	ldi	r24, 0x36	; 54
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	bd d1       	rcall	.+890    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(55, 0x03);
    1d8c:	63 e0       	ldi	r22, 0x03	; 3
    1d8e:	87 e3       	ldi	r24, 0x37	; 55
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	b9 d1       	rcall	.+882    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(56, 0x00);
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	88 e3       	ldi	r24, 0x38	; 56
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	b5 d1       	rcall	.+874    	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(57, 0xA0);
    1d9c:	60 ea       	ldi	r22, 0xA0	; 160
    1d9e:	89 e3       	ldi	r24, 0x39	; 57
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	b1 d1       	rcall	.+866    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(58, 0x96);
    1da4:	66 e9       	ldi	r22, 0x96	; 150
    1da6:	8a e3       	ldi	r24, 0x3A	; 58
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	ad d1       	rcall	.+858    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(59, 0x96);
    1dac:	66 e9       	ldi	r22, 0x96	; 150
    1dae:	8b e3       	ldi	r24, 0x3B	; 59
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a9 d1       	rcall	.+850    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(60, 0x46);
    1db4:	66 e4       	ldi	r22, 0x46	; 70
    1db6:	8c e3       	ldi	r24, 0x3C	; 60
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a5 d1       	rcall	.+842    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(61, 0xc8);
    1dbc:	68 ec       	ldi	r22, 0xC8	; 200
    1dbe:	8d e3       	ldi	r24, 0x3D	; 61
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a1 d1       	rcall	.+834    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(62, 0x00);
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	8e e3       	ldi	r24, 0x3E	; 62
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9d d1       	rcall	.+826    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(63, 0xf4);
    1dcc:	64 ef       	ldi	r22, 0xF4	; 244
    1dce:	8f e3       	ldi	r24, 0x3F	; 63
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	99 d1       	rcall	.+818    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(64, 0x01);
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	80 e4       	ldi	r24, 0x40	; 64
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	95 d1       	rcall	.+810    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(65, 0x78);
    1ddc:	68 e7       	ldi	r22, 0x78	; 120
    1dde:	81 e4       	ldi	r24, 0x41	; 65
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	91 d1       	rcall	.+802    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(66, 0x03);
    1de4:	63 e0       	ldi	r22, 0x03	; 3
    1de6:	82 e4       	ldi	r24, 0x42	; 66
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	8d d1       	rcall	.+794    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(67, 0x5e);
    1dec:	6e e5       	ldi	r22, 0x5E	; 94
    1dee:	83 e4       	ldi	r24, 0x43	; 67
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	89 d1       	rcall	.+786    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(68, 0x01);
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	84 e4       	ldi	r24, 0x44	; 68
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	85 d1       	rcall	.+778    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(69, 0x80);
    1dfc:	60 e8       	ldi	r22, 0x80	; 128
    1dfe:	85 e4       	ldi	r24, 0x45	; 69
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	81 d1       	rcall	.+770    	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(70, 0x40);
    1e04:	60 e4       	ldi	r22, 0x40	; 64
    1e06:	86 e4       	ldi	r24, 0x46	; 70
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	7d d1       	rcall	.+762    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(71, 0x1f);
    1e0c:	6f e1       	ldi	r22, 0x1F	; 31
    1e0e:	87 e4       	ldi	r24, 0x47	; 71
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	79 d1       	rcall	.+754    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(72, 0x00);
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	88 e4       	ldi	r24, 0x48	; 72
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	75 d1       	rcall	.+746    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(73, 0x00);
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	89 e4       	ldi	r24, 0x49	; 73
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	71 d1       	rcall	.+738    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(74, 0x81);
    1e24:	61 e8       	ldi	r22, 0x81	; 129
    1e26:	8a e4       	ldi	r24, 0x4A	; 74
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	6d d1       	rcall	.+730    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(75, 0x81);
    1e2c:	61 e8       	ldi	r22, 0x81	; 129
    1e2e:	8b e4       	ldi	r24, 0x4B	; 75
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	69 d1       	rcall	.+722    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(76, 0x01);
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	8c e4       	ldi	r24, 0x4C	; 76
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	65 d1       	rcall	.+714    	; 0x2106 <nvm_eeprom_write_byte>
	
	nvm_eeprom_write_byte(51, 0x01);
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	83 e3       	ldi	r24, 0x33	; 51
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	61 d1       	rcall	.+706    	; 0x2106 <nvm_eeprom_write_byte>
	
	
		/* Charging and watchdog timer - Using two compare channels with single timer */
	#ifdef ENABLE_WDT
		wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    1e44:	88 e0       	ldi	r24, 0x08	; 8
    1e46:	0e 94 ae 01 	call	0x35c	; 0x35c <wdt_set_timeout_period>
		wdt_reset();
    1e4a:	a8 95       	wdr
		wdt_enable();
    1e4c:	0e 94 c2 01 	call	0x384	; 0x384 <wdt_enable>
		init_timerd5();
    1e50:	74 d9       	rcall	.-3352   	; 0x113a <init_timerd5>
	#endif
	
	tc45_disable(&TCC4);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	98 e0       	ldi	r25, 0x08	; 8
    1e56:	ec d3       	rcall	.+2008   	; 0x2630 <tc45_disable>
	tc45_enable(&TCC5);
    1e58:	80 e4       	ldi	r24, 0x40	; 64
    1e5a:	98 e0       	ldi	r25, 0x08	; 8
    1e5c:	b7 d3       	rcall	.+1902   	; 0x25cc <tc45_enable>
	
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    1e5e:	86 e1       	ldi	r24, 0x16	; 22
    1e60:	93 dd       	rcall	.-1242   	; 0x1988 <init_ws2812>
	clear_led();
    1e62:	73 dc       	rcall	.-1818   	; 0x174a <clear_led>
	
	// init the mtch 6301
	init_mtchio();
    1e64:	0e 94 16 02 	call	0x42c	; 0x42c <init_mtchio>
	init_i2c();
    1e68:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <init_i2c>
	init_mtch6301();
    1e6c:	0e 94 00 02 	call	0x400	; 0x400 <init_mtch6301>
	
	write_mtch_settings();
    1e70:	0e 94 b7 02 	call	0x56e	; 0x56e <write_mtch_settings>
	// restore the state stored in the eeprom
	// restore_state_eep();
	
	
	
	volatile uint8_t eep0 = EEPROM_GENERAL_UPDATE_BOOL	;
    1e74:	8d e4       	ldi	r24, 0x4D	; 77
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	21 d1       	rcall	.+578    	; 0x20bc <nvm_eeprom_read_byte>
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t eep1 = EEPROM_GENERAL_UPDATE_BOOL	;
    1e7c:	8d e4       	ldi	r24, 0x4D	; 77
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	1d d1       	rcall	.+570    	; 0x20bc <nvm_eeprom_read_byte>
    1e82:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t eep2 = EEPROM_RXMAP_UPDATE_BOOL	;
    1e84:	8e e4       	ldi	r24, 0x4E	; 78
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	19 d1       	rcall	.+562    	; 0x20bc <nvm_eeprom_read_byte>
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t eep3 = EEPROM_TXMAP_UPDATE_BOOL	;
    1e8c:	8f e4       	ldi	r24, 0x4F	; 79
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	15 d1       	rcall	.+554    	; 0x20bc <nvm_eeprom_read_byte>
    1e92:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t eep4 = EEPROM_SELF_UPDATE_BOOL		;
    1e94:	80 e5       	ldi	r24, 0x50	; 80
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	11 d1       	rcall	.+546    	; 0x20bc <nvm_eeprom_read_byte>
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8_t eep5 = EEPROM_MUTUAL_UPDATE_BOOL	;
    1e9c:	81 e5       	ldi	r24, 0x51	; 81
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0d d1       	rcall	.+538    	; 0x20bc <nvm_eeprom_read_byte>
    1ea2:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t eep6 = EEPROM_DECODING_UPDATE_BOOL	;
    1ea4:	82 e5       	ldi	r24, 0x52	; 82
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	09 d1       	rcall	.+530    	; 0x20bc <nvm_eeprom_read_byte>
    1eaa:	8f 83       	std	Y+7, r24	; 0x07
	volatile uint8_t eep7 = EEPROM_GESTURES_UPDATE_BOOL	;
    1eac:	83 e5       	ldi	r24, 0x53	; 83
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	05 d1       	rcall	.+522    	; 0x20bc <nvm_eeprom_read_byte>
    1eb2:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t eep8 = EEPROM_CONFIG_UPDATE_BOOL	;
    1eb4:	84 e5       	ldi	r24, 0x54	; 84
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	01 d1       	rcall	.+514    	; 0x20bc <nvm_eeprom_read_byte>
    1eba:	89 87       	std	Y+9, r24	; 0x09
	volatile uint8_t eep9 = EEPROM_MTCH_UPDATE_BOOL		;
    1ebc:	85 e5       	ldi	r24, 0x55	; 85
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	fd d0       	rcall	.+506    	; 0x20bc <nvm_eeprom_read_byte>
    1ec2:	8a 87       	std	Y+10, r24	; 0x0a
	
	
	nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, 1);
    1ec4:	61 e0       	ldi	r22, 0x01	; 1
    1ec6:	8d e4       	ldi	r24, 0x4D	; 77
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	1d d1       	rcall	.+570    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, 1);
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	8e e4       	ldi	r24, 0x4E	; 78
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	19 d1       	rcall	.+562    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, 1);
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	8f e4       	ldi	r24, 0x4F	; 79
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	15 d1       	rcall	.+554    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_SELF, 1);
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	80 e5       	ldi	r24, 0x50	; 80
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	11 d1       	rcall	.+546    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, 1);
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	81 e5       	ldi	r24, 0x51	; 81
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0d d1       	rcall	.+538    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, 0);
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	82 e5       	ldi	r24, 0x52	; 82
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	09 d1       	rcall	.+530    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 0);
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	83 e5       	ldi	r24, 0x53	; 83
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	05 d1       	rcall	.+522    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	84 e5       	ldi	r24, 0x54	; 84
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	01 d1       	rcall	.+514    	; 0x2106 <nvm_eeprom_write_byte>
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	85 e5       	ldi	r24, 0x55	; 85
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	fd d0       	rcall	.+506    	; 0x2106 <nvm_eeprom_write_byte>
	
	
	restore_led_from_eeprom();
    1f0c:	09 dd       	rcall	.-1518   	; 0x1920 <restore_led_from_eeprom>

	*/
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		if (eep9) {
    1f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f10:	88 23       	and	r24, r24
    1f12:	d9 f0       	breq	.+54     	; 0x1f4a <main+0x336>
			twinkle(255, 0, 0);
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	e8 db       	rcall	.-2096   	; 0x16ec <twinkle>
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	88 e0       	ldi	r24, 0x08	; 8
    1f20:	9d e3       	ldi	r25, 0x3D	; 61
    1f22:	21 50       	subi	r18, 0x01	; 1
    1f24:	80 40       	sbci	r24, 0x00	; 0
    1f26:	90 40       	sbci	r25, 0x00	; 0
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <main+0x30e>
    1f2a:	00 c0       	rjmp	.+0      	; 0x1f2c <main+0x318>
    1f2c:	00 00       	nop
			_delay_ms(20000);
			twinkle(0, 0, 0);
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	db db       	rcall	.-2122   	; 0x16ec <twinkle>
    1f36:	2f ef       	ldi	r18, 0xFF	; 255
    1f38:	88 e0       	ldi	r24, 0x08	; 8
    1f3a:	9d e3       	ldi	r25, 0x3D	; 61
    1f3c:	21 50       	subi	r18, 0x01	; 1
    1f3e:	80 40       	sbci	r24, 0x00	; 0
    1f40:	90 40       	sbci	r25, 0x00	; 0
    1f42:	e1 f7       	brne	.-8      	; 0x1f3c <main+0x328>
    1f44:	00 c0       	rjmp	.+0      	; 0x1f46 <main+0x332>
    1f46:	00 00       	nop
    1f48:	17 c0       	rjmp	.+46     	; 0x1f78 <main+0x364>
			_delay_ms(20000);
		}
		else {
			rainbow();
    1f4a:	e6 db       	rcall	.-2100   	; 0x1718 <rainbow>
    1f4c:	2f ef       	ldi	r18, 0xFF	; 255
    1f4e:	88 e0       	ldi	r24, 0x08	; 8
    1f50:	9d e3       	ldi	r25, 0x3D	; 61
    1f52:	21 50       	subi	r18, 0x01	; 1
    1f54:	80 40       	sbci	r24, 0x00	; 0
    1f56:	90 40       	sbci	r25, 0x00	; 0
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <main+0x33e>
    1f5a:	00 c0       	rjmp	.+0      	; 0x1f5c <main+0x348>
    1f5c:	00 00       	nop
			_delay_ms(20000);
			twinkle(0, 255, 0);
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	6f ef       	ldi	r22, 0xFF	; 255
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	c3 db       	rcall	.-2170   	; 0x16ec <twinkle>
    1f66:	2f ef       	ldi	r18, 0xFF	; 255
    1f68:	88 e0       	ldi	r24, 0x08	; 8
    1f6a:	9d e3       	ldi	r25, 0x3D	; 61
    1f6c:	21 50       	subi	r18, 0x01	; 1
    1f6e:	80 40       	sbci	r24, 0x00	; 0
    1f70:	90 40       	sbci	r25, 0x00	; 0
    1f72:	e1 f7       	brne	.-8      	; 0x1f6c <main+0x358>
    1f74:	00 c0       	rjmp	.+0      	; 0x1f76 <main+0x362>
    1f76:	00 00       	nop
				}
			}
		}
*/
	#ifdef ENABLE_WDT
		if (flag_timerd5) {
    1f78:	80 91 73 20 	lds	r24, 0x2073
    1f7c:	88 23       	and	r24, r24
    1f7e:	39 f2       	breq	.-114    	; 0x1f0e <main+0x2fa>
			flag_timerd5 = false;
    1f80:	10 92 73 20 	sts	0x2073, r1
			wdt_reset(); 
    1f84:	a8 95       	wdr
    1f86:	c3 cf       	rjmp	.-122    	; 0x1f0e <main+0x2fa>

00001f88 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	80 93 70 00 	sts	0x0070, r24
    1f8e:	80 93 71 00 	sts	0x0071, r24
    1f92:	80 93 72 00 	sts	0x0072, r24
    1f96:	80 93 73 00 	sts	0x0073, r24
    1f9a:	80 93 74 00 	sts	0x0074, r24
    1f9e:	80 93 75 00 	sts	0x0075, r24
    1fa2:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1fa6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1fa8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1faa:	e0 e5       	ldi	r30, 0x50	; 80
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	82 60       	ori	r24, 0x02	; 2
    1fb2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fb4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1fb6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1fb8:	81 ff       	sbrs	r24, 1
    1fba:	fd cf       	rjmp	.-6      	; 0x1fb6 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	80 e4       	ldi	r24, 0x40	; 64
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	76 d0       	rcall	.+236    	; 0x20b0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1fc4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1fc6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1fc8:	e0 e5       	ldi	r30, 0x50	; 80
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8e 7f       	andi	r24, 0xFE	; 254
    1fd0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fd2:	9f bf       	out	0x3f, r25	; 63
    1fd4:	08 95       	ret

00001fd6 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1fd6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1fd8:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1fda:	e8 2f       	mov	r30, r24
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	e0 59       	subi	r30, 0x90	; 144
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	60 95       	com	r22
    1fe4:	80 81       	ld	r24, Z
    1fe6:	68 23       	and	r22, r24
    1fe8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fea:	9f bf       	out	0x3f, r25	; 63
    1fec:	08 95       	ret

00001fee <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1fee:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1ff0:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1ff2:	e8 2f       	mov	r30, r24
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	e0 59       	subi	r30, 0x90	; 144
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	68 2b       	or	r22, r24
    1ffe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2000:	9f bf       	out	0x3f, r25	; 63
    2002:	08 95       	ret

00002004 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	fc 01       	movw	r30, r24
    200a:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2010:	c6 2f       	mov	r28, r22
    2012:	d0 e0       	ldi	r29, 0x00	; 0
    2014:	de 01       	movw	r26, r28
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <ioport_configure_port_pin+0x1a>
    201a:	b5 95       	asr	r27
    201c:	a7 95       	ror	r26
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <ioport_configure_port_pin+0x16>
    2022:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2024:	50 83       	st	Z, r21
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    202c:	28 30       	cpi	r18, 0x08	; 8
    202e:	31 05       	cpc	r19, r1
    2030:	89 f7       	brne	.-30     	; 0x2014 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2032:	40 ff       	sbrs	r20, 0
    2034:	0a c0       	rjmp	.+20     	; 0x204a <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2036:	41 ff       	sbrs	r20, 1
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    203a:	fc 01       	movw	r30, r24
    203c:	65 83       	std	Z+5, r22	; 0x05
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2040:	fc 01       	movw	r30, r24
    2042:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2044:	fc 01       	movw	r30, r24
    2046:	61 83       	std	Z+1, r22	; 0x01
    2048:	02 c0       	rjmp	.+4      	; 0x204e <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    204a:	fc 01       	movw	r30, r24
    204c:	62 83       	std	Z+2, r22	; 0x02
	}
}
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	11 24       	eor	r1, r1
    205e:	2f 93       	push	r18
    2060:	3f 93       	push	r19
    2062:	4f 93       	push	r20
    2064:	5f 93       	push	r21
    2066:	6f 93       	push	r22
    2068:	7f 93       	push	r23
    206a:	8f 93       	push	r24
    206c:	9f 93       	push	r25
    206e:	af 93       	push	r26
    2070:	bf 93       	push	r27
    2072:	ef 93       	push	r30
    2074:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2076:	40 91 24 02 	lds	r20, 0x0224
    207a:	50 91 25 02 	lds	r21, 0x0225
    207e:	e0 91 a4 20 	lds	r30, 0x20A4
    2082:	f0 91 a5 20 	lds	r31, 0x20A5
    2086:	61 e0       	ldi	r22, 0x01	; 1
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	09 95       	icall
}
    208e:	ff 91       	pop	r31
    2090:	ef 91       	pop	r30
    2092:	bf 91       	pop	r27
    2094:	af 91       	pop	r26
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	7f 91       	pop	r23
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    20b0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    20b2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    20b4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    20b6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    20b8:	60 83       	st	Z, r22
	ret                             // Return to caller
    20ba:	08 95       	ret

000020bc <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    20bc:	9c 01       	movw	r18, r24
    20be:	e0 ec       	ldi	r30, 0xC0	; 192
    20c0:	f1 e0       	ldi	r31, 0x01	; 1
    20c2:	97 85       	ldd	r25, Z+15	; 0x0f
    20c4:	99 23       	and	r25, r25
    20c6:	ec f3       	brlt	.-6      	; 0x20c2 <nvm_eeprom_read_byte+0x6>
    20c8:	f9 01       	movw	r30, r18
    20ca:	f0 5f       	subi	r31, 0xF0	; 240
    20cc:	80 81       	ld	r24, Z
    20ce:	08 95       	ret

000020d0 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    20d0:	e0 ec       	ldi	r30, 0xC0	; 192
    20d2:	f1 e0       	ldi	r31, 0x01	; 1
    20d4:	87 85       	ldd	r24, Z+15	; 0x0f
    20d6:	88 23       	and	r24, r24
    20d8:	ec f3       	brlt	.-6      	; 0x20d4 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    20da:	80 91 cf 01 	lds	r24, 0x01CF
    20de:	81 ff       	sbrs	r24, 1
    20e0:	07 c0       	rjmp	.+14     	; 0x20f0 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    20e2:	86 e3       	ldi	r24, 0x36	; 54
    20e4:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	8b ec       	ldi	r24, 0xCB	; 203
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	e0 cf       	rjmp	.-64     	; 0x20b0 <ccp_write_io>
    20f0:	08 95       	ret

000020f2 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    20f2:	e0 ec       	ldi	r30, 0xC0	; 192
    20f4:	f1 e0       	ldi	r31, 0x01	; 1
    20f6:	97 85       	ldd	r25, Z+15	; 0x0f
    20f8:	99 23       	and	r25, r25
    20fa:	ec f3       	brlt	.-6      	; 0x20f6 <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    20fc:	e8 2f       	mov	r30, r24
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	f0 5f       	subi	r31, 0xF0	; 240
    2102:	60 83       	st	Z, r22
    2104:	08 95       	ret

00002106 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	18 2f       	mov	r17, r24
    2112:	f9 2e       	mov	r15, r25
    2114:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    2116:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    211a:	da df       	rcall	.-76     	; 0x20d0 <nvm_eeprom_flush_buffer>
    211c:	e0 ec       	ldi	r30, 0xC0	; 192
    211e:	f1 e0       	ldi	r31, 0x01	; 1
    2120:	27 85       	ldd	r18, Z+15	; 0x0f
    2122:	22 23       	and	r18, r18
    2124:	ec f3       	brlt	.-6      	; 0x2120 <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2126:	6c 2f       	mov	r22, r28
    2128:	81 2f       	mov	r24, r17
    212a:	e3 df       	rcall	.-58     	; 0x20f2 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    212c:	c0 ec       	ldi	r28, 0xC0	; 192
    212e:	d1 e0       	ldi	r29, 0x01	; 1
    2130:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2132:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2134:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2136:	85 e3       	ldi	r24, 0x35	; 53
    2138:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	8b ec       	ldi	r24, 0xCB	; 203
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	b7 df       	rcall	.-146    	; 0x20b0 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    2142:	0a 87       	std	Y+10, r16	; 0x0a
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	08 95       	ret

00002150 <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    2172:	e0 91 5c 20 	lds	r30, 0x205C
    2176:	f0 91 5d 20 	lds	r31, 0x205D
    217a:	30 97       	sbiw	r30, 0x00	; 0
    217c:	09 f0       	breq	.+2      	; 0x2180 <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    217e:	09 95       	icall
	}
}
    2180:	ff 91       	pop	r31
    2182:	ef 91       	pop	r30
    2184:	bf 91       	pop	r27
    2186:	af 91       	pop	r26
    2188:	9f 91       	pop	r25
    218a:	8f 91       	pop	r24
    218c:	7f 91       	pop	r23
    218e:	6f 91       	pop	r22
    2190:	5f 91       	pop	r21
    2192:	4f 91       	pop	r20
    2194:	3f 91       	pop	r19
    2196:	2f 91       	pop	r18
    2198:	0f 90       	pop	r0
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	0f 90       	pop	r0
    219e:	1f 90       	pop	r1
    21a0:	18 95       	reti

000021a2 <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    21c4:	e0 91 5a 20 	lds	r30, 0x205A
    21c8:	f0 91 5b 20 	lds	r31, 0x205B
    21cc:	30 97       	sbiw	r30, 0x00	; 0
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <__vector_13+0x30>
		tc45_tcc4_err_callback();
    21d0:	09 95       	icall
	}
}
    21d2:	ff 91       	pop	r31
    21d4:	ef 91       	pop	r30
    21d6:	bf 91       	pop	r27
    21d8:	af 91       	pop	r26
    21da:	9f 91       	pop	r25
    21dc:	8f 91       	pop	r24
    21de:	7f 91       	pop	r23
    21e0:	6f 91       	pop	r22
    21e2:	5f 91       	pop	r21
    21e4:	4f 91       	pop	r20
    21e6:	3f 91       	pop	r19
    21e8:	2f 91       	pop	r18
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    21f4:	1f 92       	push	r1
    21f6:	0f 92       	push	r0
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	0f 92       	push	r0
    21fc:	11 24       	eor	r1, r1
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	4f 93       	push	r20
    2204:	5f 93       	push	r21
    2206:	6f 93       	push	r22
    2208:	7f 93       	push	r23
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	af 93       	push	r26
    2210:	bf 93       	push	r27
    2212:	ef 93       	push	r30
    2214:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    2216:	e0 91 58 20 	lds	r30, 0x2058
    221a:	f0 91 59 20 	lds	r31, 0x2059
    221e:	30 97       	sbiw	r30, 0x00	; 0
    2220:	09 f0       	breq	.+2      	; 0x2224 <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    2222:	09 95       	icall
	}
}
    2224:	ff 91       	pop	r31
    2226:	ef 91       	pop	r30
    2228:	bf 91       	pop	r27
    222a:	af 91       	pop	r26
    222c:	9f 91       	pop	r25
    222e:	8f 91       	pop	r24
    2230:	7f 91       	pop	r23
    2232:	6f 91       	pop	r22
    2234:	5f 91       	pop	r21
    2236:	4f 91       	pop	r20
    2238:	3f 91       	pop	r19
    223a:	2f 91       	pop	r18
    223c:	0f 90       	pop	r0
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	0f 90       	pop	r0
    2242:	1f 90       	pop	r1
    2244:	18 95       	reti

00002246 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	0f 92       	push	r0
    224e:	11 24       	eor	r1, r1
    2250:	2f 93       	push	r18
    2252:	3f 93       	push	r19
    2254:	4f 93       	push	r20
    2256:	5f 93       	push	r21
    2258:	6f 93       	push	r22
    225a:	7f 93       	push	r23
    225c:	8f 93       	push	r24
    225e:	9f 93       	push	r25
    2260:	af 93       	push	r26
    2262:	bf 93       	push	r27
    2264:	ef 93       	push	r30
    2266:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    2268:	e0 91 56 20 	lds	r30, 0x2056
    226c:	f0 91 57 20 	lds	r31, 0x2057
    2270:	30 97       	sbiw	r30, 0x00	; 0
    2272:	09 f0       	breq	.+2      	; 0x2276 <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    2274:	09 95       	icall
	}
}
    2276:	ff 91       	pop	r31
    2278:	ef 91       	pop	r30
    227a:	bf 91       	pop	r27
    227c:	af 91       	pop	r26
    227e:	9f 91       	pop	r25
    2280:	8f 91       	pop	r24
    2282:	7f 91       	pop	r23
    2284:	6f 91       	pop	r22
    2286:	5f 91       	pop	r21
    2288:	4f 91       	pop	r20
    228a:	3f 91       	pop	r19
    228c:	2f 91       	pop	r18
    228e:	0f 90       	pop	r0
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	0f 90       	pop	r0
    2294:	1f 90       	pop	r1
    2296:	18 95       	reti

00002298 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    2298:	1f 92       	push	r1
    229a:	0f 92       	push	r0
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	0f 92       	push	r0
    22a0:	11 24       	eor	r1, r1
    22a2:	2f 93       	push	r18
    22a4:	3f 93       	push	r19
    22a6:	4f 93       	push	r20
    22a8:	5f 93       	push	r21
    22aa:	6f 93       	push	r22
    22ac:	7f 93       	push	r23
    22ae:	8f 93       	push	r24
    22b0:	9f 93       	push	r25
    22b2:	af 93       	push	r26
    22b4:	bf 93       	push	r27
    22b6:	ef 93       	push	r30
    22b8:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    22ba:	e0 91 54 20 	lds	r30, 0x2054
    22be:	f0 91 55 20 	lds	r31, 0x2055
    22c2:	30 97       	sbiw	r30, 0x00	; 0
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    22c6:	09 95       	icall
	}
}
    22c8:	ff 91       	pop	r31
    22ca:	ef 91       	pop	r30
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    22ea:	1f 92       	push	r1
    22ec:	0f 92       	push	r0
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	0f 92       	push	r0
    22f2:	11 24       	eor	r1, r1
    22f4:	2f 93       	push	r18
    22f6:	3f 93       	push	r19
    22f8:	4f 93       	push	r20
    22fa:	5f 93       	push	r21
    22fc:	6f 93       	push	r22
    22fe:	7f 93       	push	r23
    2300:	8f 93       	push	r24
    2302:	9f 93       	push	r25
    2304:	af 93       	push	r26
    2306:	bf 93       	push	r27
    2308:	ef 93       	push	r30
    230a:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    230c:	e0 91 52 20 	lds	r30, 0x2052
    2310:	f0 91 53 20 	lds	r31, 0x2053
    2314:	30 97       	sbiw	r30, 0x00	; 0
    2316:	09 f0       	breq	.+2      	; 0x231a <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    2318:	09 95       	icall
	}
}
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	0f 90       	pop	r0
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	0f 90       	pop	r0
    2338:	1f 90       	pop	r1
    233a:	18 95       	reti

0000233c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    233c:	1f 92       	push	r1
    233e:	0f 92       	push	r0
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	0f 92       	push	r0
    2344:	11 24       	eor	r1, r1
    2346:	2f 93       	push	r18
    2348:	3f 93       	push	r19
    234a:	4f 93       	push	r20
    234c:	5f 93       	push	r21
    234e:	6f 93       	push	r22
    2350:	7f 93       	push	r23
    2352:	8f 93       	push	r24
    2354:	9f 93       	push	r25
    2356:	af 93       	push	r26
    2358:	bf 93       	push	r27
    235a:	ef 93       	push	r30
    235c:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    235e:	e0 91 50 20 	lds	r30, 0x2050
    2362:	f0 91 51 20 	lds	r31, 0x2051
    2366:	30 97       	sbiw	r30, 0x00	; 0
    2368:	09 f0       	breq	.+2      	; 0x236c <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    236a:	09 95       	icall
	}
}
    236c:	ff 91       	pop	r31
    236e:	ef 91       	pop	r30
    2370:	bf 91       	pop	r27
    2372:	af 91       	pop	r26
    2374:	9f 91       	pop	r25
    2376:	8f 91       	pop	r24
    2378:	7f 91       	pop	r23
    237a:	6f 91       	pop	r22
    237c:	5f 91       	pop	r21
    237e:	4f 91       	pop	r20
    2380:	3f 91       	pop	r19
    2382:	2f 91       	pop	r18
    2384:	0f 90       	pop	r0
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	0f 90       	pop	r0
    238a:	1f 90       	pop	r1
    238c:	18 95       	reti

0000238e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    238e:	1f 92       	push	r1
    2390:	0f 92       	push	r0
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	0f 92       	push	r0
    2396:	11 24       	eor	r1, r1
    2398:	2f 93       	push	r18
    239a:	3f 93       	push	r19
    239c:	4f 93       	push	r20
    239e:	5f 93       	push	r21
    23a0:	6f 93       	push	r22
    23a2:	7f 93       	push	r23
    23a4:	8f 93       	push	r24
    23a6:	9f 93       	push	r25
    23a8:	af 93       	push	r26
    23aa:	bf 93       	push	r27
    23ac:	ef 93       	push	r30
    23ae:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    23b0:	e0 91 4e 20 	lds	r30, 0x204E
    23b4:	f0 91 4f 20 	lds	r31, 0x204F
    23b8:	30 97       	sbiw	r30, 0x00	; 0
    23ba:	09 f0       	breq	.+2      	; 0x23be <__vector_19+0x30>
		tc45_tcc5_err_callback();
    23bc:	09 95       	icall
	}
}
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	bf 91       	pop	r27
    23c4:	af 91       	pop	r26
    23c6:	9f 91       	pop	r25
    23c8:	8f 91       	pop	r24
    23ca:	7f 91       	pop	r23
    23cc:	6f 91       	pop	r22
    23ce:	5f 91       	pop	r21
    23d0:	4f 91       	pop	r20
    23d2:	3f 91       	pop	r19
    23d4:	2f 91       	pop	r18
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	0f 90       	pop	r0
    23dc:	1f 90       	pop	r1
    23de:	18 95       	reti

000023e0 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    23e0:	1f 92       	push	r1
    23e2:	0f 92       	push	r0
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	0f 92       	push	r0
    23e8:	11 24       	eor	r1, r1
    23ea:	2f 93       	push	r18
    23ec:	3f 93       	push	r19
    23ee:	4f 93       	push	r20
    23f0:	5f 93       	push	r21
    23f2:	6f 93       	push	r22
    23f4:	7f 93       	push	r23
    23f6:	8f 93       	push	r24
    23f8:	9f 93       	push	r25
    23fa:	af 93       	push	r26
    23fc:	bf 93       	push	r27
    23fe:	ef 93       	push	r30
    2400:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    2402:	e0 91 4c 20 	lds	r30, 0x204C
    2406:	f0 91 4d 20 	lds	r31, 0x204D
    240a:	30 97       	sbiw	r30, 0x00	; 0
    240c:	09 f0       	breq	.+2      	; 0x2410 <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    240e:	09 95       	icall
	}
}
    2410:	ff 91       	pop	r31
    2412:	ef 91       	pop	r30
    2414:	bf 91       	pop	r27
    2416:	af 91       	pop	r26
    2418:	9f 91       	pop	r25
    241a:	8f 91       	pop	r24
    241c:	7f 91       	pop	r23
    241e:	6f 91       	pop	r22
    2420:	5f 91       	pop	r21
    2422:	4f 91       	pop	r20
    2424:	3f 91       	pop	r19
    2426:	2f 91       	pop	r18
    2428:	0f 90       	pop	r0
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	0f 90       	pop	r0
    242e:	1f 90       	pop	r1
    2430:	18 95       	reti

00002432 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    2432:	1f 92       	push	r1
    2434:	0f 92       	push	r0
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	0f 92       	push	r0
    243a:	11 24       	eor	r1, r1
    243c:	2f 93       	push	r18
    243e:	3f 93       	push	r19
    2440:	4f 93       	push	r20
    2442:	5f 93       	push	r21
    2444:	6f 93       	push	r22
    2446:	7f 93       	push	r23
    2448:	8f 93       	push	r24
    244a:	9f 93       	push	r25
    244c:	af 93       	push	r26
    244e:	bf 93       	push	r27
    2450:	ef 93       	push	r30
    2452:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    2454:	e0 91 4a 20 	lds	r30, 0x204A
    2458:	f0 91 4b 20 	lds	r31, 0x204B
    245c:	30 97       	sbiw	r30, 0x00	; 0
    245e:	09 f0       	breq	.+2      	; 0x2462 <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    2460:	09 95       	icall
	}
}
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    2484:	1f 92       	push	r1
    2486:	0f 92       	push	r0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	0f 92       	push	r0
    248c:	11 24       	eor	r1, r1
    248e:	2f 93       	push	r18
    2490:	3f 93       	push	r19
    2492:	4f 93       	push	r20
    2494:	5f 93       	push	r21
    2496:	6f 93       	push	r22
    2498:	7f 93       	push	r23
    249a:	8f 93       	push	r24
    249c:	9f 93       	push	r25
    249e:	af 93       	push	r26
    24a0:	bf 93       	push	r27
    24a2:	ef 93       	push	r30
    24a4:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    24a6:	e0 91 48 20 	lds	r30, 0x2048
    24aa:	f0 91 49 20 	lds	r31, 0x2049
    24ae:	30 97       	sbiw	r30, 0x00	; 0
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    24b2:	09 95       	icall
	}
}
    24b4:	ff 91       	pop	r31
    24b6:	ef 91       	pop	r30
    24b8:	bf 91       	pop	r27
    24ba:	af 91       	pop	r26
    24bc:	9f 91       	pop	r25
    24be:	8f 91       	pop	r24
    24c0:	7f 91       	pop	r23
    24c2:	6f 91       	pop	r22
    24c4:	5f 91       	pop	r21
    24c6:	4f 91       	pop	r20
    24c8:	3f 91       	pop	r19
    24ca:	2f 91       	pop	r18
    24cc:	0f 90       	pop	r0
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	0f 90       	pop	r0
    24d2:	1f 90       	pop	r1
    24d4:	18 95       	reti

000024d6 <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    24d6:	1f 92       	push	r1
    24d8:	0f 92       	push	r0
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	0f 92       	push	r0
    24de:	11 24       	eor	r1, r1
    24e0:	2f 93       	push	r18
    24e2:	3f 93       	push	r19
    24e4:	4f 93       	push	r20
    24e6:	5f 93       	push	r21
    24e8:	6f 93       	push	r22
    24ea:	7f 93       	push	r23
    24ec:	8f 93       	push	r24
    24ee:	9f 93       	push	r25
    24f0:	af 93       	push	r26
    24f2:	bf 93       	push	r27
    24f4:	ef 93       	push	r30
    24f6:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    24f8:	e0 91 46 20 	lds	r30, 0x2046
    24fc:	f0 91 47 20 	lds	r31, 0x2047
    2500:	30 97       	sbiw	r30, 0x00	; 0
    2502:	09 f0       	breq	.+2      	; 0x2506 <__vector_37+0x30>
		tc45_tcd5_err_callback();
    2504:	09 95       	icall
	}
}
    2506:	ff 91       	pop	r31
    2508:	ef 91       	pop	r30
    250a:	bf 91       	pop	r27
    250c:	af 91       	pop	r26
    250e:	9f 91       	pop	r25
    2510:	8f 91       	pop	r24
    2512:	7f 91       	pop	r23
    2514:	6f 91       	pop	r22
    2516:	5f 91       	pop	r21
    2518:	4f 91       	pop	r20
    251a:	3f 91       	pop	r19
    251c:	2f 91       	pop	r18
    251e:	0f 90       	pop	r0
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	0f 90       	pop	r0
    2524:	1f 90       	pop	r1
    2526:	18 95       	reti

00002528 <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    2528:	1f 92       	push	r1
    252a:	0f 92       	push	r0
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	0f 92       	push	r0
    2530:	11 24       	eor	r1, r1
    2532:	2f 93       	push	r18
    2534:	3f 93       	push	r19
    2536:	4f 93       	push	r20
    2538:	5f 93       	push	r21
    253a:	6f 93       	push	r22
    253c:	7f 93       	push	r23
    253e:	8f 93       	push	r24
    2540:	9f 93       	push	r25
    2542:	af 93       	push	r26
    2544:	bf 93       	push	r27
    2546:	ef 93       	push	r30
    2548:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    254a:	e0 91 44 20 	lds	r30, 0x2044
    254e:	f0 91 45 20 	lds	r31, 0x2045
    2552:	30 97       	sbiw	r30, 0x00	; 0
    2554:	09 f0       	breq	.+2      	; 0x2558 <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    2556:	09 95       	icall
	}
}
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	0f 90       	pop	r0
    2576:	1f 90       	pop	r1
    2578:	18 95       	reti

0000257a <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	11 24       	eor	r1, r1
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    259c:	e0 91 42 20 	lds	r30, 0x2042
    25a0:	f0 91 43 20 	lds	r31, 0x2043
    25a4:	30 97       	sbiw	r30, 0x00	; 0
    25a6:	09 f0       	breq	.+2      	; 0x25aa <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    25a8:	09 95       	icall
	}
}
    25aa:	ff 91       	pop	r31
    25ac:	ef 91       	pop	r30
    25ae:	bf 91       	pop	r27
    25b0:	af 91       	pop	r26
    25b2:	9f 91       	pop	r25
    25b4:	8f 91       	pop	r24
    25b6:	7f 91       	pop	r23
    25b8:	6f 91       	pop	r22
    25ba:	5f 91       	pop	r21
    25bc:	4f 91       	pop	r20
    25be:	3f 91       	pop	r19
    25c0:	2f 91       	pop	r18
    25c2:	0f 90       	pop	r0
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	0f 90       	pop	r0
    25c8:	1f 90       	pop	r1
    25ca:	18 95       	reti

000025cc <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    25cc:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    25ce:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    25d0:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    25d2:	28 2f       	mov	r18, r24
    25d4:	39 2f       	mov	r19, r25
    25d6:	21 15       	cp	r18, r1
    25d8:	88 e0       	ldi	r24, 0x08	; 8
    25da:	38 07       	cpc	r19, r24
    25dc:	39 f4       	brne	.+14     	; 0x25ec <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	f9 dc       	rcall	.-1550   	; 0x1fd6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    25e4:	64 e0       	ldi	r22, 0x04	; 4
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	f6 dc       	rcall	.-1556   	; 0x1fd6 <sysclk_enable_module>
    25ea:	17 c0       	rjmp	.+46     	; 0x261a <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    25ec:	20 34       	cpi	r18, 0x40	; 64
    25ee:	88 e0       	ldi	r24, 0x08	; 8
    25f0:	38 07       	cpc	r19, r24
    25f2:	39 f4       	brne	.+14     	; 0x2602 <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    25f4:	62 e0       	ldi	r22, 0x02	; 2
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	ee dc       	rcall	.-1572   	; 0x1fd6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    25fa:	64 e0       	ldi	r22, 0x04	; 4
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	eb dc       	rcall	.-1578   	; 0x1fd6 <sysclk_enable_module>
    2600:	0c c0       	rjmp	.+24     	; 0x261a <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    2602:	20 34       	cpi	r18, 0x40	; 64
    2604:	39 40       	sbci	r19, 0x09	; 9
    2606:	39 f4       	brne	.+14     	; 0x2616 <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	84 e0       	ldi	r24, 0x04	; 4
    260c:	e4 dc       	rcall	.-1592   	; 0x1fd6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    260e:	64 e0       	ldi	r22, 0x04	; 4
    2610:	84 e0       	ldi	r24, 0x04	; 4
    2612:	e1 dc       	rcall	.-1598   	; 0x1fd6 <sysclk_enable_module>
    2614:	02 c0       	rjmp	.+4      	; 0x261a <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2616:	cf bf       	out	0x3f, r28	; 63
    2618:	09 c0       	rjmp	.+18     	; 0x262c <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    261a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    261c:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    261e:	ee e9       	ldi	r30, 0x9E	; 158
    2620:	f0 e2       	ldi	r31, 0x20	; 32
    2622:	81 81       	ldd	r24, Z+1	; 0x01
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2628:	9f bf       	out	0x3f, r25	; 63
    262a:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    2630:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2632:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2634:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2636:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    2638:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    263a:	ee e9       	ldi	r30, 0x9E	; 158
    263c:	f0 e2       	ldi	r31, 0x20	; 32
    263e:	21 81       	ldd	r18, Z+1	; 0x01
    2640:	21 50       	subi	r18, 0x01	; 1
    2642:	21 83       	std	Z+1, r18	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2644:	3f bf       	out	0x3f, r19	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    2646:	28 2f       	mov	r18, r24
    2648:	39 2f       	mov	r19, r25
    264a:	21 15       	cp	r18, r1
    264c:	88 e0       	ldi	r24, 0x08	; 8
    264e:	38 07       	cpc	r19, r24
    2650:	39 f4       	brne	.+14     	; 0x2660 <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	cb dc       	rcall	.-1642   	; 0x1fee <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2658:	64 e0       	ldi	r22, 0x04	; 4
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	c8 dc       	rcall	.-1648   	; 0x1fee <sysclk_disable_module>
    265e:	17 c0       	rjmp	.+46     	; 0x268e <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    2660:	20 34       	cpi	r18, 0x40	; 64
    2662:	88 e0       	ldi	r24, 0x08	; 8
    2664:	38 07       	cpc	r19, r24
    2666:	39 f4       	brne	.+14     	; 0x2676 <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	83 e0       	ldi	r24, 0x03	; 3
    266c:	c0 dc       	rcall	.-1664   	; 0x1fee <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    266e:	64 e0       	ldi	r22, 0x04	; 4
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	bd dc       	rcall	.-1670   	; 0x1fee <sysclk_disable_module>
    2674:	0c c0       	rjmp	.+24     	; 0x268e <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    2676:	20 34       	cpi	r18, 0x40	; 64
    2678:	39 40       	sbci	r19, 0x09	; 9
    267a:	39 f4       	brne	.+14     	; 0x268a <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	84 e0       	ldi	r24, 0x04	; 4
    2680:	b6 dc       	rcall	.-1684   	; 0x1fee <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2682:	64 e0       	ldi	r22, 0x04	; 4
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	b3 dc       	rcall	.-1690   	; 0x1fee <sysclk_disable_module>
    2688:	02 c0       	rjmp	.+4      	; 0x268e <tc45_disable+0x5e>
    268a:	cf bf       	out	0x3f, r28	; 63
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <tc45_disable+0x60>
    268e:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    2694:	81 15       	cp	r24, r1
    2696:	28 e0       	ldi	r18, 0x08	; 8
    2698:	92 07       	cpc	r25, r18
    269a:	29 f4       	brne	.+10     	; 0x26a6 <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    269c:	60 93 5c 20 	sts	0x205C, r22
    26a0:	70 93 5d 20 	sts	0x205D, r23
    26a4:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    26a6:	80 34       	cpi	r24, 0x40	; 64
    26a8:	28 e0       	ldi	r18, 0x08	; 8
    26aa:	92 07       	cpc	r25, r18
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    26ae:	60 93 50 20 	sts	0x2050, r22
    26b2:	70 93 51 20 	sts	0x2051, r23
    26b6:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    26b8:	80 34       	cpi	r24, 0x40	; 64
    26ba:	99 40       	sbci	r25, 0x09	; 9
    26bc:	21 f4       	brne	.+8      	; 0x26c6 <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    26be:	60 93 48 20 	sts	0x2048, r22
    26c2:	70 93 49 20 	sts	0x2049, r23
    26c6:	08 95       	ret

000026c8 <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    26c8:	1f 92       	push	r1
    26ca:	0f 92       	push	r0
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	0f 92       	push	r0
    26d0:	11 24       	eor	r1, r1
    26d2:	2f 93       	push	r18
    26d4:	3f 93       	push	r19
    26d6:	4f 93       	push	r20
    26d8:	5f 93       	push	r21
    26da:	6f 93       	push	r22
    26dc:	7f 93       	push	r23
    26de:	8f 93       	push	r24
    26e0:	9f 93       	push	r25
    26e2:	af 93       	push	r26
    26e4:	bf 93       	push	r27
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	ef 93       	push	r30
    26ec:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    26ee:	e0 91 5e 20 	lds	r30, 0x205E
    26f2:	f0 91 5f 20 	lds	r31, 0x205F
    26f6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    26f8:	83 ff       	sbrs	r24, 3
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    26fc:	88 60       	ori	r24, 0x08	; 8
    26fe:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    2704:	86 ef       	ldi	r24, 0xF6	; 246
    2706:	80 93 68 20 	sts	0x2068, r24
    270a:	95 c0       	rjmp	.+298    	; 0x2836 <__vector_11+0x16e>
    270c:	98 2f       	mov	r25, r24
    270e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    2710:	31 f0       	breq	.+12     	; 0x271e <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    2716:	8f ef       	ldi	r24, 0xFF	; 255
    2718:	80 93 68 20 	sts	0x2068, r24
    271c:	8c c0       	rjmp	.+280    	; 0x2836 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    271e:	86 ff       	sbrs	r24, 6
    2720:	43 c0       	rjmp	.+134    	; 0x27a8 <__vector_11+0xe0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    2722:	ce e5       	ldi	r28, 0x5E	; 94
    2724:	d0 e2       	ldi	r29, 0x20	; 32
    2726:	aa 81       	ldd	r26, Y+2	; 0x02
    2728:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	9d 81       	ldd	r25, Y+5	; 0x05
    272e:	14 96       	adiw	r26, 0x04	; 4
    2730:	2d 91       	ld	r18, X+
    2732:	3c 91       	ld	r19, X
    2734:	15 97       	sbiw	r26, 0x05	; 5
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	6c f4       	brge	.+26     	; 0x2756 <__vector_11+0x8e>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    273c:	9c 01       	movw	r18, r24
    273e:	2f 5f       	subi	r18, 0xFF	; 255
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	20 93 62 20 	sts	0x2062, r18
    2746:	30 93 63 20 	sts	0x2063, r19
    274a:	a8 0f       	add	r26, r24
    274c:	b9 1f       	adc	r27, r25
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	8c 91       	ld	r24, X
    2752:	87 83       	std	Z+7, r24	; 0x07
    2754:	70 c0       	rjmp	.+224    	; 0x2836 <__vector_11+0x16e>

	} else if (transfer.data_count < pkg->length) {
    2756:	80 91 64 20 	lds	r24, 0x2064
    275a:	90 91 65 20 	lds	r25, 0x2065
    275e:	18 96       	adiw	r26, 0x08	; 8
    2760:	2d 91       	ld	r18, X+
    2762:	3c 91       	ld	r19, X
    2764:	19 97       	sbiw	r26, 0x09	; 9
    2766:	82 17       	cp	r24, r18
    2768:	93 07       	cpc	r25, r19
    276a:	c8 f4       	brcc	.+50     	; 0x279e <__vector_11+0xd6>

		if (transfer.read) {
    276c:	20 91 66 20 	lds	r18, 0x2066
    2770:	22 23       	and	r18, r18
    2772:	21 f0       	breq	.+8      	; 0x277c <__vector_11+0xb4>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    2774:	86 81       	ldd	r24, Z+6	; 0x06
    2776:	81 60       	ori	r24, 0x01	; 1
    2778:	86 83       	std	Z+6, r24	; 0x06
    277a:	5d c0       	rjmp	.+186    	; 0x2836 <__vector_11+0x16e>

		} else {
			const uint8_t * const data = pkg->buffer;
    277c:	16 96       	adiw	r26, 0x06	; 6
    277e:	2d 91       	ld	r18, X+
    2780:	3c 91       	ld	r19, X
    2782:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    2784:	ac 01       	movw	r20, r24
    2786:	4f 5f       	subi	r20, 0xFF	; 255
    2788:	5f 4f       	sbci	r21, 0xFF	; 255
    278a:	40 93 64 20 	sts	0x2064, r20
    278e:	50 93 65 20 	sts	0x2065, r21
    2792:	d9 01       	movw	r26, r18
    2794:	a8 0f       	add	r26, r24
    2796:	b9 1f       	adc	r27, r25
    2798:	8c 91       	ld	r24, X
    279a:	87 83       	std	Z+7, r24	; 0x07
    279c:	4c c0       	rjmp	.+152    	; 0x2836 <__vector_11+0x16e>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    27a2:	10 92 68 20 	sts	0x2068, r1
    27a6:	47 c0       	rjmp	.+142    	; 0x2836 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    27a8:	88 23       	and	r24, r24
    27aa:	0c f0       	brlt	.+2      	; 0x27ae <__vector_11+0xe6>
    27ac:	41 c0       	rjmp	.+130    	; 0x2830 <__vector_11+0x168>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    27ae:	ce e5       	ldi	r28, 0x5E	; 94
    27b0:	d0 e2       	ldi	r29, 0x20	; 32
    27b2:	aa 81       	ldd	r26, Y+2	; 0x02
    27b4:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.data_count < pkg->length) {
    27b6:	8e 81       	ldd	r24, Y+6	; 0x06
    27b8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ba:	18 96       	adiw	r26, 0x08	; 8
    27bc:	2d 91       	ld	r18, X+
    27be:	3c 91       	ld	r19, X
    27c0:	19 97       	sbiw	r26, 0x09	; 9
    27c2:	82 17       	cp	r24, r18
    27c4:	93 07       	cpc	r25, r19
    27c6:	70 f5       	brcc	.+92     	; 0x2824 <__vector_11+0x15c>

		uint8_t * const data = pkg->buffer;
    27c8:	16 96       	adiw	r26, 0x06	; 6
    27ca:	6d 91       	ld	r22, X+
    27cc:	7c 91       	ld	r23, X
    27ce:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    27d0:	9c 01       	movw	r18, r24
    27d2:	2f 5f       	subi	r18, 0xFF	; 255
    27d4:	3f 4f       	sbci	r19, 0xFF	; 255
    27d6:	20 93 64 20 	sts	0x2064, r18
    27da:	30 93 65 20 	sts	0x2065, r19
    27de:	47 81       	ldd	r20, Z+7	; 0x07
    27e0:	86 0f       	add	r24, r22
    27e2:	97 1f       	adc	r25, r23
    27e4:	ec 01       	movw	r28, r24
    27e6:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    27e8:	eb 01       	movw	r28, r22
    27ea:	88 81       	ld	r24, Y
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	18 96       	adiw	r26, 0x08	; 8
    27f2:	4d 91       	ld	r20, X+
    27f4:	5c 91       	ld	r21, X
    27f6:	19 97       	sbiw	r26, 0x09	; 9
    27f8:	48 17       	cp	r20, r24
    27fa:	59 07       	cpc	r21, r25
    27fc:	21 f0       	breq	.+8      	; 0x2806 <__vector_11+0x13e>
		{
			pkg->length = data[0]+1;
    27fe:	18 96       	adiw	r26, 0x08	; 8
    2800:	8d 93       	st	X+, r24
    2802:	9c 93       	st	X, r25
    2804:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    2806:	18 96       	adiw	r26, 0x08	; 8
    2808:	8d 91       	ld	r24, X+
    280a:	9c 91       	ld	r25, X
    280c:	19 97       	sbiw	r26, 0x09	; 9
    280e:	28 17       	cp	r18, r24
    2810:	39 07       	cpc	r19, r25
    2812:	18 f4       	brcc	.+6      	; 0x281a <__vector_11+0x152>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	83 83       	std	Z+3, r24	; 0x03
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <__vector_11+0x16e>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    281a:	87 e0       	ldi	r24, 0x07	; 7
    281c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    281e:	10 92 68 20 	sts	0x2068, r1
    2822:	09 c0       	rjmp	.+18     	; 0x2836 <__vector_11+0x16e>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2824:	83 e0       	ldi	r24, 0x03	; 3
    2826:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    2828:	89 ef       	ldi	r24, 0xF9	; 249
    282a:	80 93 68 20 	sts	0x2068, r24
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <__vector_11+0x16e>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    2830:	8b ef       	ldi	r24, 0xFB	; 251
    2832:	80 93 68 20 	sts	0x2068, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    2836:	ff 91       	pop	r31
    2838:	ef 91       	pop	r30
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	bf 91       	pop	r27
    2840:	af 91       	pop	r26
    2842:	9f 91       	pop	r25
    2844:	8f 91       	pop	r24
    2846:	7f 91       	pop	r23
    2848:	6f 91       	pop	r22
    284a:	5f 91       	pop	r21
    284c:	4f 91       	pop	r20
    284e:	3f 91       	pop	r19
    2850:	2f 91       	pop	r18
    2852:	0f 90       	pop	r0
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	0f 90       	pop	r0
    2858:	1f 90       	pop	r1
    285a:	18 95       	reti

0000285c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    285c:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    285e:	db 01       	movw	r26, r22
    2860:	14 96       	adiw	r26, 0x04	; 4
    2862:	8c 91       	ld	r24, X
    2864:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    2866:	88 eb       	ldi	r24, 0xB8	; 184
    2868:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    286e:	ee e5       	ldi	r30, 0x5E	; 94
    2870:	f0 e2       	ldi	r31, 0x20	; 32
    2872:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    2874:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    2876:	e0 ea       	ldi	r30, 0xA0	; 160
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	82 60       	ori	r24, 0x02	; 2
    287e:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    2880:	78 94       	sei

	return STATUS_OK;
}
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	08 95       	ret

00002886 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    2886:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    2888:	89 2b       	or	r24, r25
    288a:	09 f4       	brne	.+2      	; 0x288e <twi_master_transfer+0x8>
    288c:	49 c0       	rjmp	.+146    	; 0x2920 <twi_master_transfer+0x9a>
    288e:	61 15       	cp	r22, r1
    2890:	71 05       	cpc	r23, r1
    2892:	09 f4       	brne	.+2      	; 0x2896 <twi_master_transfer+0x10>
    2894:	47 c0       	rjmp	.+142    	; 0x2924 <twi_master_transfer+0x9e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    2896:	fb 01       	movw	r30, r22
    2898:	92 85       	ldd	r25, Z+10	; 0x0a
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {
    289a:	80 91 67 20 	lds	r24, 0x2067
    289e:	88 23       	and	r24, r24
    28a0:	19 f0       	breq	.+6      	; 0x28a8 <twi_master_transfer+0x22>

		if (no_wait) { return ERR_BUSY; }
    28a2:	99 23       	and	r25, r25
    28a4:	f1 f3       	breq	.-4      	; 0x28a2 <twi_master_transfer+0x1c>
    28a6:	40 c0       	rjmp	.+128    	; 0x2928 <twi_master_transfer+0xa2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    28a8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    28aa:	f8 94       	cli
		#endif
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    28ac:	ee e5       	ldi	r30, 0x5E	; 94
    28ae:	f0 e2       	ldi	r31, 0x20	; 32
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
    28b4:	90 e8       	ldi	r25, 0x80	; 128
    28b6:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28b8:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    28ba:	a0 83       	st	Z, r26
    28bc:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
    28be:	62 83       	std	Z+2, r22	; 0x02
    28c0:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
    28c2:	14 82       	std	Z+4, r1	; 0x04
    28c4:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
    28c6:	16 82       	std	Z+6, r1	; 0x06
    28c8:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
    28ca:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
    28cc:	fb 01       	movw	r30, r22
    28ce:	80 81       	ld	r24, Z
    28d0:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    28d2:	24 81       	ldd	r18, Z+4	; 0x04
    28d4:	35 81       	ldd	r19, Z+5	; 0x05
    28d6:	23 2b       	or	r18, r19
    28d8:	11 f4       	brne	.+4      	; 0x28de <twi_master_transfer+0x58>
    28da:	41 11       	cpse	r20, r1
    28dc:	03 c0       	rjmp	.+6      	; 0x28e4 <twi_master_transfer+0x5e>
			transfer.bus->MASTER.ADDR = chip;
    28de:	16 96       	adiw	r26, 0x06	; 6
    28e0:	8c 93       	st	X, r24
    28e2:	03 c0       	rjmp	.+6      	; 0x28ea <twi_master_transfer+0x64>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    28e4:	81 60       	ori	r24, 0x01	; 1
    28e6:	16 96       	adiw	r26, 0x06	; 6
    28e8:	8c 93       	st	X, r24
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	int count=0;
	while (OPERATION_IN_PROGRESS == transfer.status) {
    28ea:	ee e5       	ldi	r30, 0x5E	; 94
    28ec:	f0 e2       	ldi	r31, 0x20	; 32
    28ee:	82 85       	ldd	r24, Z+10	; 0x0a
    28f0:	80 38       	cpi	r24, 0x80	; 128
    28f2:	e9 f3       	breq	.-6      	; 0x28ee <twi_master_transfer+0x68>
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    28f4:	e0 91 5e 20 	lds	r30, 0x205E
    28f8:	f0 91 5f 20 	lds	r31, 0x205F
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    28fc:	84 81       	ldd	r24, Z+4	; 0x04
    28fe:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	49 f0       	breq	.+18     	; 0x2916 <twi_master_transfer+0x90>
    2904:	ae e5       	ldi	r26, 0x5E	; 94
    2906:	b0 e2       	ldi	r27, 0x20	; 32
    2908:	ed 91       	ld	r30, X+
    290a:	fc 91       	ld	r31, X
    290c:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    290e:	84 81       	ldd	r24, Z+4	; 0x04
    2910:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	c9 f7       	brne	.-14     	; 0x2908 <twi_master_transfer+0x82>
			if(count++>10000)
			return ERR_BUSY;
		#endif
	}

	status_code_t const status = transfer.status;
    2916:	ee e5       	ldi	r30, 0x5E	; 94
    2918:	f0 e2       	ldi	r31, 0x20	; 32
    291a:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    291c:	11 86       	std	Z+9, r1	; 0x09
    291e:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    2920:	88 ef       	ldi	r24, 0xF8	; 248
    2922:	08 95       	ret
    2924:	88 ef       	ldi	r24, 0xF8	; 248
    2926:	08 95       	ret
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    2928:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    292a:	08 95       	ret

0000292c <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
    292c:	fc 01       	movw	r30, r24
      unsigned int count=0;
	  
	while (usart_data_register_is_empty(usart) == false) {
    292e:	22 e1       	ldi	r18, 0x12	; 18
    2930:	37 e2       	ldi	r19, 0x27	; 39
    2932:	03 c0       	rjmp	.+6      	; 0x293a <usart_putchar+0xe>
    2934:	21 50       	subi	r18, 0x01	; 1
    2936:	31 09       	sbc	r19, r1
#ifdef LIMIT_LOOP
           if(count++>10000)
    2938:	19 f0       	breq	.+6      	; 0x2940 <usart_putchar+0x14>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    293a:	91 81       	ldd	r25, Z+1	; 0x01
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
      unsigned int count=0;
	  
	while (usart_data_register_is_empty(usart) == false) {
    293c:	95 ff       	sbrs	r25, 5
    293e:	fa cf       	rjmp	.-12     	; 0x2934 <usart_putchar+0x8>
           if(count++>10000)
		   	break;
#endif
	}
	
	(usart)->DATA = c;
    2940:	60 83       	st	Z, r22
	return STATUS_OK;
}
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	08 95       	ret

00002948 <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
    2948:	fc 01       	movw	r30, r24
      unsigned int count=0;
	  
	while (usart_rx_is_complete(usart) == false) {
    294a:	22 e1       	ldi	r18, 0x12	; 18
    294c:	37 e2       	ldi	r19, 0x27	; 39
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <usart_getchar+0xe>
    2950:	21 50       	subi	r18, 0x01	; 1
    2952:	31 09       	sbc	r19, r1
#ifdef LIMIT_LOOP
           if(count++>10000)
    2954:	19 f0       	breq	.+6      	; 0x295c <usart_getchar+0x14>
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    2956:	91 81       	ldd	r25, Z+1	; 0x01
 */
uint8_t usart_getchar(USART_t *usart)
{
      unsigned int count=0;
	  
	while (usart_rx_is_complete(usart) == false) {
    2958:	99 23       	and	r25, r25
    295a:	d4 f7       	brge	.-12     	; 0x2950 <usart_getchar+0x8>
           if(count++>10000)
		   break;
#endif		
	}
	
	return ((uint8_t)(usart)->DATA);
    295c:	80 81       	ld	r24, Z
}
    295e:	08 95       	ret

00002960 <__udivmodhi4>:
    2960:	aa 1b       	sub	r26, r26
    2962:	bb 1b       	sub	r27, r27
    2964:	51 e1       	ldi	r21, 0x11	; 17
    2966:	07 c0       	rjmp	.+14     	; 0x2976 <__udivmodhi4_ep>

00002968 <__udivmodhi4_loop>:
    2968:	aa 1f       	adc	r26, r26
    296a:	bb 1f       	adc	r27, r27
    296c:	a6 17       	cp	r26, r22
    296e:	b7 07       	cpc	r27, r23
    2970:	10 f0       	brcs	.+4      	; 0x2976 <__udivmodhi4_ep>
    2972:	a6 1b       	sub	r26, r22
    2974:	b7 0b       	sbc	r27, r23

00002976 <__udivmodhi4_ep>:
    2976:	88 1f       	adc	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	5a 95       	dec	r21
    297c:	a9 f7       	brne	.-22     	; 0x2968 <__udivmodhi4_loop>
    297e:	80 95       	com	r24
    2980:	90 95       	com	r25
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	08 95       	ret

00002988 <__divmodhi4>:
    2988:	97 fb       	bst	r25, 7
    298a:	07 2e       	mov	r0, r23
    298c:	16 f4       	brtc	.+4      	; 0x2992 <__divmodhi4+0xa>
    298e:	00 94       	com	r0
    2990:	06 d0       	rcall	.+12     	; 0x299e <__divmodhi4_neg1>
    2992:	77 fd       	sbrc	r23, 7
    2994:	08 d0       	rcall	.+16     	; 0x29a6 <__divmodhi4_neg2>
    2996:	e4 df       	rcall	.-56     	; 0x2960 <__udivmodhi4>
    2998:	07 fc       	sbrc	r0, 7
    299a:	05 d0       	rcall	.+10     	; 0x29a6 <__divmodhi4_neg2>
    299c:	3e f4       	brtc	.+14     	; 0x29ac <__divmodhi4_exit>

0000299e <__divmodhi4_neg1>:
    299e:	90 95       	com	r25
    29a0:	81 95       	neg	r24
    29a2:	9f 4f       	sbci	r25, 0xFF	; 255
    29a4:	08 95       	ret

000029a6 <__divmodhi4_neg2>:
    29a6:	70 95       	com	r23
    29a8:	61 95       	neg	r22
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255

000029ac <__divmodhi4_exit>:
    29ac:	08 95       	ret

000029ae <__tablejump2__>:
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	05 90       	lpm	r0, Z+
    29b4:	f4 91       	lpm	r31, Z
    29b6:	e0 2d       	mov	r30, r0
    29b8:	09 94       	ijmp

000029ba <_exit>:
    29ba:	f8 94       	cli

000029bc <__stop_program>:
    29bc:	ff cf       	rjmp	.-2      	; 0x29bc <__stop_program>
